using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebReg.Reporter.Data.Context.Models;

namespace WebReg.Reporter.Data.Context
{
    public partial class WebRegContext : DbContext
    {
        public WebRegContext()
        {
        }

        public WebRegContext(DbContextOptions<WebRegContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Abonent1cFastView> Abonent1cFastViews { get; set; } = null!;
        public virtual DbSet<Abonent1cView> Abonent1cViews { get; set; } = null!;
        public virtual DbSet<AbonentConnect> AbonentConnects { get; set; } = null!;
        public virtual DbSet<AbonentRecipientRegDate> AbonentRecipientRegDates { get; set; } = null!;
        public virtual DbSet<AbonentRecipientRegDateStatistic> AbonentRecipientRegDateStatistics { get; set; } = null!;
        public virtual DbSet<AbonentRecipientStatisticForFn> AbonentRecipientStatisticForFns { get; set; } = null!;
        public virtual DbSet<AbonentTemp1c> AbonentTemp1cs { get; set; } = null!;
        public virtual DbSet<AbonnentClosedConnectCert> AbonnentClosedConnectCerts { get; set; } = null!;
        public virtual DbSet<AbonnentClosedConnectLic> AbonnentClosedConnectLics { get; set; } = null!;
        public virtual DbSet<Actual1cProduct> Actual1cProducts { get; set; } = null!;
        public virtual DbSet<Actual1cRequest> Actual1cRequests { get; set; } = null!;
        public virtual DbSet<CertificateForCaReport> CertificateForCaReports { get; set; } = null!;
        public virtual DbSet<DelegateView> DelegateViews { get; set; } = null!;
        public virtual DbSet<FcrarCertView> FcrarCertViews { get; set; } = null!;
        public virtual DbSet<InterviewResultView> InterviewResultViews { get; set; } = null!;
        public virtual DbSet<LastLicenseView> LastLicenseViews { get; set; } = null!;
        public virtual DbSet<LicenseCreationTimeView> LicenseCreationTimeViews { get; set; } = null!;
        public virtual DbSet<MinfinCertView> MinfinCertViews { get; set; } = null!;
        public virtual DbSet<MonitoringAbonentView> MonitoringAbonentViews { get; set; } = null!;
        public virtual DbSet<MonitoringAppView> MonitoringAppViews { get; set; } = null!;
        public virtual DbSet<MonitoringMemberView> MonitoringMemberViews { get; set; } = null!;
        public virtual DbSet<MonitoringRecipientView> MonitoringRecipientViews { get; set; } = null!;
        public virtual DbSet<PeriodicReportToRegionalUfn> PeriodicReportToRegionalUfns { get; set; } = null!;
        public virtual DbSet<PrimaryLicenseView> PrimaryLicenseViews { get; set; } = null!;
        public virtual DbSet<ProductDataTemp> ProductDataTemps { get; set; } = null!;
        public virtual DbSet<ProductLicenseView> ProductLicenseViews { get; set; } = null!;
        public virtual DbSet<ProductRegDate> ProductRegDates { get; set; } = null!;
        public virtual DbSet<RecipientForAbonent> RecipientForAbonents { get; set; } = null!;
        public virtual DbSet<ReportFromTopConnect> ReportFromTopConnects { get; set; } = null!;
        public virtual DbSet<ReportFullTimeConnectCert> ReportFullTimeConnectCerts { get; set; } = null!;
        public virtual DbSet<ReportFullTimeConnectLic> ReportFullTimeConnectLics { get; set; } = null!;
        public virtual DbSet<RoAbonent> RoAbonents { get; set; } = null!;
        public virtual DbSet<RoAbonent1cPortalContactView> RoAbonent1cPortalContactViews { get; set; } = null!;
        public virtual DbSet<RoAbonentCount> RoAbonentCounts { get; set; } = null!;
        public virtual DbSet<RoAbonentDataView> RoAbonentDataViews { get; set; } = null!;
        public virtual DbSet<RoAbonentDataViewNew> RoAbonentDataViewNews { get; set; } = null!;
        public virtual DbSet<RoAbonentImportTask> RoAbonentImportTasks { get; set; } = null!;
        public virtual DbSet<RoAbonentListView> RoAbonentListViews { get; set; } = null!;
        public virtual DbSet<RoAbonentPerson> RoAbonentPeople { get; set; } = null!;
        public virtual DbSet<RoAbonentRecipientForRegion> RoAbonentRecipientForRegions { get; set; } = null!;
        public virtual DbSet<RoAbonentRegionView> RoAbonentRegionViews { get; set; } = null!;
        public virtual DbSet<RoAbonentStepView> RoAbonentStepViews { get; set; } = null!;
        public virtual DbSet<RoAbonentTariff> RoAbonentTariffs { get; set; } = null!;
        public virtual DbSet<RoAbonentTariffView1c> RoAbonentTariffView1cs { get; set; } = null!;
        public virtual DbSet<RoAbonentType> RoAbonentTypes { get; set; } = null!;
        public virtual DbSet<RoAccessLevel> RoAccessLevels { get; set; } = null!;
        public virtual DbSet<RoAccount1c> RoAccount1cs { get; set; } = null!;
        public virtual DbSet<RoAccrRepresentView> RoAccrRepresentViews { get; set; } = null!;
        public virtual DbSet<RoActionNumbersView> RoActionNumbersViews { get; set; } = null!;
        public virtual DbSet<RoAddr> RoAddrs { get; set; } = null!;
        public virtual DbSet<RoAddress> RoAddresses { get; set; } = null!;
        public virtual DbSet<RoAddressObject> RoAddressObjects { get; set; } = null!;
        public virtual DbSet<RoAddressObjectLevel> RoAddressObjectLevels { get; set; } = null!;
        public virtual DbSet<RoAddressObjectPrefix> RoAddressObjectPrefixes { get; set; } = null!;
        public virtual DbSet<RoAgent> RoAgents { get; set; } = null!;
        public virtual DbSet<RoAgentAgreement> RoAgentAgreements { get; set; } = null!;
        public virtual DbSet<RoAgentBalance> RoAgentBalances { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceAcceptedView> RoAgentBalanceAcceptedViews { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceBill> RoAgentBalanceBills { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceDetail> RoAgentBalanceDetails { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceDetailChangeRequest> RoAgentBalanceDetailChangeRequests { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceDetailChangeRequestComment> RoAgentBalanceDetailChangeRequestComments { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceDetailChangeRequestStep> RoAgentBalanceDetailChangeRequestSteps { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceGroup> RoAgentBalanceGroups { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceOffice> RoAgentBalanceOffices { get; set; } = null!;
        public virtual DbSet<RoAgentBalanceProcessing> RoAgentBalanceProcessings { get; set; } = null!;
        public virtual DbSet<RoAgentContract> RoAgentContracts { get; set; } = null!;
        public virtual DbSet<RoAgentLevel> RoAgentLevels { get; set; } = null!;
        public virtual DbSet<RoAgentLevelAuc> RoAgentLevelAucs { get; set; } = null!;
        public virtual DbSet<RoAgentLocalityRating> RoAgentLocalityRatings { get; set; } = null!;
        public virtual DbSet<RoAgentLocalityView> RoAgentLocalityViews { get; set; } = null!;
        public virtual DbSet<RoAgentMerchandise> RoAgentMerchandises { get; set; } = null!;
        public virtual DbSet<RoAgentRegionRating> RoAgentRegionRatings { get; set; } = null!;
        public virtual DbSet<RoAgentReward> RoAgentRewards { get; set; } = null!;
        public virtual DbSet<RoAgentScheme> RoAgentSchemes { get; set; } = null!;
        public virtual DbSet<RoAgentSetting> RoAgentSettings { get; set; } = null!;
        public virtual DbSet<RoAltname> RoAltnames { get; set; } = null!;
        public virtual DbSet<RoAo5BillView> RoAo5BillViews { get; set; } = null!;
        public virtual DbSet<RoAoAbonentContractTariffView> RoAoAbonentContractTariffViews { get; set; } = null!;
        public virtual DbSet<RoAoAbonentContractTariffViewEx> RoAoAbonentContractTariffViewices { get; set; } = null!;
        public virtual DbSet<RoApplication> RoApplications { get; set; } = null!;
        public virtual DbSet<RoApplicationSetting> RoApplicationSettings { get; set; } = null!;
        public virtual DbSet<RoApplicationStep> RoApplicationSteps { get; set; } = null!;
        public virtual DbSet<RoAr1cView> RoAr1cViews { get; set; } = null!;
        public virtual DbSet<RoAstralWorkflowClient> RoAstralWorkflowClients { get; set; } = null!;
        public virtual DbSet<RoAstralWorkflowProcessing> RoAstralWorkflowProcessings { get; set; } = null!;
        public virtual DbSet<RoAttribute> RoAttributes { get; set; } = null!;
        public virtual DbSet<RoAttributeDocumentType> RoAttributeDocumentTypes { get; set; } = null!;
        public virtual DbSet<RoAttributeEku> RoAttributeEkus { get; set; } = null!;
        public virtual DbSet<RoAttributeType> RoAttributeTypes { get; set; } = null!;
        public virtual DbSet<RoAuditDatum> RoAuditData { get; set; } = null!;
        public virtual DbSet<RoAuditField> RoAuditFields { get; set; } = null!;
        public virtual DbSet<RoAuthorizationCode> RoAuthorizationCodes { get; set; } = null!;
        public virtual DbSet<RoAuto1cReportStatistic> RoAuto1cReportStatistics { get; set; } = null!;
        public virtual DbSet<RoBalanceBuildTask> RoBalanceBuildTasks { get; set; } = null!;
        public virtual DbSet<RoBank> RoBanks { get; set; } = null!;
        public virtual DbSet<RoBillDocument> RoBillDocuments { get; set; } = null!;
        public virtual DbSet<RoBillDocumentType> RoBillDocumentTypes { get; set; } = null!;
        public virtual DbSet<RoBillView> RoBillViews { get; set; } = null!;
        public virtual DbSet<RoBlockRequisiteTask> RoBlockRequisiteTasks { get; set; } = null!;
        public virtual DbSet<RoBlockedRequisite> RoBlockedRequisites { get; set; } = null!;
        public virtual DbSet<RoBonu> RoBonus { get; set; } = null!;
        public virtual DbSet<RoBonusType> RoBonusTypes { get; set; } = null!;
        public virtual DbSet<RoBulkSkziLicenseUploadTask> RoBulkSkziLicenseUploadTasks { get; set; } = null!;
        public virtual DbSet<RoCa> RoCas { get; set; } = null!;
        public virtual DbSet<RoCaAccreditation> RoCaAccreditations { get; set; } = null!;
        public virtual DbSet<RoCaAction> RoCaActions { get; set; } = null!;
        public virtual DbSet<RoCaCertificate> RoCaCertificates { get; set; } = null!;
        public virtual DbSet<RoCaMessenger> RoCaMessengers { get; set; } = null!;
        public virtual DbSet<RoCaProductType> RoCaProductTypes { get; set; } = null!;
        public virtual DbSet<RoCaRequestApi> RoCaRequestApis { get; set; } = null!;
        public virtual DbSet<RoCaService> RoCaServices { get; set; } = null!;
        public virtual DbSet<RoCaServiceType> RoCaServiceTypes { get; set; } = null!;
        public virtual DbSet<RoCaSetting> RoCaSettings { get; set; } = null!;
        public virtual DbSet<RoCaTemplate> RoCaTemplates { get; set; } = null!;
        public virtual DbSet<RoCaTemplateAttribute> RoCaTemplateAttributes { get; set; } = null!;
        public virtual DbSet<RoCaTemplateType> RoCaTemplateTypes { get; set; } = null!;
        public virtual DbSet<RoCallbackRequest> RoCallbackRequests { get; set; } = null!;
        public virtual DbSet<RoCallbackRequestType> RoCallbackRequestTypes { get; set; } = null!;
        public virtual DbSet<RoCategory> RoCategories { get; set; } = null!;
        public virtual DbSet<RoCcItsBalance> RoCcItsBalances { get; set; } = null!;
        public virtual DbSet<RoCcItsBalanceDetail> RoCcItsBalanceDetails { get; set; } = null!;
        public virtual DbSet<RoCemposRecipient> RoCemposRecipients { get; set; } = null!;
        public virtual DbSet<RoCertTemplate> RoCertTemplates { get; set; } = null!;
        public virtual DbSet<RoCertTemplateEku> RoCertTemplateEkus { get; set; } = null!;
        public virtual DbSet<RoCertTemplateProductType> RoCertTemplateProductTypes { get; set; } = null!;
        public virtual DbSet<RoCertificate> RoCertificates { get; set; } = null!;
        public virtual DbSet<RoCertificateInProduct> RoCertificateInProducts { get; set; } = null!;
        public virtual DbSet<RoCertificateIrudRegistration> RoCertificateIrudRegistrations { get; set; } = null!;
        public virtual DbSet<RoCertificateRequest> RoCertificateRequests { get; set; } = null!;
        public virtual DbSet<RoCertificateRequestStep> RoCertificateRequestSteps { get; set; } = null!;
        public virtual DbSet<RoCertificateRevocation> RoCertificateRevocations { get; set; } = null!;
        public virtual DbSet<RoCertificateRevokeHistory> RoCertificateRevokeHistories { get; set; } = null!;
        public virtual DbSet<RoCertificateRevokeRequest> RoCertificateRevokeRequests { get; set; } = null!;
        public virtual DbSet<RoCertificateService> RoCertificateServices { get; set; } = null!;
        public virtual DbSet<RoCertificateServiceSetting> RoCertificateServiceSettings { get; set; } = null!;
        public virtual DbSet<RoCertificateServiceStep> RoCertificateServiceSteps { get; set; } = null!;
        public virtual DbSet<RoCertificateStep> RoCertificateSteps { get; set; } = null!;
        public virtual DbSet<RoCertificateTariff> RoCertificateTariffs { get; set; } = null!;
        public virtual DbSet<RoCertificateTariffStep> RoCertificateTariffSteps { get; set; } = null!;
        public virtual DbSet<RoCertificateType> RoCertificateTypes { get; set; } = null!;
        public virtual DbSet<RoCheckingMode> RoCheckingModes { get; set; } = null!;
        public virtual DbSet<RoCheckingScheme> RoCheckingSchemes { get; set; } = null!;
        public virtual DbSet<RoCheckingType> RoCheckingTypes { get; set; } = null!;
        public virtual DbSet<RoChildAgentViewAndAbonent> RoChildAgentViewAndAbonents { get; set; } = null!;
        public virtual DbSet<RoChildAgentsView> RoChildAgentsViews { get; set; } = null!;
        public virtual DbSet<RoCoefficient> RoCoefficients { get; set; } = null!;
        public virtual DbSet<RoCoefficientType> RoCoefficientTypes { get; set; } = null!;
        public virtual DbSet<RoComment> RoComments { get; set; } = null!;
        public virtual DbSet<RoCompanyGroup> RoCompanyGroups { get; set; } = null!;
        public virtual DbSet<RoCompetencyCenterReward> RoCompetencyCenterRewards { get; set; } = null!;
        public virtual DbSet<RoCondition> RoConditions { get; set; } = null!;
        public virtual DbSet<RoConfig> RoConfigs { get; set; } = null!;
        public virtual DbSet<RoContact> RoContacts { get; set; } = null!;
        public virtual DbSet<RoContactPerson> RoContactPeople { get; set; } = null!;
        public virtual DbSet<RoContactPersonUse> RoContactPersonUses { get; set; } = null!;
        public virtual DbSet<RoContactType> RoContactTypes { get; set; } = null!;
        public virtual DbSet<RoContactUse> RoContactUses { get; set; } = null!;
        public virtual DbSet<RoContract> RoContracts { get; set; } = null!;
        public virtual DbSet<RoContractStep> RoContractSteps { get; set; } = null!;
        public virtual DbSet<RoContractTariff> RoContractTariffs { get; set; } = null!;
        public virtual DbSet<RoContractTariffDiscount> RoContractTariffDiscounts { get; set; } = null!;
        public virtual DbSet<RoContractTariffExtension> RoContractTariffExtensions { get; set; } = null!;
        public virtual DbSet<RoContractTariffStep> RoContractTariffSteps { get; set; } = null!;
        public virtual DbSet<RoContractType> RoContractTypes { get; set; } = null!;
        public virtual DbSet<RoCountry> RoCountries { get; set; } = null!;
        public virtual DbSet<RoCrl> RoCrls { get; set; } = null!;
        public virtual DbSet<RoCrlLink> RoCrlLinks { get; set; } = null!;
        public virtual DbSet<RoCryptoStorage> RoCryptoStorages { get; set; } = null!;
        public virtual DbSet<RoCryptoStorageKey> RoCryptoStorageKeys { get; set; } = null!;
        public virtual DbSet<RoDiscount> RoDiscounts { get; set; } = null!;
        public virtual DbSet<RoDiscountType> RoDiscountTypes { get; set; } = null!;
        public virtual DbSet<RoDisqualifiedPerson> RoDisqualifiedPeople { get; set; } = null!;
        public virtual DbSet<RoDistributionView> RoDistributionViews { get; set; } = null!;
        public virtual DbSet<RoDoc> RoDocs { get; set; } = null!;
        public virtual DbSet<RoDocType> RoDocTypes { get; set; } = null!;
        public virtual DbSet<RoDocumentType> RoDocumentTypes { get; set; } = null!;
        public virtual DbSet<RoDomainEvent> RoDomainEvents { get; set; } = null!;
        public virtual DbSet<RoDss> RoDsses { get; set; } = null!;
        public virtual DbSet<RoDssAuth> RoDssAuths { get; set; } = null!;
        public virtual DbSet<RoDssAuthKey> RoDssAuthKeys { get; set; } = null!;
        public virtual DbSet<RoDssAuthKeyStep> RoDssAuthKeySteps { get; set; } = null!;
        public virtual DbSet<RoDssAuthMeth> RoDssAuthMeths { get; set; } = null!;
        public virtual DbSet<RoDssAuthMode> RoDssAuthModes { get; set; } = null!;
        public virtual DbSet<RoDssAuthStep> RoDssAuthSteps { get; set; } = null!;
        public virtual DbSet<RoDssAuthSystem> RoDssAuthSystems { get; set; } = null!;
        public virtual DbSet<RoDssTariff> RoDssTariffs { get; set; } = null!;
        public virtual DbSet<RoDssUser> RoDssUsers { get; set; } = null!;
        public virtual DbSet<RoDssUserAuthStep> RoDssUserAuthSteps { get; set; } = null!;
        public virtual DbSet<RoDssUserGroup> RoDssUserGroups { get; set; } = null!;
        public virtual DbSet<RoEku> RoEkus { get; set; } = null!;
        public virtual DbSet<RoEmail> RoEmails { get; set; } = null!;
        public virtual DbSet<RoEntityType> RoEntityTypes { get; set; } = null!;
        public virtual DbSet<RoExtremumAoContractTariffView> RoExtremumAoContractTariffViews { get; set; } = null!;
        public virtual DbSet<RoExtremumLicenseView> RoExtremumLicenseViews { get; set; } = null!;
        public virtual DbSet<RoFeedbackRating> RoFeedbackRatings { get; set; } = null!;
        public virtual DbSet<RoFile> RoFiles { get; set; } = null!;
        public virtual DbSet<RoFileMask> RoFileMasks { get; set; } = null!;
        public virtual DbSet<RoFileSignature> RoFileSignatures { get; set; } = null!;
        public virtual DbSet<RoFileType> RoFileTypes { get; set; } = null!;
        public virtual DbSet<RoGate> RoGates { get; set; } = null!;
        public virtual DbSet<RoGateProductType> RoGateProductTypes { get; set; } = null!;
        public virtual DbSet<RoGateProtocol> RoGateProtocols { get; set; } = null!;
        public virtual DbSet<RoGateSetting> RoGateSettings { get; set; } = null!;
        public virtual DbSet<RoGateUpdater> RoGateUpdaters { get; set; } = null!;
        public virtual DbSet<RoGender> RoGenders { get; set; } = null!;
        public virtual DbSet<RoHolding> RoHoldings { get; set; } = null!;
        public virtual DbSet<RoHoldingAbonent> RoHoldingAbonents { get; set; } = null!;
        public virtual DbSet<RoInterview> RoInterviews { get; set; } = null!;
        public virtual DbSet<RoInterviewAnswer> RoInterviewAnswers { get; set; } = null!;
        public virtual DbSet<RoInterviewStep> RoInterviewSteps { get; set; } = null!;
        public virtual DbSet<RoInvoiceReturnType> RoInvoiceReturnTypes { get; set; } = null!;
        public virtual DbSet<RoIp> RoIps { get; set; } = null!;
        public virtual DbSet<RoIrucAbonent> RoIrucAbonents { get; set; } = null!;
        public virtual DbSet<RoIsExistRnsPfr> RoIsExistRnsPfrs { get; set; } = null!;
        public virtual DbSet<RoIssuer> RoIssuers { get; set; } = null!;
        public virtual DbSet<RoIssuerAccreditation> RoIssuerAccreditations { get; set; } = null!;
        public virtual DbSet<RoIt> RoIts { get; set; } = null!;
        public virtual DbSet<RoItsDistributor> RoItsDistributors { get; set; } = null!;
        public virtual DbSet<RoItsHistory> RoItsHistories { get; set; } = null!;
        public virtual DbSet<RoItsProcessedFileHistory> RoItsProcessedFileHistories { get; set; } = null!;
        public virtual DbSet<RoItsProfSubscription> RoItsProfSubscriptions { get; set; } = null!;
        public virtual DbSet<RoItsStringNumber> RoItsStringNumbers { get; set; } = null!;
        public virtual DbSet<RoKcrIssue> RoKcrIssues { get; set; } = null!;
        public virtual DbSet<RoKey> RoKeys { get; set; } = null!;
        public virtual DbSet<RoKeyPermission> RoKeyPermissions { get; set; } = null!;
        public virtual DbSet<RoKeySerialNumber> RoKeySerialNumbers { get; set; } = null!;
        public virtual DbSet<RoKladr> RoKladrs { get; set; } = null!;
        public virtual DbSet<RoLicense> RoLicenses { get; set; } = null!;
        public virtual DbSet<RoLicenseDetail> RoLicenseDetails { get; set; } = null!;
        public virtual DbSet<RoLicenseInProduct> RoLicenseInProducts { get; set; } = null!;
        public virtual DbSet<RoLicensePool> RoLicensePools { get; set; } = null!;
        public virtual DbSet<RoLicensePoolStep> RoLicensePoolSteps { get; set; } = null!;
        public virtual DbSet<RoLicenseStep> RoLicenseSteps { get; set; } = null!;
        public virtual DbSet<RoLicenseType> RoLicenseTypes { get; set; } = null!;
        public virtual DbSet<RoLimit> RoLimits { get; set; } = null!;
        public virtual DbSet<RoLog> RoLogs { get; set; } = null!;
        public virtual DbSet<RoLogExtended> RoLogExtendeds { get; set; } = null!;
        public virtual DbSet<RoLogExtendedDetail> RoLogExtendedDetails { get; set; } = null!;
        public virtual DbSet<RoLogExtendedOperationDesc> RoLogExtendedOperationDescs { get; set; } = null!;
        public virtual DbSet<RoLogType> RoLogTypes { get; set; } = null!;
        public virtual DbSet<RoLogV2> RoLogV2s { get; set; } = null!;
        public virtual DbSet<RoLoginFailAttempt> RoLoginFailAttempts { get; set; } = null!;
        public virtual DbSet<RoMachineReadableProxyType> RoMachineReadableProxyTypes { get; set; } = null!;
        public virtual DbSet<RoMemberReserveKey> RoMemberReserveKeys { get; set; } = null!;
        public virtual DbSet<RoMerchandise> RoMerchandises { get; set; } = null!;
        public virtual DbSet<RoMerchandiseBill> RoMerchandiseBills { get; set; } = null!;
        public virtual DbSet<RoMerchandiseGroup> RoMerchandiseGroups { get; set; } = null!;
        public virtual DbSet<RoMerchandiseGroupItem> RoMerchandiseGroupItems { get; set; } = null!;
        public virtual DbSet<RoMerchandiseGroupType> RoMerchandiseGroupTypes { get; set; } = null!;
        public virtual DbSet<RoMerchandiseType> RoMerchandiseTypes { get; set; } = null!;
        public virtual DbSet<RoMercuryCommonView> RoMercuryCommonViews { get; set; } = null!;
        public virtual DbSet<RoMercuryExternalView> RoMercuryExternalViews { get; set; } = null!;
        public virtual DbSet<RoMercuryMessenger> RoMercuryMessengers { get; set; } = null!;
        public virtual DbSet<RoMercuryMessengerStep> RoMercuryMessengerSteps { get; set; } = null!;
        public virtual DbSet<RoMercuryOfficeView> RoMercuryOfficeViews { get; set; } = null!;
        public virtual DbSet<RoMercuryPlugin> RoMercuryPlugins { get; set; } = null!;
        public virtual DbSet<RoMercuryRecipient> RoMercuryRecipients { get; set; } = null!;
        public virtual DbSet<RoMercuryRecipientStep> RoMercuryRecipientSteps { get; set; } = null!;
        public virtual DbSet<RoMercuryRecipientView> RoMercuryRecipientViews { get; set; } = null!;
        public virtual DbSet<RoMercuryRoute> RoMercuryRoutes { get; set; } = null!;
        public virtual DbSet<RoMessenger> RoMessengers { get; set; } = null!;
        public virtual DbSet<RoMessengerCertificate> RoMessengerCertificates { get; set; } = null!;
        public virtual DbSet<RoMessengerRecipient> RoMessengerRecipients { get; set; } = null!;
        public virtual DbSet<RoMessengerSuffix> RoMessengerSuffixes { get; set; } = null!;
        public virtual DbSet<RoMessengerUpdater> RoMessengerUpdaters { get; set; } = null!;
        public virtual DbSet<RoModule> RoModules { get; set; } = null!;
        public virtual DbSet<RoModuleTariff> RoModuleTariffs { get; set; } = null!;
        public virtual DbSet<RoModuleType> RoModuleTypes { get; set; } = null!;
        public virtual DbSet<RoMonitoringView> RoMonitoringViews { get; set; } = null!;
        public virtual DbSet<RoNews> RoNews { get; set; } = null!;
        public virtual DbSet<RoNewsBrowsing> RoNewsBrowsings { get; set; } = null!;
        public virtual DbSet<RoNewsFile> RoNewsFiles { get; set; } = null!;
        public virtual DbSet<RoNewsLastVisit> RoNewsLastVisits { get; set; } = null!;
        public virtual DbSet<RoNewsReview> RoNewsReviews { get; set; } = null!;
        public virtual DbSet<RoNewsSetting> RoNewsSettings { get; set; } = null!;
        public virtual DbSet<RoNewsVisibility> RoNewsVisibilities { get; set; } = null!;
        public virtual DbSet<RoNotificationTemplate> RoNotificationTemplates { get; set; } = null!;
        public virtual DbSet<RoNotificationTemplateRequest> RoNotificationTemplateRequests { get; set; } = null!;
        public virtual DbSet<RoNotificationTemplateRequestType> RoNotificationTemplateRequestTypes { get; set; } = null!;
        public virtual DbSet<RoNotificationTemplateState> RoNotificationTemplateStates { get; set; } = null!;
        public virtual DbSet<RoNumber> RoNumbers { get; set; } = null!;
        public virtual DbSet<RoObject> RoObjects { get; set; } = null!;
        public virtual DbSet<RoObjectType> RoObjectTypes { get; set; } = null!;
        public virtual DbSet<RoOfdDevice> RoOfdDevices { get; set; } = null!;
        public virtual DbSet<RoOfdDeviceType> RoOfdDeviceTypes { get; set; } = null!;
        public virtual DbSet<RoOfdDiscount> RoOfdDiscounts { get; set; } = null!;
        public virtual DbSet<RoOfdPin> RoOfdPins { get; set; } = null!;
        public virtual DbSet<RoOfdPinSetting> RoOfdPinSettings { get; set; } = null!;
        public virtual DbSet<RoOfdPinTemplate> RoOfdPinTemplates { get; set; } = null!;
        public virtual DbSet<RoOfdPinTemplateLimit> RoOfdPinTemplateLimits { get; set; } = null!;
        public virtual DbSet<RoOfdPinType> RoOfdPinTypes { get; set; } = null!;
        public virtual DbSet<RoOfdPrefix> RoOfdPrefixes { get; set; } = null!;
        public virtual DbSet<RoOfdProduct> RoOfdProducts { get; set; } = null!;
        public virtual DbSet<RoOffice> RoOffices { get; set; } = null!;
        public virtual DbSet<RoOfficeCertificate> RoOfficeCertificates { get; set; } = null!;
        public virtual DbSet<RoOfficeSetting> RoOfficeSettings { get; set; } = null!;
        public virtual DbSet<RoOfficeTeam> RoOfficeTeams { get; set; } = null!;
        public virtual DbSet<RoOfficeTeamPerson> RoOfficeTeamPeople { get; set; } = null!;
        public virtual DbSet<RoOkopf> RoOkopfs { get; set; } = null!;
        public virtual DbSet<RoOneSAbonentContractTariffView> RoOneSAbonentContractTariffViews { get; set; } = null!;
        public virtual DbSet<RoOneSAbonentContractTariffViewEx> RoOneSAbonentContractTariffViewices { get; set; } = null!;
        public virtual DbSet<RoOperation> RoOperations { get; set; } = null!;
        public virtual DbSet<RoOperationLog> RoOperationLogs { get; set; } = null!;
        public virtual DbSet<RoOperatorIruc> RoOperatorIrucs { get; set; } = null!;
        public virtual DbSet<RoOrder> RoOrders { get; set; } = null!;
        public virtual DbSet<RoOrgUnit> RoOrgUnits { get; set; } = null!;
        public virtual DbSet<RoPassportDataType> RoPassportDataTypes { get; set; } = null!;
        public virtual DbSet<RoPassportType> RoPassportTypes { get; set; } = null!;
        public virtual DbSet<RoPermission> RoPermissions { get; set; } = null!;
        public virtual DbSet<RoPermissionType> RoPermissionTypes { get; set; } = null!;
        public virtual DbSet<RoPerson> RoPeople { get; set; } = null!;
        public virtual DbSet<RoPersonDoc> RoPersonDocs { get; set; } = null!;
        public virtual DbSet<RoPfrLayoutScheme> RoPfrLayoutSchemes { get; set; } = null!;
        public virtual DbSet<RoPfrProvider> RoPfrProviders { get; set; } = null!;
        public virtual DbSet<RoPfrSchemeFileMask> RoPfrSchemeFileMasks { get; set; } = null!;
        public virtual DbSet<RoPfrSchemeSubjectMask> RoPfrSchemeSubjectMasks { get; set; } = null!;
        public virtual DbSet<RoPfrSchemeType> RoPfrSchemeTypes { get; set; } = null!;
        public virtual DbSet<RoPlan> RoPlans { get; set; } = null!;
        public virtual DbSet<RoPlanDetail> RoPlanDetails { get; set; } = null!;
        public virtual DbSet<RoPlugin> RoPlugins { get; set; } = null!;
        public virtual DbSet<RoPluginTariff> RoPluginTariffs { get; set; } = null!;
        public virtual DbSet<RoPoint> RoPoints { get; set; } = null!;
        public virtual DbSet<RoPointStep> RoPointSteps { get; set; } = null!;
        public virtual DbSet<RoPointUse> RoPointUses { get; set; } = null!;
        public virtual DbSet<RoPointUseType> RoPointUseTypes { get; set; } = null!;
        public virtual DbSet<RoPointZone> RoPointZones { get; set; } = null!;
        public virtual DbSet<RoPortalAccount> RoPortalAccounts { get; set; } = null!;
        public virtual DbSet<RoPortalType> RoPortalTypes { get; set; } = null!;
        public virtual DbSet<RoPost> RoPosts { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonent> RoPotentialAbonents { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentCall> RoPotentialAbonentCalls { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentCallState> RoPotentialAbonentCallStates { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentComment> RoPotentialAbonentComments { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentCommentType> RoPotentialAbonentCommentTypes { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentContactCatalog> RoPotentialAbonentContactCatalogs { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentEgai> RoPotentialAbonentEgais { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentPerson> RoPotentialAbonentPeople { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentProductType> RoPotentialAbonentProductTypes { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentProvider> RoPotentialAbonentProviders { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentRegNum> RoPotentialAbonentRegNums { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentRejectionReason> RoPotentialAbonentRejectionReasons { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentRt> RoPotentialAbonentRts { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentStep> RoPotentialAbonentSteps { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentStepType> RoPotentialAbonentStepTypes { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentTariff> RoPotentialAbonentTariffs { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentTariffAbonent> RoPotentialAbonentTariffAbonents { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentTariffType> RoPotentialAbonentTariffTypes { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentTradingPlatform> RoPotentialAbonentTradingPlatforms { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentTradingPlatformType> RoPotentialAbonentTradingPlatformTypes { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentUcb> RoPotentialAbonentUcbs { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentUserRegion> RoPotentialAbonentUserRegions { get; set; } = null!;
        public virtual DbSet<RoPotentialAbonentWorkflow> RoPotentialAbonentWorkflows { get; set; } = null!;
        public virtual DbSet<RoPrice> RoPrices { get; set; } = null!;
        public virtual DbSet<RoPriceDiscount> RoPriceDiscounts { get; set; } = null!;
        public virtual DbSet<RoPriceDiscountStep> RoPriceDiscountSteps { get; set; } = null!;
        public virtual DbSet<RoPriceGroup> RoPriceGroups { get; set; } = null!;
        public virtual DbSet<RoPriceScheme> RoPriceSchemes { get; set; } = null!;
        public virtual DbSet<RoPriceSection> RoPriceSections { get; set; } = null!;
        public virtual DbSet<RoPriceTariff> RoPriceTariffs { get; set; } = null!;
        public virtual DbSet<RoPriceTariffStep> RoPriceTariffSteps { get; set; } = null!;
        public virtual DbSet<RoPriceTrend> RoPriceTrends { get; set; } = null!;
        public virtual DbSet<RoProcessingMode> RoProcessingModes { get; set; } = null!;
        public virtual DbSet<RoProcessingProduct> RoProcessingProducts { get; set; } = null!;
        public virtual DbSet<RoProduct> RoProducts { get; set; } = null!;
        public virtual DbSet<RoProductChecking> RoProductCheckings { get; set; } = null!;
        public virtual DbSet<RoProductCheckingStep> RoProductCheckingSteps { get; set; } = null!;
        public virtual DbSet<RoProductContractTariff> RoProductContractTariffs { get; set; } = null!;
        public virtual DbSet<RoProductContractTariffView> RoProductContractTariffViews { get; set; } = null!;
        public virtual DbSet<RoProductDoc> RoProductDocs { get; set; } = null!;
        public virtual DbSet<RoProductNetNode> RoProductNetNodes { get; set; } = null!;
        public virtual DbSet<RoProductNetNodeStep> RoProductNetNodeSteps { get; set; } = null!;
        public virtual DbSet<RoProductNotice> RoProductNotices { get; set; } = null!;
        public virtual DbSet<RoProductPassportChecking> RoProductPassportCheckings { get; set; } = null!;
        public virtual DbSet<RoProductPerson> RoProductPeople { get; set; } = null!;
        public virtual DbSet<RoProductPersonKey> RoProductPersonKeys { get; set; } = null!;
        public virtual DbSet<RoProductPersonRecipientType> RoProductPersonRecipientTypes { get; set; } = null!;
        public virtual DbSet<RoProductPersonStep> RoProductPersonSteps { get; set; } = null!;
        public virtual DbSet<RoProductSkrinInfo> RoProductSkrinInfos { get; set; } = null!;
        public virtual DbSet<RoProductStep> RoProductSteps { get; set; } = null!;
        public virtual DbSet<RoProductTransferLog> RoProductTransferLogs { get; set; } = null!;
        public virtual DbSet<RoProductType> RoProductTypes { get; set; } = null!;
        public virtual DbSet<RoProductView> RoProductViews { get; set; } = null!;
        public virtual DbSet<RoProductViewInConnect> RoProductViewInConnects { get; set; } = null!;
        public virtual DbSet<RoProlongationShortDataSummary> RoProlongationShortDataSummaries { get; set; } = null!;
        public virtual DbSet<RoProlongationShortDatum> RoProlongationShortData { get; set; } = null!;
        public virtual DbSet<RoPromotionType> RoPromotionTypes { get; set; } = null!;
        public virtual DbSet<RoPropDict> RoPropDicts { get; set; } = null!;
        public virtual DbSet<RoPropType> RoPropTypes { get; set; } = null!;
        public virtual DbSet<RoProtectionClass> RoProtectionClasses { get; set; } = null!;
        public virtual DbSet<RoProtocol> RoProtocols { get; set; } = null!;
        public virtual DbSet<RoProvider> RoProviders { get; set; } = null!;
        public virtual DbSet<RoProxyAgent> RoProxyAgents { get; set; } = null!;
        public virtual DbSet<RoPurchaseType> RoPurchaseTypes { get; set; } = null!;
        public virtual DbSet<RoRa> RoRas { get; set; } = null!;
        public virtual DbSet<RoRaStep> RoRaSteps { get; set; } = null!;
        public virtual DbSet<RoRatingView> RoRatingViews { get; set; } = null!;
        public virtual DbSet<RoRecipient> RoRecipients { get; set; } = null!;
        public virtual DbSet<RoRecipientCertificate> RoRecipientCertificates { get; set; } = null!;
        public virtual DbSet<RoRecipientDuplicate> RoRecipientDuplicates { get; set; } = null!;
        public virtual DbSet<RoRecipientUnit> RoRecipientUnits { get; set; } = null!;
        public virtual DbSet<RoRecipientUnitUpdater> RoRecipientUnitUpdaters { get; set; } = null!;
        public virtual DbSet<RoRecipientUpdater> RoRecipientUpdaters { get; set; } = null!;
        public virtual DbSet<RoReflex> RoReflices { get; set; } = null!;
        public virtual DbSet<RoReflexMessenger> RoReflexMessengers { get; set; } = null!;
        public virtual DbSet<RoReflexProduct> RoReflexProducts { get; set; } = null!;
        public virtual DbSet<RoReflexProductType> RoReflexProductTypes { get; set; } = null!;
        public virtual DbSet<RoReflexRule> RoReflexRules { get; set; } = null!;
        public virtual DbSet<RoReflexType> RoReflexTypes { get; set; } = null!;
        public virtual DbSet<RoReflexTypeSystem> RoReflexTypeSystems { get; set; } = null!;
        public virtual DbSet<RoReflexUseType> RoReflexUseTypes { get; set; } = null!;
        public virtual DbSet<RoRefreshToken> RoRefreshTokens { get; set; } = null!;
        public virtual DbSet<RoRegBankRequest> RoRegBankRequests { get; set; } = null!;
        public virtual DbSet<RoRegBankRequestStep> RoRegBankRequestSteps { get; set; } = null!;
        public virtual DbSet<RoRegCertRequest> RoRegCertRequests { get; set; } = null!;
        public virtual DbSet<RoRegCertRequestStep> RoRegCertRequestSteps { get; set; } = null!;
        public virtual DbSet<RoRegFileType> RoRegFileTypes { get; set; } = null!;
        public virtual DbSet<RoRegRequest> RoRegRequests { get; set; } = null!;
        public virtual DbSet<RoRegRequestAccount> RoRegRequestAccounts { get; set; } = null!;
        public virtual DbSet<RoRegRequestChecking> RoRegRequestCheckings { get; set; } = null!;
        public virtual DbSet<RoRegRequestCheckingStep> RoRegRequestCheckingSteps { get; set; } = null!;
        public virtual DbSet<RoRegRequestComment> RoRegRequestComments { get; set; } = null!;
        public virtual DbSet<RoRegRequestConfirmedStep> RoRegRequestConfirmedSteps { get; set; } = null!;
        public virtual DbSet<RoRegRequestContact> RoRegRequestContacts { get; set; } = null!;
        public virtual DbSet<RoRegRequestContactUse> RoRegRequestContactUses { get; set; } = null!;
        public virtual DbSet<RoRegRequestDoc> RoRegRequestDocs { get; set; } = null!;
        public virtual DbSet<RoRegRequestEgrulRequest> RoRegRequestEgrulRequests { get; set; } = null!;
        public virtual DbSet<RoRegRequestFeedback> RoRegRequestFeedbacks { get; set; } = null!;
        public virtual DbSet<RoRegRequestGate> RoRegRequestGates { get; set; } = null!;
        public virtual DbSet<RoRegRequestMember> RoRegRequestMembers { get; set; } = null!;
        public virtual DbSet<RoRegRequestMemberContact> RoRegRequestMemberContacts { get; set; } = null!;
        public virtual DbSet<RoRegRequestMemberContactUse> RoRegRequestMemberContactUses { get; set; } = null!;
        public virtual DbSet<RoRegRequestMemberRecipientType> RoRegRequestMemberRecipientTypes { get; set; } = null!;
        public virtual DbSet<RoRegRequestPassportChecking> RoRegRequestPassportCheckings { get; set; } = null!;
        public virtual DbSet<RoRegRequestPlugin> RoRegRequestPlugins { get; set; } = null!;
        public virtual DbSet<RoRegRequestRecipient> RoRegRequestRecipients { get; set; } = null!;
        public virtual DbSet<RoRegRequestRoute> RoRegRequestRoutes { get; set; } = null!;
        public virtual DbSet<RoRegRequestService> RoRegRequestServices { get; set; } = null!;
        public virtual DbSet<RoRegRequestStep> RoRegRequestSteps { get; set; } = null!;
        public virtual DbSet<RoRegRequestStepProductView> RoRegRequestStepProductViews { get; set; } = null!;
        public virtual DbSet<RoRegRequestSummaryView> RoRegRequestSummaryViews { get; set; } = null!;
        public virtual DbSet<RoRegRequestTariff> RoRegRequestTariffs { get; set; } = null!;
        public virtual DbSet<RoRegRequestTeam> RoRegRequestTeams { get; set; } = null!;
        public virtual DbSet<RoRegRequestTransferLog> RoRegRequestTransferLogs { get; set; } = null!;
        public virtual DbSet<RoRegRequestType> RoRegRequestTypes { get; set; } = null!;
        public virtual DbSet<RoRegion> RoRegions { get; set; } = null!;
        public virtual DbSet<RoRegionStatistic> RoRegionStatistics { get; set; } = null!;
        public virtual DbSet<RoRegionTimeZone> RoRegionTimeZones { get; set; } = null!;
        public virtual DbSet<RoRegionalAgent> RoRegionalAgents { get; set; } = null!;
        public virtual DbSet<RoRejectedRegRequest> RoRejectedRegRequests { get; set; } = null!;
        public virtual DbSet<RoReport> RoReports { get; set; } = null!;
        public virtual DbSet<RoReportQuery> RoReportQueries { get; set; } = null!;
        public virtual DbSet<RoRequest1c> RoRequest1cs { get; set; } = null!;
        public virtual DbSet<RoRequestRegionView> RoRequestRegionViews { get; set; } = null!;
        public virtual DbSet<RoRequestWithoutPartnerView> RoRequestWithoutPartnerViews { get; set; } = null!;
        public virtual DbSet<RoRevocationReason> RoRevocationReasons { get; set; } = null!;
        public virtual DbSet<RoRewardOption> RoRewardOptions { get; set; } = null!;
        public virtual DbSet<RoRole> RoRoles { get; set; } = null!;
        public virtual DbSet<RoRoleGroup> RoRoleGroups { get; set; } = null!;
        public virtual DbSet<RoRoleModule> RoRoleModules { get; set; } = null!;
        public virtual DbSet<RoRoutePfr> RoRoutePfrs { get; set; } = null!;
        public virtual DbSet<RoSalecenterRegionView> RoSalecenterRegionViews { get; set; } = null!;
        public virtual DbSet<RoSberbankDocument> RoSberbankDocuments { get; set; } = null!;
        public virtual DbSet<RoSendedBill> RoSendedBills { get; set; } = null!;
        public virtual DbSet<RoServer> RoServers { get; set; } = null!;
        public virtual DbSet<RoService> RoServices { get; set; } = null!;
        public virtual DbSet<RoServiceBalanceDetail> RoServiceBalanceDetails { get; set; } = null!;
        public virtual DbSet<RoServiceMode> RoServiceModes { get; set; } = null!;
        public virtual DbSet<RoServiceType> RoServiceTypes { get; set; } = null!;
        public virtual DbSet<RoSetting> RoSettings { get; set; } = null!;
        public virtual DbSet<RoSignQualification> RoSignQualifications { get; set; } = null!;
        public virtual DbSet<RoSkziLicense> RoSkziLicenses { get; set; } = null!;
        public virtual DbSet<RoSmevRequestStage> RoSmevRequestStages { get; set; } = null!;
        public virtual DbSet<RoSmevStageType> RoSmevStageTypes { get; set; } = null!;
        public virtual DbSet<RoSo> RoSos { get; set; } = null!;
        public virtual DbSet<RoSocrbase> RoSocrbases { get; set; } = null!;
        public virtual DbSet<RoSosCertificate> RoSosCertificates { get; set; } = null!;
        public virtual DbSet<RoSoun> RoSouns { get; set; } = null!;
        public virtual DbSet<RoStatisticProvider> RoStatisticProviders { get; set; } = null!;
        public virtual DbSet<RoStep> RoSteps { get; set; } = null!;
        public virtual DbSet<RoStepReason> RoStepReasons { get; set; } = null!;
        public virtual DbSet<RoStorageType> RoStorageTypes { get; set; } = null!;
        public virtual DbSet<RoStreet> RoStreets { get; set; } = null!;
        public virtual DbSet<RoSubjectType> RoSubjectTypes { get; set; } = null!;
        public virtual DbSet<RoSubscriptionRegionCount1cFull> RoSubscriptionRegionCount1cFulls { get; set; } = null!;
        public virtual DbSet<RoSubscriptionRegionCount1cWeek> RoSubscriptionRegionCount1cWeeks { get; set; } = null!;
        public virtual DbSet<RoSubscriptionRegionCountIt> RoSubscriptionRegionCountIts { get; set; } = null!;
        public virtual DbSet<RoTag> RoTags { get; set; } = null!;
        public virtual DbSet<RoTagGroup> RoTagGroups { get; set; } = null!;
        public virtual DbSet<RoTariff> RoTariffs { get; set; } = null!;
        public virtual DbSet<RoTariffAttribute> RoTariffAttributes { get; set; } = null!;
        public virtual DbSet<RoTariffAttributeCa> RoTariffAttributeCas { get; set; } = null!;
        public virtual DbSet<RoTariffAttributeLimit> RoTariffAttributeLimits { get; set; } = null!;
        public virtual DbSet<RoTariffCalcCompany> RoTariffCalcCompanies { get; set; } = null!;
        public virtual DbSet<RoTariffCalcComplexPrice> RoTariffCalcComplexPrices { get; set; } = null!;
        public virtual DbSet<RoTariffCalcFeaturesList> RoTariffCalcFeaturesLists { get; set; } = null!;
        public virtual DbSet<RoTariffCalcOrgNalType> RoTariffCalcOrgNalTypes { get; set; } = null!;
        public virtual DbSet<RoTariffCalcPrice> RoTariffCalcPrices { get; set; } = null!;
        public virtual DbSet<RoTariffCalcPriceType> RoTariffCalcPriceTypes { get; set; } = null!;
        public virtual DbSet<RoTariffCalcTariff> RoTariffCalcTariffs { get; set; } = null!;
        public virtual DbSet<RoTariffDiscount> RoTariffDiscounts { get; set; } = null!;
        public virtual DbSet<RoTariffDiscountRule> RoTariffDiscountRules { get; set; } = null!;
        public virtual DbSet<RoTariffGroup> RoTariffGroups { get; set; } = null!;
        public virtual DbSet<RoTariffLimit> RoTariffLimits { get; set; } = null!;
        public virtual DbSet<RoTariffType> RoTariffTypes { get; set; } = null!;
        public virtual DbSet<RoTariffZone> RoTariffZones { get; set; } = null!;
        public virtual DbSet<RoTaxSystem> RoTaxSystems { get; set; } = null!;
        public virtual DbSet<RoToken> RoTokens { get; set; } = null!;
        public virtual DbSet<RoTokenType> RoTokenTypes { get; set; } = null!;
        public virtual DbSet<RoTradingPlatformRegistrationRequest> RoTradingPlatformRegistrationRequests { get; set; } = null!;
        public virtual DbSet<RoTradingPlatformTariffAttribute> RoTradingPlatformTariffAttributes { get; set; } = null!;
        public virtual DbSet<RoTransaction> RoTransactions { get; set; } = null!;
        public virtual DbSet<RoTransactionType> RoTransactionTypes { get; set; } = null!;
        public virtual DbSet<RoTransferTariffLog> RoTransferTariffLogs { get; set; } = null!;
        public virtual DbSet<RoTransition> RoTransitions { get; set; } = null!;
        public virtual DbSet<RoUnit> RoUnits { get; set; } = null!;
        public virtual DbSet<RoUnitType> RoUnitTypes { get; set; } = null!;
        public virtual DbSet<RoUpdateSystem> RoUpdateSystems { get; set; } = null!;
        public virtual DbSet<RoUseType> RoUseTypes { get; set; } = null!;
        public virtual DbSet<RoUser> RoUsers { get; set; } = null!;
        public virtual DbSet<RoUserAgentTrusted> RoUserAgentTrusteds { get; set; } = null!;
        public virtual DbSet<RoUserEmailRegistered> RoUserEmailRegistereds { get; set; } = null!;
        public virtual DbSet<RoUserFintender> RoUserFintenders { get; set; } = null!;
        public virtual DbSet<RoUserPassword> RoUserPasswords { get; set; } = null!;
        public virtual DbSet<RoUserPromotionConfirmed> RoUserPromotionConfirmeds { get; set; } = null!;
        public virtual DbSet<RoUserRole> RoUserRoles { get; set; } = null!;
        public virtual DbSet<RoUserRoleAccessInformation> RoUserRoleAccessInformations { get; set; } = null!;
        public virtual DbSet<RoUserSetting> RoUserSettings { get; set; } = null!;
        public virtual DbSet<RoUserTrust> RoUserTrusts { get; set; } = null!;
        public virtual DbSet<RoValueType> RoValueTypes { get; set; } = null!;
        public virtual DbSet<RoVersion> RoVersions { get; set; } = null!;
        public virtual DbSet<RoVipnetNode> RoVipnetNodes { get; set; } = null!;
        public virtual DbSet<RoVipnetUser> RoVipnetUsers { get; set; } = null!;
        public virtual DbSet<RoVisibilityType> RoVisibilityTypes { get; set; } = null!;
        public virtual DbSet<RoWorkCalendar> RoWorkCalendars { get; set; } = null!;
        public virtual DbSet<RoWorkflow> RoWorkflows { get; set; } = null!;
        public virtual DbSet<RoWorkflowDocType> RoWorkflowDocTypes { get; set; } = null!;
        public virtual DbSet<RoWorkflowFeedback> RoWorkflowFeedbacks { get; set; } = null!;
        public virtual DbSet<RoWorkflowService> RoWorkflowServices { get; set; } = null!;
        public virtual DbSet<RoWorkflowServiceStep> RoWorkflowServiceSteps { get; set; } = null!;
        public virtual DbSet<RoWorkflowType> RoWorkflowTypes { get; set; } = null!;
        public virtual DbSet<ServerAbonentView> ServerAbonentViews { get; set; } = null!;
        public virtual DbSet<ServerKppView> ServerKppViews { get; set; } = null!;
        public virtual DbSet<ServerMemberView> ServerMemberViews { get; set; } = null!;
        public virtual DbSet<ServerPartnerView> ServerPartnerViews { get; set; } = null!;
        public virtual DbSet<ServerRecipientView> ServerRecipientViews { get; set; } = null!;
        public virtual DbSet<StatProductLicenseView> StatProductLicenseViews { get; set; } = null!;
        public virtual DbSet<TaxRepre> TaxRepres { get; set; } = null!;
        public virtual DbSet<TempAbonent> TempAbonents { get; set; } = null!;
        public virtual DbSet<TestTrgm> TestTrgms { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=192.168.1.56;Database=regofficex;User Id=registrator;Password=ujhdjgajr;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("dblink");

            modelBuilder.Entity<Abonent1cFastView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("abonent1c_fast_view");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.EndTime).HasColumnName("end_time");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .HasColumnName("host");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Login)
                    .HasMaxLength(50)
                    .HasColumnName("login");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password");

                entity.Property(e => e.Pfr)
                    .HasMaxLength(14)
                    .HasColumnName("pfr");

                entity.Property(e => e.Protocol).HasColumnName("protocol");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.SmsNotice).HasColumnName("sms_notice");
            });

            modelBuilder.Entity<Abonent1cView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("abonent1c_view");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.Certificate).HasColumnName("certificate");

                entity.Property(e => e.EndTime).HasColumnName("end_time");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .HasColumnName("host");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Login)
                    .HasMaxLength(50)
                    .HasColumnName("login");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password");

                entity.Property(e => e.Pfr)
                    .HasMaxLength(14)
                    .HasColumnName("pfr");

                entity.Property(e => e.Protocol).HasColumnName("protocol");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.SmsNotice).HasColumnName("sms_notice");
            });

            modelBuilder.Entity<AbonentConnect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("abonent_connect");

                entity.HasComment("Возвращает всех подключеных абонентов");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ConnectionDate).HasColumnName("connection_date");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<AbonentRecipientRegDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("abonent_recipient_reg_date");

                entity.HasComment("Представление с датами регистрации получателей у абонентов");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentTypeId).HasColumnName("abonent_type_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");

                entity.Property(e => e.RegDate).HasColumnName("reg_date");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<AbonentRecipientRegDateStatistic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("abonent_recipient_reg_date_statistic");

                entity.HasComment("Представление со статистикой подключений абонентов по получателям");

                entity.Property(e => e.CountAbonent).HasColumnName("count_abonent");

                entity.Property(e => e.Individual).HasColumnName("individual");

                entity.Property(e => e.Juridical).HasColumnName("juridical");

                entity.Property(e => e.M).HasColumnName("m");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.Y).HasColumnName("y");
            });

            modelBuilder.Entity<AbonentRecipientStatisticForFn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("abonent_recipient_statistic_for_fns");

                entity.HasComment("Представление со статистикой подключений абонентов по получателям для ФНС");

                entity.Property(e => e.MonthAbonent).HasColumnName("month_abonent");

                entity.Property(e => e.MonthIndividual).HasColumnName("month_individual");

                entity.Property(e => e.MonthJuridical).HasColumnName("month_juridical");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.TotalAbonent).HasColumnName("total_abonent");

                entity.Property(e => e.TotalIndividual).HasColumnName("total_individual");

                entity.Property(e => e.TotalJuridical).HasColumnName("total_juridical");
            });

            modelBuilder.Entity<AbonentTemp1c>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("abonent_temp_1c");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Name)
                    .HasColumnType("character varying")
                    .HasColumnName("name");
            });

            modelBuilder.Entity<AbonnentClosedConnectCert>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("abonnent_closed_connect_cert");

                entity.HasComment("Возвращает всех отключеных абонентов ввиду истичения срока действия серта");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.CertificateId).HasColumnName("certificate_id");

                entity.Property(e => e.ConnectionDate)
                    .HasPrecision(0)
                    .HasColumnName("connection_date");

                entity.Property(e => e.EndTime).HasColumnName("end_time");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<AbonnentClosedConnectLic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("abonnent_closed_connect_lic");

                entity.HasComment("Возвращает всех отключеных абонентов ввиду истичения срока действия лица");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.DateConnect).HasColumnName("date_connect");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<Actual1cProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("actual_1c_products");

                entity.Property(e => e.CertEndTime).HasColumnName("cert_end_time");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version");

                entity.Property(e => e.TariffEndTime).HasColumnName("tariff_end_time");
            });

            modelBuilder.Entity<Actual1cRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("actual_1c_requests");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.LicenseEndTime).HasColumnName("license_end_time");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");
            });

            modelBuilder.Entity<CertificateForCaReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("certificate_for_ca_report");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.CaId).HasColumnName("ca_id");

                entity.Property(e => e.CaName)
                    .HasMaxLength(200)
                    .HasColumnName("ca_name");

                entity.Property(e => e.CertTemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("cert_template_name");

                entity.Property(e => e.CertificateId).HasColumnName("certificate_id");

                entity.Property(e => e.CertificateTypeId).HasColumnName("certificate_type_id");

                entity.Property(e => e.CertificateTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("certificate_type_name");

                entity.Property(e => e.CommonName)
                    .HasMaxLength(300)
                    .HasColumnName("common_name");

                entity.Property(e => e.CompanyGroup)
                    .HasMaxLength(500)
                    .HasColumnName("company_group");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");
            });

            modelBuilder.Entity<DelegateView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("delegate_view");

                entity.Property(e => e.AbonentName)
                    .HasMaxLength(500)
                    .HasColumnName("abonent_name");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.DelegateName)
                    .HasMaxLength(500)
                    .HasColumnName("delegate_name");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Office)
                    .HasMaxLength(200)
                    .HasColumnName("office");

                entity.Property(e => e.Registrator)
                    .HasMaxLength(200)
                    .HasColumnName("registrator");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength();
            });

            modelBuilder.Entity<FcrarCertView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("fcrar_cert_view");

                entity.HasComment("Возвращает выборку все ФСРаР по продуктам");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<InterviewResultView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("interview_result_view");

                entity.Property(e => e.AnswerValue)
                    .HasColumnType("character varying")
                    .HasColumnName("answer_value");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.InterviewId).HasColumnName("interview_id");
            });

            modelBuilder.Entity<LastLicenseView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("last_license_view");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.RegDate).HasColumnName("reg_date");
            });

            modelBuilder.Entity<LicenseCreationTimeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("license_creation_time_view");

                entity.HasComment("Представление с датами создания лицензий");

                entity.Property(e => e.CreationTime).HasColumnName("creation_time");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");
            });

            modelBuilder.Entity<MinfinCertView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("minfin_cert_view");

                entity.HasComment("Возвращает выборку все МинФин по продуктам");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");
            });

            modelBuilder.Entity<MonitoringAbonentView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("monitoring_abonent_view");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LastUpdate).HasColumnName("last_update");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .HasColumnName("name");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note");

                entity.Property(e => e.Partner)
                    .HasMaxLength(200)
                    .HasColumnName("partner");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.RequestCreationTime).HasColumnName("request_creation_time");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength();

                entity.Property(e => e.StepId).HasColumnName("step_id");
            });

            modelBuilder.Entity<MonitoringAppView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("monitoring_app_view");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasColumnName("application_name");

                entity.Property(e => e.Description)
                    .HasMaxLength(150)
                    .HasColumnName("description");

                entity.Property(e => e.IsWork).HasColumnName("is_work");

                entity.Property(e => e.LastUpdateTime).HasColumnName("last_update_time");
            });

            modelBuilder.Entity<MonitoringMemberView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("monitoring_member_view");

                entity.Property(e => e.Ca)
                    .HasMaxLength(100)
                    .HasColumnName("ca");

                entity.Property(e => e.CertEndTime)
                    .HasPrecision(0)
                    .HasColumnName("cert_end_time");

                entity.Property(e => e.CertId).HasColumnName("cert_id");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .HasColumnName("first_name");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .HasColumnName("last_name");

                entity.Property(e => e.LastUpdate).HasColumnName("last_update");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message");

                entity.Property(e => e.Pack)
                    .HasMaxLength(64)
                    .HasColumnName("pack");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.StepName)
                    .HasMaxLength(40)
                    .HasColumnName("step_name");
            });

            modelBuilder.Entity<MonitoringRecipientView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("monitoring_recipient_view");

                entity.HasComment("Мониторинг направлений");

                entity.Property(e => e.Code)
                    .HasMaxLength(12)
                    .HasColumnName("code");

                entity.Property(e => e.LastUpdate).HasColumnName("last_update");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message");

                entity.Property(e => e.Pack)
                    .HasMaxLength(36)
                    .HasColumnName("pack");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.ProtocolName)
                    .HasMaxLength(100)
                    .HasColumnName("protocol_name");

                entity.Property(e => e.Server)
                    .HasMaxLength(100)
                    .HasColumnName("server");

                entity.Property(e => e.Sos)
                    .HasMaxLength(3)
                    .HasColumnName("sos");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.StepName)
                    .HasMaxLength(40)
                    .HasColumnName("step_name");
            });

            modelBuilder.Entity<PeriodicReportToRegionalUfn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("periodic_report_to_regional_ufns");

                entity.HasComment("Месяцный отчет в УФНС");

                entity.Property(e => e.ConCountMonth).HasColumnName("con_count_month");

                entity.Property(e => e.CountAll).HasColumnName("count_all");

                entity.Property(e => e.CountIp).HasColumnName("count_ip");

                entity.Property(e => e.IpConCountMonth).HasColumnName("ip_con_count_month");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<PrimaryLicenseView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("primary_license_view");

                entity.HasComment("Представление по первичным лицензиям");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.RegDate).HasColumnName("reg_date");
            });

            modelBuilder.Entity<ProductDataTemp>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("product_data_temp_pkey");

                entity.ToTable("product_data_temp");

                entity.Property(e => e.ProductId)
                    .ValueGeneratedNever()
                    .HasColumnName("product_id");

                entity.Property(e => e.TariffEndDate).HasColumnName("tariff_end_date");

                entity.Property(e => e.TariffName)
                    .HasMaxLength(250)
                    .HasColumnName("tariff_name");
            });

            modelBuilder.Entity<ProductLicenseView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("product_license_view");

                entity.Property(e => e.AccrRepresent).HasColumnName("accr_represent");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.CreationTime).HasColumnName("creation_time");

                entity.Property(e => e.EndDate)
                    .HasPrecision(0)
                    .HasColumnName("end_date");

                entity.Property(e => e.InitialDate)
                    .HasPrecision(0)
                    .HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LicenseType).HasColumnName("license_type");

                entity.Property(e => e.LicenseTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("license_type_name");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductStep)
                    .HasMaxLength(40)
                    .HasColumnName("product_step");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.Registrator).HasColumnName("registrator");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<ProductRegDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("product_reg_date");

                entity.HasComment("Представление с датами регистрации продуктов");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.RegDate).HasColumnName("reg_date");
            });

            modelBuilder.Entity<RecipientForAbonent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("recipient_for_abonent");

                entity.HasComment("Преставление получатели для абонентов");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.CertEndTime)
                    .HasPrecision(0)
                    .HasColumnName("cert_end_time");

                entity.Property(e => e.ConnectionTime)
                    .HasPrecision(0)
                    .HasColumnName("connection_time");

                entity.Property(e => e.ContactPeople)
                    .HasColumnType("character varying")
                    .HasColumnName("contact_people");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LicenseEndTime)
                    .HasPrecision(0)
                    .HasColumnName("license_end_time");

                entity.Property(e => e.Manager)
                    .HasMaxLength(100)
                    .HasColumnName("manager");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");
            });

            modelBuilder.Entity<ReportFromTopConnect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("report_from_top_connect");

                entity.HasComment("Возвращает выборку выданых сертификатов за отчетный период");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.N).HasColumnName("n");

                entity.Property(e => e.Partnername)
                    .HasColumnType("character varying")
                    .HasColumnName("partnername");
            });

            modelBuilder.Entity<ReportFullTimeConnectCert>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("report_full_time_connect_cert");

                entity.HasComment("Возвращает все штатные смены серта");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.CertificateId).HasColumnName("certificate_id");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time");

                entity.Property(e => e.IsFullTime).HasColumnName("is_full_time");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<ReportFullTimeConnectLic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("report_full_time_connect_lic");

                entity.HasComment("Возвращает все штатные смены лица");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time");

                entity.Property(e => e.IsFullTime).HasColumnName("is_full_time");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.OldLic).HasColumnName("old_lic");

                entity.Property(e => e.Product).HasColumnName("product");
            });

            modelBuilder.Entity<RoAbonent>(entity =>
            {
                entity.HasKey(e => e.AbonentId)
                    .HasName("pk_abonent");

                entity.ToTable("ro_abonent");

                entity.HasComment("Таблица абонентов");

                entity.HasIndex(e => e.AbonentTypeId, "abonent_abonent_type_id_idx");

                entity.HasIndex(e => e.CompanyGroupId, "abonent_company_group_id_idx");

                entity.HasIndex(e => e.LocationAddressId, "abonent_location_address_id_idx");

                entity.HasIndex(e => e.OfficeId, "abonent_office_id_idx");

                entity.HasIndex(e => e.OkopfId, "abonent_okopf_id_idx");

                entity.HasIndex(e => e.PostalAddressId, "abonent_postal_address_id_idx");

                entity.HasIndex(e => e.ShortName, "abonent_short_name_idx");

                entity.HasIndex(e => e.UserId, "abonent_user_id_idx");

                entity.HasIndex(e => e.RegionId, "idx_region_id");

                entity.HasIndex(e => e.RnsPfr, "idx_rns_pfr");

                entity.HasIndex(e => e.Inn, "inn");

                entity.HasIndex(e => e.AbonentGuid, "ro_abonent_abonent_guid_key")
                    .IsUnique();

                entity.HasIndex(e => e.AbonentLogin, "sk_abonent_login")
                    .IsUnique();

                entity.HasIndex(e => new { e.Inn, e.Kpp }, "sk_inn_kpp")
                    .IsUnique();

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Код");

                entity.Property(e => e.AbonentGuid)
                    .HasColumnName("abonent_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.AbonentLogin)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_login")
                    .HasComment("Логин");

                entity.Property(e => e.AbonentPassword)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_password")
                    .HasComment("Пароль");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.BankName)
                    .HasColumnType("character varying")
                    .HasColumnName("bank_name")
                    .HasComment("Наименование банка");

                entity.Property(e => e.Bic)
                    .HasMaxLength(9)
                    .HasColumnName("bic")
                    .HasComment("БИК");

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Головной абонент");

                entity.Property(e => e.ContactPeople)
                    .HasColumnType("character varying")
                    .HasColumnName("contact_people")
                    .HasComment("Контакты");

                entity.Property(e => e.CorrespondentAccount)
                    .HasMaxLength(20)
                    .HasColumnName("correspondent_account")
                    .HasComment("Корреспондентский счёт");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл. почта");

                entity.Property(e => e.EmplParentNo)
                    .HasMaxLength(5)
                    .HasColumnName("empl_parent_no")
                    .HasComment("Код подчиненности ФСС");

                entity.Property(e => e.Fax)
                    .HasMaxLength(24)
                    .HasColumnName("fax")
                    .HasComment("Факс");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss")
                    .HasComment("Код подразделения ФСС");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.LocationAddressId)
                    .HasColumnName("location_address_id")
                    .HasComment("Фактический адрес");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный телефон");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.OkopfId)
                    .HasColumnName("okopf_id")
                    .HasComment("ОКОПФ");

                entity.Property(e => e.PaymentAccount)
                    .HasMaxLength(20)
                    .HasColumnName("payment_account")
                    .HasComment("Расчетный счет");

                entity.Property(e => e.PersonalAccount)
                    .HasMaxLength(20)
                    .HasColumnName("personal_account")
                    .HasComment("Лицевой счет");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PostalAddressId)
                    .HasColumnName("postal_address_id")
                    .HasComment("Юридический адрес");

                entity.Property(e => e.RawContacts)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_contacts")
                    .HasComment("Необработанные данные контактов");

                entity.Property(e => e.RawLocationAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_location_address")
                    .HasComment("Необработанные данные фактического адреса");

                entity.Property(e => e.RawPostalAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_postal_address")
                    .HasComment("Необработанные данные почтового адреса");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Ид. региона");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss")
                    .HasComment("Рег. номер ФСС");

                entity.Property(e => e.RnsFssSub)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss_sub")
                    .HasComment("Рег. номер ФСС обособленного подразделения");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr")
                    .HasComment("Рег. номер ПФР");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.StRnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("st_rns_pfr")
                    .HasComment("Рег. номер ПФР работодателя");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RoAbonents)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.InverseCompanyGroup)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_company_group");

                entity.HasOne(d => d.LocationAddress)
                    .WithMany(p => p.RoAbonentLocationAddresses)
                    .HasForeignKey(d => d.LocationAddressId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_location_address");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoAbonents)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Okopf)
                    .WithMany(p => p.RoAbonents)
                    .HasForeignKey(d => d.OkopfId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_okopf");

                entity.HasOne(d => d.PostalAddress)
                    .WithMany(p => p.RoAbonentPostalAddresses)
                    .HasForeignKey(d => d.PostalAddressId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_postal_address");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoAbonents)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoAbonents)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoAbonent1cPortalContactView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_1c_portal_contact_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ContactsJson).HasColumnName("contacts_json");
            });

            modelBuilder.Entity<RoAbonentCount>(entity =>
            {
                entity.HasKey(e => e.CountRecordId)
                    .HasName("pk_count_record_id");

                entity.ToTable("ro_abonent_count");

                entity.HasComment("Таблица подсчета абонентов");

                entity.HasIndex(e => e.OfficeId, "abonent_count_office_id_idx");

                entity.HasIndex(e => e.PeriodEnd, "abonent_count_period_end_id_idx");

                entity.HasIndex(e => e.PeriodStart, "abonent_count_period_start_idx");

                entity.HasIndex(e => e.ProductTypeId, "abonent_count_product_type_id_idx");

                entity.Property(e => e.CountRecordId)
                    .HasColumnName("count_record_id")
                    .HasComment("Идентификатор записи");

                entity.Property(e => e.ActiveAtEnd)
                    .HasColumnName("active_at_end")
                    .HasComment("Число активных в конце периода");

                entity.Property(e => e.ActiveAtStart)
                    .HasColumnName("active_at_start")
                    .HasComment("Число активных в начале периода");

                entity.Property(e => e.Connected)
                    .HasColumnName("connected")
                    .HasComment("Число новых подключившихся в период");

                entity.Property(e => e.Disconnected)
                    .HasColumnName("disconnected")
                    .HasComment("Число отключившихся в период");

                entity.Property(e => e.Expired)
                    .HasColumnName("expired")
                    .HasComment("Число абонентов с истекшими тарифами");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PeriodEnd)
                    .HasPrecision(0)
                    .HasColumnName("period_end");

                entity.Property(e => e.PeriodStart)
                    .HasPrecision(0)
                    .HasColumnName("period_start");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoAbonentCounts)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office_id");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoAbonentCounts)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<RoAbonentDataView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_data_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentName)
                    .HasMaxLength(500)
                    .HasColumnName("abonent_name");

                entity.Property(e => e.ClStepType).HasColumnName("cl_step_type");

                entity.Property(e => e.CompanyGroupCount).HasColumnName("company_group_count");

                entity.Property(e => e.CompanyGroupName).HasColumnName("company_group_name");

                entity.Property(e => e.CompanyGroupNameList).HasColumnName("company_group_name_list");

                entity.Property(e => e.CrStepType).HasColumnName("cr_step_type");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.IrucStepType).HasColumnName("iruc_step_type");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.StepName)
                    .HasMaxLength(40)
                    .HasColumnName("step_name");
            });

            modelBuilder.Entity<RoAbonentDataViewNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_data_view_new");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentName)
                    .HasMaxLength(500)
                    .HasColumnName("abonent_name");

                entity.Property(e => e.CompanyGroupCount).HasColumnName("company_group_count");

                entity.Property(e => e.CompanyGroupName).HasColumnName("company_group_name");

                entity.Property(e => e.CompanyGroupNameList).HasColumnName("company_group_name_list");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn");

                entity.Property(e => e.ProductTypes).HasColumnName("product_types");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");
            });

            modelBuilder.Entity<RoAbonentImportTask>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("pk_task");

                entity.ToTable("ro_abonent_import_task");

                entity.HasComment("Таблица задач по импорту абонентов");

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasDefaultValueSql("3")
                    .HasComment("Тип импортируемых абонентов");

                entity.Property(e => e.InputFileData)
                    .HasColumnName("input_file_data")
                    .HasComment("Данные входного файла");

                entity.Property(e => e.OutputFileData)
                    .HasColumnName("output_file_data")
                    .HasComment("Данные выходного файла");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.TaskFileName)
                    .HasMaxLength(100)
                    .HasColumnName("task_file_name")
                    .HasComment("Наименование файла");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, осуществивший импорт");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RoAbonentImportTasks)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoAbonentImportTasks)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoAbonentImportTasks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoAbonentListView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_list_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.CompanyGroup)
                    .HasMaxLength(500)
                    .HasColumnName("company_group");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.IsIts).HasColumnName("is_its");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.RegistrationDate).HasColumnName("registration_date");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<RoAbonentPerson>(entity =>
            {
                entity.HasKey(e => e.AbonentPersonId)
                    .HasName("pk_abonent_person");

                entity.ToTable("ro_abonent_person");

                entity.HasComment("Таблица сотрудников");

                entity.HasIndex(e => e.AbonentId, "abonent_person_abonent_id_idx");

                entity.HasIndex(e => e.OrgUnitId, "abonent_person_org_unit_id_idx");

                entity.HasIndex(e => e.PersonId, "abonent_person_person_id_idx");

                entity.HasIndex(e => e.PostId, "abonent_person_post_id_idx");

                entity.HasIndex(e => new { e.AbonentId, e.PersonId, e.PostId, e.OrgUnitId }, "sk_abonent_person")
                    .IsUnique();

                entity.Property(e => e.AbonentPersonId)
                    .HasColumnName("abonent_person_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Document)
                    .HasMaxLength(100)
                    .HasColumnName("document")
                    .HasComment("Документ");

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasComment("Дата документа");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(10)
                    .HasColumnName("document_number")
                    .HasComment("Номер документа");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный телефон");

                entity.Property(e => e.OrgUnitId)
                    .HasColumnName("org_unit_id")
                    .HasComment("Подразделение");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Личность");

                entity.Property(e => e.PostId)
                    .HasColumnName("post_id")
                    .HasComment("Должность");

                entity.Property(e => e.PostName)
                    .HasColumnType("character varying")
                    .HasColumnName("post_name");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoAbonentPeople)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.OrgUnit)
                    .WithMany(p => p.RoAbonentPeople)
                    .HasForeignKey(d => d.OrgUnitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_org_unit");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.RoAbonentPeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("fk_person");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.RoAbonentPeople)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_post");
            });

            modelBuilder.Entity<RoAbonentRecipientForRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_recipient_for_region");

                entity.HasComment("Возвращает всех абонов согласно направлений и связывает их по регионам");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ConnectionDate)
                    .HasPrecision(0)
                    .HasColumnName("connection_date");

                entity.Property(e => e.IsIndividual).HasColumnName("is_individual");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<RoAbonentRegionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_region_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentLogin)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_login");

                entity.Property(e => e.AbonentPassword)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_password");

                entity.Property(e => e.AbonentTypeId).HasColumnName("abonent_type_id");

                entity.Property(e => e.CompanyGroupId).HasColumnName("company_group_id");

                entity.Property(e => e.ContactPeople)
                    .HasColumnType("character varying")
                    .HasColumnName("contact_people");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.Fax)
                    .HasMaxLength(24)
                    .HasColumnName("fax");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LocationAddressId).HasColumnName("location_address_id");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn");

                entity.Property(e => e.OkopfId).HasColumnName("okopf_id");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.PostalAddressId).HasColumnName("postal_address_id");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.StRnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("st_rns_pfr");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<RoAbonentStepView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_step_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.StepId).HasColumnName("step_id");
            });

            modelBuilder.Entity<RoAbonentTariff>(entity =>
            {
                entity.HasKey(e => e.ContractTariffGuid)
                    .HasName("pk_abonent_tariff");

                entity.ToTable("ro_abonent_tariff");

                entity.Property(e => e.ContractTariffGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("contract_tariff_guid")
                    .HasComment("Гуид тарифа по договору");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .HasColumnName("agent_code")
                    .HasComment("Внешний код партнёра");

                entity.Property(e => e.AgentInn)
                    .HasMaxLength(12)
                    .HasColumnName("agent_inn")
                    .HasComment("ИНН агента");

                entity.Property(e => e.AgentKpp)
                    .HasMaxLength(9)
                    .HasColumnName("agent_kpp")
                    .HasComment("КПП агента");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name")
                    .HasComment("Наименование агента");

                entity.Property(e => e.Contacts)
                    .HasColumnType("character varying")
                    .HasColumnName("contacts")
                    .HasComment("Контакты абонента");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.OptionId)
                    .HasMaxLength(100)
                    .HasColumnName("option_id")
                    .HasComment("Ид. опции");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version")
                    .HasComment("Версия программы (конфигурации)");

                entity.Property(e => e.RegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("registered_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnName("registration_date")
                    .HasComment("Дата регистрации");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number")
                    .HasComment("Регистрационный номер");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(255)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.SyncDate)
                    .HasColumnName("sync_date")
                    .HasComment("Дата синхронизации с порталом 1С");

                entity.Property(e => e.TariffGuid)
                    .HasColumnName("tariff_guid")
                    .HasComment("Гуид тарифа");

                entity.Property(e => e.Uin)
                    .HasMaxLength(100)
                    .HasColumnName("uin")
                    .HasComment("Идентификационный номер пользователя 1С");

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");
            });

            modelBuilder.Entity<RoAbonentTariffView1c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_tariff_view_1c");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .HasColumnName("agent_code");

                entity.Property(e => e.AgentInn)
                    .HasMaxLength(12)
                    .HasColumnName("agent_inn");

                entity.Property(e => e.AgentKpp)
                    .HasMaxLength(9)
                    .HasColumnName("agent_kpp");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.ContactsJson).HasColumnName("contacts_json");

                entity.Property(e => e.ContractTariffGuid).HasColumnName("contract_tariff_guid");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.OptionId)
                    .HasMaxLength(100)
                    .HasColumnName("option_id");

                entity.Property(e => e.RegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("registered_name");

                entity.Property(e => e.RegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("registration_date");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.TariffGuid).HasColumnName("tariff_guid");
            });

            modelBuilder.Entity<RoAbonentType>(entity =>
            {
                entity.HasKey(e => e.AbonentTypeId)
                    .HasName("pk_abonent_type");

                entity.ToTable("ro_abonent_type");

                entity.HasComment("Таблица типов абонентов");

                entity.HasIndex(e => e.AbonentTypeName, "sk_abonent_type_name")
                    .IsUnique();

                entity.Property(e => e.AbonentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("abonent_type_id")
                    .HasComment("Код");

                entity.Property(e => e.AbonentTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("abonent_type_name")
                    .HasComment("Наименование");

                entity.Property(e => e.IrucTitle)
                    .HasMaxLength(50)
                    .HasColumnName("iruc_title")
                    .HasComment("Тип ИРУЦ");
            });

            modelBuilder.Entity<RoAccessLevel>(entity =>
            {
                entity.HasKey(e => e.AccessLevelId)
                    .HasName("pk_access_level");

                entity.ToTable("ro_access_level");

                entity.HasComment("Таблица уровней доступа");

                entity.HasIndex(e => e.LevelPriority, "ro_access_level_level_priority_key")
                    .IsUnique();

                entity.HasIndex(e => e.AccessLevelName, "sk_access_level_name")
                    .IsUnique();

                entity.Property(e => e.AccessLevelId)
                    .ValueGeneratedNever()
                    .HasColumnName("access_level_id")
                    .HasComment("Код");

                entity.Property(e => e.AccessLevelName)
                    .HasMaxLength(100)
                    .HasColumnName("access_level_name")
                    .HasComment("Наименование");

                entity.Property(e => e.LevelPriority)
                    .HasColumnName("level_priority")
                    .HasComment("Приоритет операции");
            });

            modelBuilder.Entity<RoAccount1c>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("pk_account_1c");

                entity.ToTable("ro_account_1c");

                entity.HasComment("Таблица учетных записей ЛК 1С");

                entity.HasIndex(e => new { e.Login, e.Email }, "sk_account_login_email")
                    .IsUnique();

                entity.HasIndex(e => e.Uin, "sk_account_uin")
                    .IsUnique();

                entity.Property(e => e.AccountId)
                    .HasColumnName("account_id")
                    .HasComment("Идиентификатор");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Login)
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Uin)
                    .HasMaxLength(100)
                    .HasColumnName("uin")
                    .HasComment("Идентификационный номер пользователя 1С");
            });

            modelBuilder.Entity<RoAccrRepresentView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_accr_represent_view");

                entity.Property(e => e.AccrRepr)
                    .HasMaxLength(500)
                    .HasColumnName("accr_repr");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.ArInn)
                    .HasMaxLength(12)
                    .HasColumnName("ar_inn");

                entity.Property(e => e.ArKpp)
                    .HasMaxLength(9)
                    .HasColumnName("ar_kpp");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.DomainIn)
                    .HasMaxLength(100)
                    .HasColumnName("domain_in");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.MercuryGuid).HasColumnName("mercury_guid");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.Pseudonym)
                    .HasMaxLength(100)
                    .HasColumnName("pseudonym");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength();

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<RoActionNumbersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_action_numbers_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ActionNumber).HasColumnName("action_number");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.RegistrationDate).HasColumnName("registration_date");
            });

            modelBuilder.Entity<RoAddr>(entity =>
            {
                entity.HasKey(e => e.AddrId)
                    .HasName("pk_addr");

                entity.ToTable("ro_addr");

                entity.HasComment("Таблица адрес (временная)");

                entity.HasIndex(e => e.RegionId, "addr_region_id_idx");

                entity.Property(e => e.AddrId)
                    .HasColumnName("addr_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Area)
                    .HasMaxLength(100)
                    .HasColumnName("area")
                    .HasComment("Район");

                entity.Property(e => e.Building)
                    .HasMaxLength(64)
                    .HasColumnName("building")
                    .HasComment("Дом");

                entity.Property(e => e.Bulk)
                    .HasMaxLength(64)
                    .HasColumnName("bulk")
                    .HasComment("Корпус");

                entity.Property(e => e.City)
                    .HasMaxLength(64)
                    .HasColumnName("city")
                    .HasComment("Город");

                entity.Property(e => e.FiasGuid)
                    .HasColumnName("fias_guid")
                    .HasComment("Идентификатор ФИАС адреса");

                entity.Property(e => e.FiasStringView)
                    .HasColumnType("character varying")
                    .HasColumnName("fias_string_view")
                    .HasComment("Строковое представление ФИАС адреса");

                entity.Property(e => e.FiasXml)
                    .HasColumnType("xml")
                    .HasColumnName("fias_xml")
                    .HasComment("ФИАС адрес в формате XML");

                entity.Property(e => e.Flat)
                    .HasMaxLength(64)
                    .HasColumnName("flat")
                    .HasComment("Квартира");

                entity.Property(e => e.Locality)
                    .HasMaxLength(128)
                    .HasColumnName("locality")
                    .HasComment("Населенный пункт");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(6)
                    .HasColumnName("postal_code")
                    .HasComment("Индекс");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.Street)
                    .HasMaxLength(200)
                    .HasColumnName("street")
                    .HasComment("Улица");

                entity.Property(e => e.StreetAddress)
                    .HasMaxLength(128)
                    .HasColumnName("street_address")
                    .HasComment("Адрес, начиная с улицы");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoAddrs)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");
            });

            modelBuilder.Entity<RoAddress>(entity =>
            {
                entity.HasKey(e => e.AddressId)
                    .HasName("pk_address");

                entity.ToTable("ro_address");

                entity.HasComment("Таблица адресов");

                entity.Property(e => e.AddressId)
                    .HasColumnName("address_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AreaId)
                    .HasColumnName("area_id")
                    .HasComment("Район");

                entity.Property(e => e.Building)
                    .HasMaxLength(64)
                    .HasColumnName("building")
                    .HasComment("Дом");

                entity.Property(e => e.Bulk)
                    .HasMaxLength(64)
                    .HasColumnName("bulk")
                    .HasComment("Корпус");

                entity.Property(e => e.CityId)
                    .HasColumnName("city_id")
                    .HasComment("Город");

                entity.Property(e => e.Flat)
                    .HasMaxLength(64)
                    .HasColumnName("flat")
                    .HasComment("Квартира");

                entity.Property(e => e.LocalityId)
                    .HasColumnName("locality_id")
                    .HasComment("Населенный пункт");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(6)
                    .HasColumnName("postal_code")
                    .HasComment("Индекс");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.StreetId)
                    .HasColumnName("street_id")
                    .HasComment("Улица");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.RoAddressAreas)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_area");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.RoAddressCities)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_city");

                entity.HasOne(d => d.Locality)
                    .WithMany(p => p.RoAddressLocalities)
                    .HasForeignKey(d => d.LocalityId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_locality");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoAddressRegions)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.RoAddressStreets)
                    .HasForeignKey(d => d.StreetId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_street");
            });

            modelBuilder.Entity<RoAddressObject>(entity =>
            {
                entity.HasKey(e => e.AddressObjectId)
                    .HasName("pk_address_object");

                entity.ToTable("ro_address_object");

                entity.HasComment("Таблица объектов адреса");

                entity.HasIndex(e => e.AddressObjectCode, "sk_address_object_code")
                    .IsUnique();

                entity.Property(e => e.AddressObjectId)
                    .HasColumnName("address_object_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AddressObjectCode)
                    .HasMaxLength(19)
                    .HasColumnName("address_object_code")
                    .HasComment("Код");

                entity.Property(e => e.AddressObjectName)
                    .HasMaxLength(40)
                    .HasColumnName("address_object_name")
                    .HasComment("Наименование");

                entity.Property(e => e.AreaTaxCode)
                    .HasMaxLength(6)
                    .HasColumnName("area_tax_code")
                    .HasComment("Код тер. уч. ИФНС");

                entity.Property(e => e.Okato)
                    .HasMaxLength(11)
                    .HasColumnName("okato")
                    .HasComment("ОКАТО");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Родитель");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(6)
                    .HasColumnName("postal_code");

                entity.Property(e => e.PrefixId)
                    .HasColumnName("prefix_id")
                    .HasComment("Префикс");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(6)
                    .HasColumnName("tax_code")
                    .HasComment("Код ИФНС");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_parent");

                entity.HasOne(d => d.Prefix)
                    .WithMany(p => p.RoAddressObjects)
                    .HasForeignKey(d => d.PrefixId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_prefix");
            });

            modelBuilder.Entity<RoAddressObjectLevel>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("pk_address_object_level_id");

                entity.ToTable("ro_address_object_level");

                entity.HasComment("Таблица уровней адреса");

                entity.HasIndex(e => e.LevelName, "sk_address_object_level_name")
                    .IsUnique();

                entity.Property(e => e.LevelId)
                    .ValueGeneratedNever()
                    .HasColumnName("level_id")
                    .HasComment("Код");

                entity.Property(e => e.LevelName)
                    .HasMaxLength(20)
                    .HasColumnName("level_name")
                    .HasComment("Наименование");

                entity.Property(e => e.LevelNote)
                    .HasColumnType("character varying")
                    .HasColumnName("level_note")
                    .HasComment("Примечание");
            });

            modelBuilder.Entity<RoAddressObjectPrefix>(entity =>
            {
                entity.HasKey(e => e.PrefixId)
                    .HasName("pk_address_object_prefix");

                entity.ToTable("ro_address_object_prefix");

                entity.HasComment("Таблица префиксов адреса");

                entity.Property(e => e.PrefixId)
                    .ValueGeneratedNever()
                    .HasColumnName("prefix_id")
                    .HasComment("Код");

                entity.Property(e => e.FullName)
                    .HasMaxLength(29)
                    .HasColumnName("full_name")
                    .HasComment("Наименование");

                entity.Property(e => e.LevelId)
                    .HasColumnName("level_id")
                    .HasComment("Уровень");

                entity.Property(e => e.PrefixName)
                    .HasMaxLength(10)
                    .HasColumnName("prefix_name")
                    .HasComment("Сокращение");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.RoAddressObjectPrefixes)
                    .HasForeignKey(d => d.LevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_level");
            });

            modelBuilder.Entity<RoAgent>(entity =>
            {
                entity.HasKey(e => e.AgentId)
                    .HasName("pk_agent");

                entity.ToTable("ro_agent");

                entity.HasComment("Таблица партнеров");

                entity.HasIndex(e => e.AbonentId, "agent_abonent_id_idx");

                entity.HasIndex(e => e.ContractId, "agent_contract_id_idx");

                entity.HasIndex(e => e.Cuid, "agent_cuid_idx");

                entity.HasIndex(e => e.LevelAucId, "agent_level_auc_id_idx");

                entity.HasIndex(e => e.LevelId, "agent_level_id_idx");

                entity.HasIndex(e => e.OldParentId, "agent_old_parent_id_idx");

                entity.HasIndex(e => e.ParentId, "agent_parent_id_idx");

                entity.HasIndex(e => e.AgentGuid, "ro_agent_agent_guid_key")
                    .IsUnique();

                entity.HasIndex(e => new { e.AbonentId, e.ContractId, e.LevelId }, "sk_abonent_contract")
                    .IsUnique();

                entity.HasIndex(e => new { e.AgentName, e.AbonentId }, "sk_agent")
                    .IsUnique();

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.AgentGuid)
                    .HasColumnName("agent_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name")
                    .HasComment("Наименование");

                entity.Property(e => e.Code1c)
                    .HasMaxLength(10)
                    .HasColumnName("code_1c")
                    .HasComment("Код партнера 1С");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Договор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Cuid)
                    .HasMaxLength(9)
                    .HasColumnName("cuid")
                    .IsFixedLength()
                    .HasComment("СМ");

                entity.Property(e => e.Distributor1c)
                    .HasColumnName("distributor_1c")
                    .HasComment("Признак агента 1С");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронная почта партнера");

                entity.Property(e => e.InvoicePrefix)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_prefix");

                entity.Property(e => e.IsBit)
                    .HasColumnName("is_bit")
                    .HasComment("Признак партнёра БИТ");

                entity.Property(e => e.LevelAucId)
                    .HasColumnName("level_auc_id")
                    .HasComment("Уровень сертификации партнера");

                entity.Property(e => e.LevelId)
                    .HasColumnName("level_id")
                    .HasDefaultValueSql("4")
                    .HasComment("Уровень");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OldParentId).HasColumnName("old_parent_id");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Владелец");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон партнера");

                entity.Property(e => e.SupportEmail)
                    .HasMaxLength(100)
                    .HasColumnName("support_email")
                    .HasComment("Электронная почта");

                entity.Property(e => e.SupportPhone)
                    .HasMaxLength(24)
                    .HasColumnName("support_phone")
                    .HasComment("Телефон горячей линии");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoAgents)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.RoAgents)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_contract");

                entity.HasOne(d => d.Cu)
                    .WithMany(p => p.RoAgents)
                    .HasForeignKey(d => d.Cuid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_cuid");

                entity.HasOne(d => d.LevelAuc)
                    .WithMany(p => p.RoAgents)
                    .HasForeignKey(d => d.LevelAucId)
                    .HasConstraintName("ro_agent_ro_agent_level_auc_level_auc_id_fk");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.RoAgents)
                    .HasForeignKey(d => d.LevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_level");

                entity.HasOne(d => d.OldParent)
                    .WithMany(p => p.InverseOldParent)
                    .HasForeignKey(d => d.OldParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_old_parent");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_parent");

                entity.HasMany(d => d.Messengers)
                    .WithMany(p => p.Agents)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoMessengerAgent",
                        l => l.HasOne<RoMessenger>().WithMany().HasForeignKey("MessengerId").HasConstraintName("fk_messenger"),
                        r => r.HasOne<RoAgent>().WithMany().HasForeignKey("AgentId").HasConstraintName("fk_agent"),
                        j =>
                        {
                            j.HasKey("AgentId", "MessengerId").HasName("pk_messenger_agent");

                            j.ToTable("ro_messenger_agent").HasComment("Таблица предпочтительных курьеров партнеров");

                            j.HasIndex(new[] { "AgentId" }, "messenger_agent_agent_id_idx");

                            j.HasIndex(new[] { "MessengerId" }, "messenger_agent_messenger_id_idx");

                            j.IndexerProperty<int>("AgentId").HasColumnName("agent_id").HasComment("Партнер");

                            j.IndexerProperty<int>("MessengerId").HasColumnName("messenger_id").HasComment("Курьер");
                        });

                entity.HasMany(d => d.Regions)
                    .WithMany(p => p.Agents)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoAgentRegion",
                        l => l.HasOne<RoRegion>().WithMany().HasForeignKey("RegionId").HasConstraintName("fk_region"),
                        r => r.HasOne<RoAgent>().WithMany().HasForeignKey("AgentId").HasConstraintName("fk_agent"),
                        j =>
                        {
                            j.HasKey("AgentId", "RegionId").HasName("pk_agent_region");

                            j.ToTable("ro_agent_region").HasComment("Регионы партнеров");

                            j.HasIndex(new[] { "AgentId" }, "agent_region_agent_id_idx");

                            j.HasIndex(new[] { "RegionId" }, "agent_region_region_id_idx");

                            j.IndexerProperty<int>("AgentId").HasColumnName("agent_id").HasComment("Партнер");

                            j.IndexerProperty<int>("RegionId").HasColumnName("region_id").HasComment("Регион");
                        });
            });

            modelBuilder.Entity<RoAgentAgreement>(entity =>
            {
                entity.HasKey(e => e.AgreementId)
                    .HasName("ro_agent_agreement_pk");

                entity.ToTable("ro_agent_agreement");

                entity.HasComment("таблица с информацией о наличии у партнера соглашения");

                entity.HasIndex(e => e.AgreementId, "ro_agent_agreement_agreement_id_uindex")
                    .IsUnique();

                entity.Property(e => e.AgreementId)
                    .HasColumnName("agreement_id")
                    .HasComment("Id соглашения");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgreementDescription)
                    .HasColumnType("character varying")
                    .HasColumnName("agreement_description");

                entity.Property(e => e.AgreementIs)
                    .HasColumnName("agreement_is")
                    .HasComment("Наличие соглашения");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoAgentAgreements)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("ro_agent_agreement_ro_agent_agent_id_fk");
            });

            modelBuilder.Entity<RoAgentBalance>(entity =>
            {
                entity.HasKey(e => e.BalanceId)
                    .HasName("pk_agent_balance");

                entity.ToTable("ro_agent_balance");

                entity.HasComment("Ежемесячные сверки между партнером и Центром продаж");

                entity.HasIndex(e => new { e.BalanceYear, e.BalanceMonth }, "idx_agent_balance_year_month");

                entity.HasIndex(e => new { e.BalanceYear, e.BalanceMonth, e.AgentId }, "idx_agent_balance_year_month_agent_id");

                entity.HasIndex(e => new { e.BalanceYear, e.BalanceMonth, e.ParentId }, "idx_agent_balance_year_month_parent_id");

                entity.HasIndex(e => e.BalanceMonth, "idx_ro_agent_balance_month");

                entity.HasIndex(e => e.ParentId, "idx_ro_agent_balance_parent_id");

                entity.HasIndex(e => e.BalanceYear, "idx_ro_agent_balance_year");

                entity.HasIndex(e => new { e.BalanceYear, e.BalanceMonth }, "idx_ro_agent_balance_year_month");

                entity.HasIndex(e => new { e.AgentId, e.BalanceYear, e.BalanceMonth, e.ParentId }, "idx_ro_gent_balance_year_month_agent_id_parent_id")
                    .IsUnique();

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Идентификатор сверки");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.Ao5AgentPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("ao5_agent_percent_reward")
                    .HasComment("% вознаграждения агента АО5");

                entity.Property(e => e.BalanceMonth)
                    .HasColumnName("balance_month")
                    .HasComment("Месяц сверки");

                entity.Property(e => e.BalanceYear)
                    .HasColumnName("balance_year")
                    .HasComment("Год сверки");

                entity.Property(e => e.BillAcceptDate)
                    .HasColumnName("bill_accept_date")
                    .HasComment("Дата одобрения счетов 1СО");

                entity.Property(e => e.EtpAcceptDate)
                    .HasColumnName("etp_accept_date")
                    .HasComment("Дата одобрения сверки ЭТП партнёром");

                entity.Property(e => e.EtpAgentPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("etp_agent_percent_reward")
                    .HasComment("% вознаграждения агента ЭТП");

                entity.Property(e => e.EtpBillAcceptDate)
                    .HasColumnName("etp_bill_accept_date")
                    .HasComment("Дата одобрения счета ЭТП(Астрал-ЭТ)");

                entity.Property(e => e.EtpScAcceptDate)
                    .HasColumnName("etp_sc_accept_date")
                    .HasComment("Дата одобрения сверки ЭТП ЦП");

                entity.Property(e => e.EtpVendorAcceptDate)
                    .HasColumnName("etp_vendor_accept_date")
                    .HasComment("Дата одобрения вендором");

                entity.Property(e => e.LastUnacceptDate)
                    .HasPrecision(0)
                    .HasColumnName("last_unaccept_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата, когда сверка стала не одобреной");

                entity.Property(e => e.MercuryAcceptDate)
                    .HasPrecision(0)
                    .HasColumnName("mercury_accept_date")
                    .HasComment("Дата одобрения сверки АО");

                entity.Property(e => e.MercuryAgentPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("mercury_agent_percent_reward")
                    .HasComment("% вознаграждения агента Астрал-отчёт");

                entity.Property(e => e.MercuryScPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("mercury_sc_percent_reward")
                    .HasComment("% вознаграждения ЦП Астрал-отчёт");

                entity.Property(e => e.OfdBillAcceptDate)
                    .HasColumnName("ofd_bill_accept_date")
                    .HasComment("Дата одобрения счета ОФД");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("ЦП");

                entity.Property(e => e.PartnerAcceptDate)
                    .HasPrecision(0)
                    .HasColumnName("partner_accept_date")
                    .HasComment("Дата одобрения сверки партнером");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("Процент вознаграждения");

                entity.Property(e => e.SaleCenterAcceptDate)
                    .HasPrecision(0)
                    .HasColumnName("sale_center_accept_date")
                    .HasComment("Дата одобрения сверки Центром продаж");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoAgentBalances)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");
            });

            modelBuilder.Entity<RoAgentBalanceAcceptedView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_agent_balance_accepted_view");

                entity.Property(e => e.AcceptedDate).HasColumnName("accepted_date");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.BalanceMonth).HasColumnName("balance_month");

                entity.Property(e => e.BalanceYear).HasColumnName("balance_year");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.NotAcceptedAmount).HasColumnName("not_accepted_amount");
            });

            modelBuilder.Entity<RoAgentBalanceBill>(entity =>
            {
                entity.HasKey(e => new { e.BillId, e.BalanceId })
                    .HasName("pk_balance_id_bill_id");

                entity.ToTable("ro_agent_balance_bill");

                entity.Property(e => e.BillId)
                    .HasColumnName("bill_id")
                    .HasComment("Ид. счёта");

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Ид. баланса");

                entity.Property(e => e.BalanceGroupId)
                    .HasColumnName("balance_group_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Ид. группы");

                entity.HasOne(d => d.BalanceGroup)
                    .WithMany(p => p.RoAgentBalanceBills)
                    .HasForeignKey(d => d.BalanceGroupId)
                    .HasConstraintName("fk_balance_group");

                entity.HasOne(d => d.Balance)
                    .WithMany(p => p.RoAgentBalanceBills)
                    .HasForeignKey(d => d.BalanceId)
                    .HasConstraintName("fk_balance");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.RoAgentBalanceBills)
                    .HasForeignKey(d => d.BillId)
                    .HasConstraintName("fk_bill");
            });

            modelBuilder.Entity<RoAgentBalanceDetail>(entity =>
            {
                entity.HasKey(e => e.BalanceDetailId)
                    .HasName("pk_agent_balance_detail");

                entity.ToTable("ro_agent_balance_detail");

                entity.HasComment("Позиции в сверке между партнером и Центром продаж");

                entity.HasIndex(e => e.AgentBalanceGroupId, "idx_agent_balance_detail_balance_group_id");

                entity.HasIndex(e => new { e.BalanceId, e.AgentBalanceGroupId }, "idx_agent_balance_detail_balance_id_balance_group_id");

                entity.HasIndex(e => e.ContractTariffId, "idx_balance_detail_contract_tariff_id");

                entity.HasIndex(e => e.AccrRepresentId, "idx_ro_agent_balance_detail_accr_represent_id");

                entity.HasIndex(e => e.BalanceId, "idx_ro_agent_balance_detail_balance_id");

                entity.HasIndex(e => e.CompanyGroup2Id, "idx_ro_agent_balance_detail_company_group_id");

                entity.HasIndex(e => e.UpdateRequired, "idx_ro_agent_balance_detail_update_required")
                    .HasFilter("(update_required = true)");

                entity.HasIndex(e => new { e.BalanceId, e.ContractTariffId, e.AbonentId }, "sk_agent_balance_detail")
                    .IsUnique();

                entity.Property(e => e.BalanceDetailId)
                    .HasColumnName("balance_detail_id")
                    .HasComment("Идентификатор позиции в сверке");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Сверяемый абонент");

                entity.Property(e => e.AbonentTariffInitialDate).HasColumnName("abonent_tariff_initial_date");

                entity.Property(e => e.AbonentTariffName)
                    .HasMaxLength(200)
                    .HasColumnName("abonent_tariff_name");

                entity.Property(e => e.AbonentTariffRegDate)
                    .HasPrecision(0)
                    .HasColumnName("abonent_tariff_reg_date");

                entity.Property(e => e.AccrRepresentId)
                    .HasColumnName("accr_represent_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.AgentBalanceGroupId)
                    .HasColumnName("agent_balance_group_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Ид. группы");

                entity.Property(e => e.AgentCost)
                    .HasPrecision(18, 2)
                    .HasColumnName("agent_cost")
                    .HasComment("Стоимость для партнёра");

                entity.Property(e => e.AgentPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("agent_percent_reward")
                    .HasComment("% вознаграждения партнёра");

                entity.Property(e => e.AgentSumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("agent_sum_reward")
                    .HasComment("Сумма вознаграждения партнёра");

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Сверка");

                entity.Property(e => e.CaServicePrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("ca_service_price")
                    .HasComment("Услуги УЦ");

                entity.Property(e => e.CcPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("cc_percent_reward")
                    .HasComment("% вознаграждения ЦК");

                entity.Property(e => e.CcSumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("cc_sum_reward")
                    .HasComment("Сумма вознаграждения ЦК");

                entity.Property(e => e.CompanyGroup2Id)
                    .HasColumnName("company_group2_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.CompanyGroupInn)
                    .HasMaxLength(12)
                    .HasColumnName("company_group_inn")
                    .HasComment("ИНН головной организации ГК");

                entity.Property(e => e.CompanyGroupKpp)
                    .HasMaxLength(12)
                    .HasColumnName("company_group_kpp")
                    .HasComment("КПП головной организации ГК");

                entity.Property(e => e.CompanyGroupName)
                    .HasColumnType("character varying")
                    .HasColumnName("company_group_name")
                    .HasComment("Наименование ГК");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Контракт-тариф");

                entity.Property(e => e.Cost)
                    .HasPrecision(15, 2)
                    .HasColumnName("cost")
                    .HasComment("Стоимость");

                entity.Property(e => e.Cost1c)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost_1c")
                    .HasComment("Стоимость для 1С");

                entity.Property(e => e.CreationDate)
                    .HasPrecision(0)
                    .HasColumnName("creation_date")
                    .HasComment("Дата создания");

                entity.Property(e => e.Deleted)
                    .HasColumnName("deleted")
                    .HasComment("Удалено");

                entity.Property(e => e.DeletedUserId)
                    .HasColumnName("deleted_user_id")
                    .HasComment("Удаливший пользователь");

                entity.Property(e => e.DeletionDate)
                    .HasPrecision(0)
                    .HasColumnName("deletion_date")
                    .HasComment("Дата удаления");

                entity.Property(e => e.DiscountArticle)
                    .HasMaxLength(50)
                    .HasColumnName("discount_article")
                    .HasComment("Артикул скидки");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Ид. скидки");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum")
                    .HasComment("Сумма скидки");

                entity.Property(e => e.DocumentId)
                    .HasColumnName("document_id")
                    .HasComment("документ, подтверждающий скидку");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.IsBonus)
                    .HasColumnName("is_bonus")
                    .HasComment("Бонусное подключение");

                entity.Property(e => e.IsExtension)
                    .HasColumnName("is_extension")
                    .HasComment("Признак расширения тарифа");

                entity.Property(e => e.IsIts)
                    .HasColumnName("is_its")
                    .HasComment("Подключение в рамках подписки ИТС ПРОФ");

                entity.Property(e => e.IsPaid)
                    .HasColumnName("is_paid")
                    .HasComment("Платное подключение");

                entity.Property(e => e.IsPrimary)
                    .HasColumnName("is_primary")
                    .HasComment("Первичный тариф");

                entity.Property(e => e.ItsOptionId)
                    .HasMaxLength(100)
                    .HasColumnName("its_option_id")
                    .HasComment("Ид. опции ИТС");

                entity.Property(e => e.MainTariffInitialDate).HasColumnName("main_tariff_initial_date");

                entity.Property(e => e.MainTariffRegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("main_tariff_registered_name")
                    .HasComment("Наименование основного тарифа Астрал-Отчёт");

                entity.Property(e => e.MainTariffRegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("main_tariff_registration_date")
                    .HasComment("Дата регистрации основного тарифа Астрал-Отчёт");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasDefaultValueSql("1")
                    .HasComment("Количество");

                entity.Property(e => e.NumberNew)
                    .HasColumnName("number_new")
                    .HasDefaultValueSql("1")
                    .HasComment("Новое количество");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Ид. офиса");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name")
                    .HasComment("Наименование офиса");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount")
                    .HasComment("% скидки");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Стоимость");

                entity.Property(e => e.PriceTariffArticle)
                    .HasMaxLength(50)
                    .HasColumnName("price_tariff_article")
                    .HasComment("Номенклатура 1С");

                entity.Property(e => e.RegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("registered_name")
                    .HasComment("Наименование тарифа");

                entity.Property(e => e.RegistraionNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("registraion_number")
                    .HasComment("Регистрационный номер продукта");

                entity.Property(e => e.RegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("registration_date");

                entity.Property(e => e.ScCaServicePrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_ca_service_price")
                    .HasComment("Услуги УЦ ЦП");

                entity.Property(e => e.ScCost)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_cost")
                    .HasComment("Стоимость для ЦП");

                entity.Property(e => e.ScPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("sc_percent_reward")
                    .HasComment("% вознаграждения ЦП");

                entity.Property(e => e.ScSumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_sum_reward")
                    .HasComment("Сумма вознаграждения ЦП");

                entity.Property(e => e.SpecialNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("special_number")
                    .HasComment("Специальное разрешение");

                entity.Property(e => e.SubscriberUin1c)
                    .HasMaxLength(255)
                    .HasColumnName("subscriber_uin_1c")
                    .HasComment("Ид. подписчика 1С");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Текущий тариф");

                entity.Property(e => e.TariffZoneId)
                    .HasColumnName("tariff_zone_id")
                    .HasComment("Тарифная зона");

                entity.Property(e => e.Uin1c)
                    .HasMaxLength(255)
                    .HasColumnName("uin_1c")
                    .HasComment("Ид. пользователя 1С");

                entity.Property(e => e.UpdateRequired)
                    .HasColumnName("update_required")
                    .HasDefaultValueSql("false")
                    .HasComment("Требуется обновить запись");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoAgentBalanceDetailAbonents)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.AccrRepresent)
                    .WithMany(p => p.RoAgentBalanceDetailAccrRepresents)
                    .HasForeignKey(d => d.AccrRepresentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_agent_balance_detail_fk2");

                entity.HasOne(d => d.AgentBalanceGroup)
                    .WithMany(p => p.RoAgentBalanceDetails)
                    .HasForeignKey(d => d.AgentBalanceGroupId)
                    .HasConstraintName("ro_agent_balance_detail_agent_balance_group_id");

                entity.HasOne(d => d.Balance)
                    .WithMany(p => p.RoAgentBalanceDetails)
                    .HasForeignKey(d => d.BalanceId)
                    .HasConstraintName("ro_agent_balance_detail_fk");

                entity.HasOne(d => d.CompanyGroup2)
                    .WithMany(p => p.RoAgentBalanceDetails)
                    .HasForeignKey(d => d.CompanyGroup2Id)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_agent_balance_detail_fk3");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.RoAgentBalanceDetailCompanyGroups)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_company_group");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.RoAgentBalanceDetails)
                    .HasForeignKey(d => d.ContractTariffId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_agent_balance_detail_fk4");

                entity.HasOne(d => d.DeletedUser)
                    .WithMany(p => p.RoAgentBalanceDetails)
                    .HasForeignKey(d => d.DeletedUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_deleted_user_id");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoAgentBalanceDetails)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_agent_balance_detail_office_id");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoAgentBalanceDetails)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_agent_balance_detail_fk1");

                entity.HasOne(d => d.TariffZone)
                    .WithMany(p => p.RoAgentBalanceDetails)
                    .HasForeignKey(d => d.TariffZoneId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tariff_zone");
            });

            modelBuilder.Entity<RoAgentBalanceDetailChangeRequest>(entity =>
            {
                entity.HasKey(e => e.BalanceDetailChangeRequestId)
                    .HasName("pk_agent_balance_detail_change_request");

                entity.ToTable("ro_agent_balance_detail_change_request");

                entity.HasComment("Заявки на изменение позиции сверки");

                entity.HasIndex(e => e.BalanceDetailId, "agent_balance_detail_change_request_balance_detail_id_idx");

                entity.HasIndex(e => e.CreationTime, "agent_balance_detail_change_request_creation_time_idx");

                entity.HasIndex(e => e.DiscountId, "agent_balance_detail_change_request_discount_id_idx");

                entity.HasIndex(e => e.StepId, "agent_balance_detail_change_request_step_id_idx");

                entity.HasIndex(e => e.UserId, "agent_balance_detail_change_request_user_id_idx");

                entity.Property(e => e.BalanceDetailChangeRequestId)
                    .HasColumnName("balance_detail_change_request_id")
                    .HasDefaultValueSql("nextval('ro_agent_balance_detail_chang_balance_detail_change_request_seq'::regclass)")
                    .HasComment("Идентификатор заявки");

                entity.Property(e => e.BalanceDetailId)
                    .HasColumnName("balance_detail_id")
                    .HasComment("Позиция в сверке, по которой пришло заявление на изменение");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания заявки");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.FinalPrice)
                    .HasPrecision(15, 2)
                    .HasColumnName("final_price")
                    .HasComment("Цена, утверждённая Вендором");

                entity.Property(e => e.RequestPrice)
                    .HasPrecision(15, 2)
                    .HasColumnName("request_price")
                    .HasComment("Цена, которую предлагает Партнер или ЦП");

                entity.Property(e => e.StartPrice)
                    .HasPrecision(15, 2)
                    .HasColumnName("start_price")
                    .HasComment("Цена, указанная в сверке");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.ToDelete)
                    .HasColumnName("to_delete")
                    .HasComment("Флаг запроса на удаление позиции");

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("update_time")
                    .HasComment("Время последнего обновления заявки");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, подавший заявку на изменение позиции");

                entity.HasOne(d => d.BalanceDetail)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequests)
                    .HasForeignKey(d => d.BalanceDetailId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_balance_detail");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequests)
                    .HasForeignKey(d => d.DiscountId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoAgentBalanceDetailChangeRequestComment>(entity =>
            {
                entity.HasKey(e => e.RequestCommentId)
                    .HasName("pk_agent_balance_detail_change_request_comment");

                entity.ToTable("ro_agent_balance_detail_change_request_comment");

                entity.HasComment("Комментарии по заявке на изменение позиции в сверке");

                entity.HasIndex(e => e.CreationTime, "agent_balance_detail_change_request_comment_creation_time_idx");

                entity.HasIndex(e => e.BalanceDetailChangeRequestId, "agent_balance_detail_change_request_comment_request_id_idx");

                entity.HasIndex(e => e.UserId, "agent_balance_detail_change_request_comment_user_id_idx");

                entity.Property(e => e.RequestCommentId)
                    .HasColumnName("request_comment_id")
                    .HasDefaultValueSql("nextval('ro_agent_balance_detail_change_request_c_request_comment_id_seq'::regclass)")
                    .HasComment("Идентификатор комментария");

                entity.Property(e => e.BalanceDetailChangeRequestId)
                    .HasColumnName("balance_detail_change_request_id")
                    .HasComment("Заявка на изменение позиции в сверке");

                entity.Property(e => e.CommentText)
                    .HasMaxLength(1000)
                    .HasColumnName("comment_text")
                    .HasComment("Текст комментария");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время добавления комментария");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, добавивший комментарий");

                entity.HasOne(d => d.BalanceDetailChangeRequest)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequestComments)
                    .HasForeignKey(d => d.BalanceDetailChangeRequestId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_balance_detail_change_request");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequestComments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Files)
                    .WithMany(p => p.RequestComments)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoAgentBalanceDetailChangeRequestFile",
                        l => l.HasOne<RoFile>().WithMany().HasForeignKey("FileId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("fk_file"),
                        r => r.HasOne<RoAgentBalanceDetailChangeRequestComment>().WithMany().HasForeignKey("RequestCommentId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("fk_request_comment"),
                        j =>
                        {
                            j.HasKey("RequestCommentId", "FileId").HasName("pk_agent_balance_detail_change_request_file");

                            j.ToTable("ro_agent_balance_detail_change_request_file").HasComment("Прикреплённые файлы к комментарию по заявке на изменение позиции в сверке");

                            j.HasIndex(new[] { "RequestCommentId" }, "agent_balance_detail_change_request_file_request_comment_id_idx");

                            j.HasIndex(new[] { "FileId" }, "agent_balance_detail_request_file_file_id_idx");

                            j.IndexerProperty<int>("RequestCommentId").HasColumnName("request_comment_id").HasComment("Комментарий по заявке");

                            j.IndexerProperty<int>("FileId").HasColumnName("file_id").HasComment("Файл, прикреплённый к заявке");
                        });
            });

            modelBuilder.Entity<RoAgentBalanceDetailChangeRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.BalanceDetailChangeRequestId, e.LogTime, e.StepId })
                    .HasName("pk_agent_balance_detail_change_request_step");

                entity.ToTable("ro_agent_balance_detail_change_request_step");

                entity.HasComment("Состояния заявки на изменение позиции сверки");

                entity.HasIndex(e => e.BalanceDetailChangeRequestId, "agent_balance_detail_request_step_detail_change_request_id_idx");

                entity.HasIndex(e => e.StepId, "agent_balance_detail_request_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "agent_balance_detail_request_step_user_id_idx");

                entity.Property(e => e.BalanceDetailChangeRequestId)
                    .HasColumnName("balance_detail_change_request_id")
                    .HasComment("Идентификатор заявки");

                entity.Property(e => e.LogTime)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время смены состояния заявки");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние заявки");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, сменивший состояние заявки");

                entity.HasOne(d => d.BalanceDetailChangeRequest)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequestSteps)
                    .HasForeignKey(d => d.BalanceDetailChangeRequestId)
                    .HasConstraintName("fk_balance_detail_change_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequestSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoAgentBalanceDetailChangeRequestSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoAgentBalanceGroup>(entity =>
            {
                entity.HasKey(e => e.AgentBalanceGroupId)
                    .HasName("pk_agent_balance_group");

                entity.ToTable("ro_agent_balance_group");

                entity.HasComment("Таблица групп продуктов сверки");

                entity.HasIndex(e => e.AgentBalanceGroupName, "sk_agent_balance_group_name")
                    .IsUnique();

                entity.Property(e => e.AgentBalanceGroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("agent_balance_group_id")
                    .HasComment("Идентификатор группы");

                entity.Property(e => e.AgentBalanceGroupName)
                    .HasMaxLength(50)
                    .HasColumnName("agent_balance_group_name")
                    .HasComment("Наименование группы");
            });

            modelBuilder.Entity<RoAgentBalanceOffice>(entity =>
            {
                entity.HasKey(e => e.BalanceOfficeId)
                    .HasName("ro_agent_balance_office_pkey");

                entity.ToTable("ro_agent_balance_office");

                entity.HasComment("Ежемесячные сверки между партнером и офисами БИТ");

                entity.HasIndex(e => new { e.BalanceId, e.OfficeId }, "sk_agent_balance_period")
                    .IsUnique();

                entity.Property(e => e.BalanceOfficeId)
                    .HasColumnName("balance_office_id")
                    .HasDefaultValueSql("nextval('ro_agent_balance_office_agent_balance_office_id_seq'::regclass)")
                    .HasComment("Идентификатор сверки по офисам");

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Баланс");

                entity.Property(e => e.OfficeAcceptDate)
                    .HasPrecision(0)
                    .HasColumnName("office_accept_date")
                    .HasComment("Дата одобрения сверки офисом");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.HasOne(d => d.Balance)
                    .WithMany(p => p.RoAgentBalanceOffices)
                    .HasForeignKey(d => d.BalanceId)
                    .HasConstraintName("fk_balance");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoAgentBalanceOffices)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_balance_office");
            });

            modelBuilder.Entity<RoAgentBalanceProcessing>(entity =>
            {
                entity.HasKey(e => e.AgentBalanceGroupId)
                    .HasName("pk_agent_balance_processing");

                entity.ToTable("ro_agent_balance_processing");

                entity.HasComment("Таблица сверок в обработке");

                entity.Property(e => e.AgentBalanceGroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("agent_balance_group_id")
                    .HasComment("Сверка");

                entity.Property(e => e.BlockTime)
                    .HasPrecision(0)
                    .HasColumnName("block_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время блокировки");

                entity.HasOne(d => d.AgentBalanceGroup)
                    .WithOne(p => p.RoAgentBalanceProcessing)
                    .HasForeignKey<RoAgentBalanceProcessing>(d => d.AgentBalanceGroupId)
                    .HasConstraintName("fk_agent_balance_group");
            });

            modelBuilder.Entity<RoAgentContract>(entity =>
            {
                entity.HasKey(e => e.AgentContractId)
                    .HasName("pk_agent_contract");

                entity.ToTable("ro_agent_contract");

                entity.HasComment("Таблица договоров");

                entity.HasIndex(e => e.AgentId, "idx_ro_agent_contract_agent_id");

                entity.HasIndex(e => e.ContractTypeId, "idx_ro_agent_contract_contract_type_id");

                entity.HasIndex(e => e.OfficeId, "idx_ro_agent_contract_office_id");

                entity.Property(e => e.AgentContractId)
                    .HasColumnName("agent_contract_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Агент");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(50)
                    .HasColumnName("contract_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ContractTypeId)
                    .HasColumnName("contract_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.CreateTime)
                    .HasPrecision(0)
                    .HasColumnName("create_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoAgentContracts)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.ContractType)
                    .WithMany(p => p.RoAgentContracts)
                    .HasForeignKey(d => d.ContractTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contract_type");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoAgentContracts)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<RoAgentLevel>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("pk_agent_level_id");

                entity.ToTable("ro_agent_level");

                entity.HasComment("Таблица уровней партнеров");

                entity.HasIndex(e => e.LevelName, "sk_agent_level_name")
                    .IsUnique();

                entity.Property(e => e.LevelId)
                    .ValueGeneratedNever()
                    .HasColumnName("level_id")
                    .HasComment("Код");

                entity.Property(e => e.LevelName)
                    .HasMaxLength(30)
                    .HasColumnName("level_name")
                    .HasComment("Наименование");

                entity.Property(e => e.LevelNote)
                    .HasColumnType("character varying")
                    .HasColumnName("level_note")
                    .HasComment("Примечание");
            });

            modelBuilder.Entity<RoAgentLevelAuc>(entity =>
            {
                entity.HasKey(e => e.LevelAucId)
                    .HasName("ro_agent_level_auc_pk");

                entity.ToTable("ro_agent_level_auc");

                entity.HasComment("Уровень сертификации партнера");

                entity.HasIndex(e => e.LevelAucId, "ro_agent_level_auc_level_auc_id_uindex")
                    .IsUnique();

                entity.Property(e => e.LevelAucId)
                    .HasColumnName("level_auc_id")
                    .HasComment("Идентификатор уровня");

                entity.Property(e => e.LevelAucDescription)
                    .HasColumnType("character varying")
                    .HasColumnName("level_auc_description")
                    .HasComment("Описание уровня");

                entity.Property(e => e.LevelAucName)
                    .HasColumnType("character varying")
                    .HasColumnName("level_auc_name")
                    .HasComment("Наименование уровня");
            });

            modelBuilder.Entity<RoAgentLocalityRating>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_agent_locality_rating");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.LevelId).HasColumnName("level_id");

                entity.Property(e => e.Locality).HasColumnName("locality");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<RoAgentLocalityView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_agent_locality_view");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.LevelId).HasColumnName("level_id");

                entity.Property(e => e.Locality).HasColumnName("locality");

                entity.Property(e => e.PartnerCount).HasColumnName("partner_count");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.SaleCenterCount).HasColumnName("sale_center_count");
            });

            modelBuilder.Entity<RoAgentMerchandise>(entity =>
            {
                entity.HasKey(e => e.AgentMerchandiseId)
                    .HasName("pk_agent_merchandise");

                entity.ToTable("ro_agent_merchandise");

                entity.HasComment("Список номенклатур у партнера");

                entity.Property(e => e.AgentMerchandiseId).HasColumnName("agent_merchandise_id");

                entity.Property(e => e.BillFromAgentId)
                    .HasColumnName("bill_from_agent_id")
                    .HasComment("Агент от которого выставляется счет");

                entity.Property(e => e.BillToAgentId)
                    .HasColumnName("bill_to_agent_id")
                    .HasComment("Ид партнера которому выставляется счет");

                entity.Property(e => e.MerchandiseId)
                    .HasColumnName("merchandise_id")
                    .HasComment("Ид номенклатуры");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.BillFromAgent)
                    .WithMany(p => p.RoAgentMerchandiseBillFromAgents)
                    .HasForeignKey(d => d.BillFromAgentId)
                    .HasConstraintName("fk_bill_agent");

                entity.HasOne(d => d.BillToAgent)
                    .WithMany(p => p.RoAgentMerchandiseBillToAgents)
                    .HasForeignKey(d => d.BillToAgentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ro_agent");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.RoAgentMerchandises)
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ro_merchandise");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoAgentMerchandises)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<RoAgentRegionRating>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_agent_region_rating");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<RoAgentReward>(entity =>
            {
                entity.HasKey(e => e.RewardId)
                    .HasName("pk_agent_reward");

                entity.ToTable("ro_agent_reward");

                entity.HasComment("Таблица вознаграждений партнеров");

                entity.HasIndex(e => e.AgentId, "agent_reward_agent_id_idx");

                entity.HasIndex(e => e.BonusId, "agent_reward_bonus_id_idx");

                entity.HasIndex(e => e.ContractTariffId, "agent_reward_contract_tariff_id_idx");

                entity.Property(e => e.RewardId)
                    .HasColumnName("reward_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.BonusId)
                    .HasColumnName("bonus_id")
                    .HasComment("Премия");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Тариф по договору");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("Процент вознаграждения");

                entity.Property(e => e.SumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum_reward")
                    .HasComment("Сумма вознаграждения");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoAgentRewards)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.RoAgentRewards)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_bonus");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.RoAgentRewards)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");
            });

            modelBuilder.Entity<RoAgentScheme>(entity =>
            {
                entity.HasKey(e => e.SchemeId)
                    .HasName("pk_agent_scheme");

                entity.ToTable("ro_agent_scheme");

                entity.HasComment("Таблица партнерских схем");

                entity.HasIndex(e => e.AgentId, "agent_scheme_agent_id_idx");

                entity.HasIndex(e => e.LevelId, "agent_scheme_level_id_idx");

                entity.HasIndex(e => e.ParentId, "agent_scheme_parent_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "agent_scheme_product_type_id_idx");

                entity.HasIndex(e => e.RegionId, "agent_scheme_region_id_idx");

                entity.HasIndex(e => new { e.ProductTypeId, e.TransferPointId }, "sk_transfer_point")
                    .IsUnique();

                entity.Property(e => e.SchemeId)
                    .HasColumnName("scheme_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.Dealer)
                    .IsRequired()
                    .HasColumnName("dealer")
                    .HasDefaultValueSql("true")
                    .HasComment("Дилер");

                entity.Property(e => e.LevelId)
                    .HasColumnName("level_id")
                    .HasDefaultValueSql("4")
                    .HasComment("Уровень");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Принадлежность");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("Процент вознаграждения");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.TransferPointId)
                    .HasColumnName("transfer_point_id")
                    .HasComment("Точка выдачи");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoAgentSchemeAgents)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.RoAgentSchemes)
                    .HasForeignKey(d => d.LevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_level");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.RoAgentSchemeParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_parent");

                entity.HasOne(d => d.Price)
                    .WithMany(p => p.RoAgentSchemes)
                    .HasForeignKey(d => d.PriceId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_price");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoAgentSchemes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoAgentSchemes)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.TransferPoint)
                    .WithMany(p => p.RoAgentSchemes)
                    .HasForeignKey(d => d.TransferPointId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_transfer_point");

                entity.HasMany(d => d.Bonus)
                    .WithMany(p => p.Schemes)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoBonusScheme",
                        l => l.HasOne<RoBonu>().WithMany().HasForeignKey("BonusId").HasConstraintName("fk_bonus"),
                        r => r.HasOne<RoAgentScheme>().WithMany().HasForeignKey("SchemeId").HasConstraintName("fk_scheme"),
                        j =>
                        {
                            j.HasKey("SchemeId", "BonusId").HasName("pk_bonus_scheme");

                            j.ToTable("ro_bonus_scheme").HasComment("Таблица премий для схемы");

                            j.HasIndex(new[] { "BonusId" }, "bonus_scheme_bonus_id_idx");

                            j.HasIndex(new[] { "SchemeId" }, "bonus_scheme_scheme_id_idx");

                            j.IndexerProperty<int>("SchemeId").HasColumnName("scheme_id").HasComment("Схема");

                            j.IndexerProperty<int>("BonusId").HasColumnName("bonus_id").HasComment("Премия");
                        });
            });

            modelBuilder.Entity<RoAgentSetting>(entity =>
            {
                entity.HasKey(e => new { e.AgentId, e.SettingId })
                    .HasName("pk_agent_setting");

                entity.ToTable("ro_agent_setting");

                entity.HasComment("Таблица настроек агентов");

                entity.HasIndex(e => e.AgentId, "agent_setting_agent_id_idx");

                entity.HasIndex(e => e.SettingId, "agent_setting_setting_id_idx");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Агент");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Время начала");

                entity.Property(e => e.SettingValue)
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoAgentSettings)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoAgentSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoAgentSettings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<RoAltname>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_altnames");

                entity.HasComment("Таблица соотвествия");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasComment("Уровень");

                entity.Property(e => e.Newcode)
                    .HasMaxLength(19)
                    .HasColumnName("newcode")
                    .HasComment("Новый код");

                entity.Property(e => e.Oldcode)
                    .HasMaxLength(19)
                    .HasColumnName("oldcode")
                    .HasComment("Старый код");
            });

            modelBuilder.Entity<RoAo5BillView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_ao5_bill_view");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.BillDate)
                    .HasPrecision(0)
                    .HasColumnName("bill_date");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.BillNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("bill_number");

                entity.Property(e => e.BillTotalSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_total_sum");

                entity.Property(e => e.CancelTime)
                    .HasPrecision(0)
                    .HasColumnName("cancel_time");

                entity.Property(e => e.InvoiceNdsNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_nds_number");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_number");
            });

            modelBuilder.Entity<RoAoAbonentContractTariffView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_ao_abonent_contract_tariff_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");
            });

            modelBuilder.Entity<RoAoAbonentContractTariffViewEx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_ao_abonent_contract_tariff_view_ex");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Prolongated).HasColumnName("prolongated");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");
            });

            modelBuilder.Entity<RoApplication>(entity =>
            {
                entity.HasKey(e => e.ApplicationId)
                    .HasName("pk_application");

                entity.ToTable("ro_application");

                entity.HasComment("Таблица приложений");

                entity.HasIndex(e => e.StepId, "application_step_id_idx");

                entity.HasIndex(e => e.ApplicationName, "sk_application_name")
                    .IsUnique();

                entity.Property(e => e.ApplicationId)
                    .ValueGeneratedNever()
                    .HasColumnName("application_id")
                    .HasComment("Код");

                entity.Property(e => e.ApplicationName)
                    .HasMaxLength(50)
                    .HasColumnName("application_name")
                    .HasComment("Наименование");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Description)
                    .HasMaxLength(150)
                    .HasColumnName("description")
                    .HasComment("Описание");

                entity.Property(e => e.OffTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoApplications)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoApplicationSetting>(entity =>
            {
                entity.HasKey(e => new { e.ApplicationId, e.SettingId })
                    .HasName("pk_application_setting");

                entity.ToTable("ro_application_setting");

                entity.HasComment("Таблица настроек приложений");

                entity.HasIndex(e => e.ApplicationId, "application_setting_application_id_idx");

                entity.HasIndex(e => e.SettingId, "application_setting_setting_id_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.SettingValue)
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.RoApplicationSettings)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoApplicationSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");
            });

            modelBuilder.Entity<RoApplicationStep>(entity =>
            {
                entity.HasKey(e => new { e.ApplicationId, e.StepId, e.LogTime })
                    .HasName("pk_application_step");

                entity.ToTable("ro_application_step");

                entity.HasComment("Таблица состояний приложений");

                entity.HasIndex(e => e.ApplicationId, "application_step_application_id_idx");

                entity.HasIndex(e => e.StepId, "application_step_step_id_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.RoApplicationSteps)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoApplicationSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoAr1cView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_ar_1c_view");

                entity.Property(e => e.Domain)
                    .HasMaxLength(100)
                    .HasColumnName("domain");

                entity.Property(e => e.MercuryId).HasColumnName("mercury_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");
            });

            modelBuilder.Entity<RoAstralWorkflowClient>(entity =>
            {
                entity.HasKey(e => e.WorkflowGuid)
                    .HasName("ro_astral_workflow_client_pk");

                entity.ToTable("ro_astral_workflow_client");

                entity.Property(e => e.WorkflowGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("workflow_guid");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.CertificateId).HasColumnName("certificate_id");

                entity.Property(e => e.CreateDate).HasColumnName("create_date");

                entity.Property(e => e.GateGuid).HasColumnName("gate_guid");

                entity.Property(e => e.LastRegRequestId).HasColumnName("last_reg_request_id");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoAstralWorkflowClients)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_astral_workflow_client_ro_abonent_abonent_id_fk");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoAstralWorkflowClients)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_astral_workflow_client_ro_certificate_certificate_id_fk");

                entity.HasOne(d => d.LastRegRequest)
                    .WithMany(p => p.RoAstralWorkflowClients)
                    .HasForeignKey(d => d.LastRegRequestId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_astral_workflow_client_ro_reg_request_reg_request_id_fk");
            });

            modelBuilder.Entity<RoAstralWorkflowProcessing>(entity =>
            {
                entity.HasKey(e => e.AgentId)
                    .HasName("ro_astral_workflow_processing_pkey");

                entity.ToTable("ro_astral_workflow_processing");

                entity.Property(e => e.AgentId)
                    .ValueGeneratedNever()
                    .HasColumnName("agent_id");

                entity.Property(e => e.AutoProcessing).HasColumnName("auto_processing");
            });

            modelBuilder.Entity<RoAttribute>(entity =>
            {
                entity.HasKey(e => e.AttributeId)
                    .HasName("pk_attribute");

                entity.ToTable("ro_attribute");

                entity.HasComment("Таблица атрибутов (номенклатуры)");

                entity.HasIndex(e => e.AttributeTypeId, "attribute_attribute_type_id_idx");

                entity.HasIndex(e => new { e.AttributeName, e.AttributeTypeId }, "sk_attribute")
                    .IsUnique();

                entity.HasIndex(e => e.AttributeGuid, "sk_attribute_guid")
                    .IsUnique();

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AttributeGuid)
                    .HasColumnName("attribute_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.AttributeName)
                    .HasMaxLength(200)
                    .HasColumnName("attribute_name")
                    .HasComment("Наименование");

                entity.Property(e => e.AttributeTypeId)
                    .HasColumnName("attribute_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.AttributeType)
                    .WithMany(p => p.RoAttributes)
                    .HasForeignKey(d => d.AttributeTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_attribute_type");
            });

            modelBuilder.Entity<RoAttributeDocumentType>(entity =>
            {
                entity.HasKey(e => new { e.AttributeId, e.DocTypeId })
                    .HasName("pk_attribute_document_type");

                entity.ToTable("ro_attribute_document_type");

                entity.HasComment("Таблица документов требуемых для атрибута");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("ИД атрибута");

                entity.Property(e => e.DocTypeId)
                    .HasColumnName("doc_type_id")
                    .HasComment("ИД типа документа");

                entity.Property(e => e.OnlyForProxy)
                    .HasColumnName("only_for_proxy")
                    .HasComment("Документ требуется только к доверенности");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.RoAttributeDocumentTypes)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("fk_attribute_id");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.RoAttributeDocumentTypes)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("fk_doc_id");
            });

            modelBuilder.Entity<RoAttributeEku>(entity =>
            {
                entity.HasKey(e => new { e.AttributeId, e.EkuId })
                    .HasName("pk_attribute_eku");

                entity.ToTable("ro_attribute_eku");

                entity.HasComment("Таблица расширений сертификата для атрибута");

                entity.HasIndex(e => e.AttributeId, "attribute_eku_attribute_id_idx");

                entity.HasIndex(e => e.EkuId, "attribute_eku_eku_id_idx");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Атрибут");

                entity.Property(e => e.EkuId)
                    .HasColumnName("eku_id")
                    .HasComment("Расширение");

                entity.Property(e => e.IsOptional).HasColumnName("is_optional");

                entity.Property(e => e.IsPrimary)
                    .HasColumnName("is_primary")
                    .HasComment("Опциональный ОИД");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.RoAttributeEkus)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("fk_attribute");

                entity.HasOne(d => d.Eku)
                    .WithMany(p => p.RoAttributeEkus)
                    .HasForeignKey(d => d.EkuId)
                    .HasConstraintName("fk_eku");
            });

            modelBuilder.Entity<RoAttributeType>(entity =>
            {
                entity.HasKey(e => e.AttributeTypeId)
                    .HasName("pk_attribute_type");

                entity.ToTable("ro_attribute_type");

                entity.HasComment("Таблица типов атрибутов");

                entity.HasIndex(e => e.AttributeTypeName, "sk_attribute_type_name")
                    .IsUnique();

                entity.Property(e => e.AttributeTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("attribute_type_id")
                    .HasComment("Код");

                entity.Property(e => e.AttributeTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("attribute_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoAuditDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_audit_data", "audit");

                entity.HasComment("Таблица аудита данных");

                entity.HasIndex(e => e.Action, "audit_data_action_idx");

                entity.HasIndex(e => e.CreationTime, "audit_data_creation_time_idx");

                entity.Property(e => e.Action)
                    .HasColumnName("action")
                    .HasComment("Действие");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.NewData)
                    .HasColumnName("new_data")
                    .HasComment("Новые данные");

                entity.Property(e => e.OriginalData)
                    .HasColumnName("original_data")
                    .HasComment("Исходные данные");

                entity.Property(e => e.Query)
                    .HasColumnName("query")
                    .HasComment("Запрос");

                entity.Property(e => e.SchemaName)
                    .HasColumnName("schema_name")
                    .HasComment("Схема");

                entity.Property(e => e.TableName)
                    .HasColumnName("table_name")
                    .HasComment("Таблица");

                entity.Property(e => e.UserName)
                    .HasColumnName("user_name")
                    .HasComment("Пользователь");
            });

            modelBuilder.Entity<RoAuditField>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_audit_field", "audit");

                entity.HasComment("Таблица аудита по колонкам");

                entity.HasIndex(e => e.Action, "audit_field_action_idx");

                entity.HasIndex(e => e.CreationTime, "audit_field_creation_time_idx");

                entity.Property(e => e.Action)
                    .HasMaxLength(1)
                    .HasColumnName("action")
                    .HasComment("Действие");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .HasColumnName("field_name")
                    .HasComment("Колонка");

                entity.Property(e => e.NewValue)
                    .HasColumnName("new_value")
                    .HasComment("Новое значение");

                entity.Property(e => e.OriginalValue)
                    .HasColumnName("original_value")
                    .HasComment("Исходное значение");

                entity.Property(e => e.PkName)
                    .HasMaxLength(30)
                    .HasColumnName("pk_name")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.PkValue)
                    .HasMaxLength(40)
                    .HasColumnName("pk_value")
                    .HasComment("Значение ключа");

                entity.Property(e => e.TableName)
                    .HasMaxLength(50)
                    .HasColumnName("table_name")
                    .HasComment("Таблица");

                entity.Property(e => e.UserName)
                    .HasMaxLength(30)
                    .HasColumnName("user_name")
                    .HasComment("Пользователь");
            });

            modelBuilder.Entity<RoAuthorizationCode>(entity =>
            {
                entity.HasKey(e => e.IdAuthorizationCode)
                    .HasName("sk_authorization_codes_pkey");

                entity.ToTable("ro_authorization_codes");

                entity.HasComment("Таблица кодов авторизации");

                entity.HasIndex(e => e.AuthorizationId, "sk_authorization_id_key")
                    .IsUnique();

                entity.HasIndex(e => e.AuthorizationSecretKey, "sk_authorization_secret_key")
                    .IsUnique();

                entity.Property(e => e.IdAuthorizationCode)
                    .HasColumnName("id_authorization_code")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthorizationCount)
                    .HasColumnName("authorization_count")
                    .HasComment("Счетчик авторизации");

                entity.Property(e => e.AuthorizationId)
                    .HasColumnName("authorization_id")
                    .HasComment("Идентификатор авторизации");

                entity.Property(e => e.AuthorizationSecretKey)
                    .HasColumnName("authorization_secret_key")
                    .HasComment("Секретный ключ");
            });

            modelBuilder.Entity<RoAuto1cReportStatistic>(entity =>
            {
                entity.HasKey(e => e.ReportId)
                    .HasName("pk_auto_1c_report_statistics");

                entity.ToTable("ro_auto_1c_report_statistics");

                entity.HasComment("Таблица для формирования автоматических отчётов по 1СО и 1С-ЭТП");

                entity.Property(e => e.ReportId)
                    .HasColumnName("report_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ActiveAbonents)
                    .HasColumnName("active_abonents")
                    .HasComment("Количество активных пользователей");

                entity.Property(e => e.EightDaysCount)
                    .HasColumnName("eight_days_count")
                    .HasComment("Срок от 6 до 8 дней");

                entity.Property(e => e.EtpActiveAbonents)
                    .HasColumnName("etp_active_abonents")
                    .HasComment("Количество активных пользователей 1С-ЭТП");

                entity.Property(e => e.EtpMoreDaysCount)
                    .HasColumnName("etp_more_days_count")
                    .HasComment("ЭТП Срок от 28 дней");

                entity.Property(e => e.EtpPaRegRequests)
                    .HasColumnName("etp_pa_reg_requests")
                    .HasComment("Количество зарегистрированных заявок 1С-ЭТП(ПА)");

                entity.Property(e => e.EtpPartners)
                    .HasColumnName("etp_partners")
                    .HasComment("Количество партнеров 1С-ЭТП");

                entity.Property(e => e.EtpRecievedRegRequests)
                    .HasColumnName("etp_recieved_reg_requests")
                    .HasComment("ЭТП количество поступивших заявок");

                entity.Property(e => e.EtpRegRequests)
                    .HasColumnName("etp_reg_requests")
                    .HasComment("Количество зарегистрированных заявок 1С-ЭТП");

                entity.Property(e => e.EtpRequests)
                    .HasColumnName("etp_requests")
                    .HasComment("Количество заявок 1С-ЭТП на подключение и продление");

                entity.Property(e => e.EtpSevenDaysCount)
                    .HasColumnName("etp_seven_days_count")
                    .HasComment("ЭТП Срок от 2 до 7 дней");

                entity.Property(e => e.EtpTwentyEightDaysCount)
                    .HasColumnName("etp_twenty_eight_days_count")
                    .HasComment("ЭТП Срок от 7 до 28 дней");

                entity.Property(e => e.EtpTwoDaysCount)
                    .HasColumnName("etp_two_days_count")
                    .HasComment("ЭТП Срок от 0 до 2 дней");

                entity.Property(e => e.EtpUnactiveAbonents)
                    .HasColumnName("etp_unactive_abonents")
                    .HasComment("Количество отвала абонентов");

                entity.Property(e => e.EtpUnprocRegRequests)
                    .HasColumnName("etp_unproc_reg_requests")
                    .HasComment("ЭТП количество принятых, но неотправленных в обработку заявок");

                entity.Property(e => e.Exclusive)
                    .HasColumnName("exclusive")
                    .HasComment("Льготные");

                entity.Property(e => e.FourDaysCount)
                    .HasColumnName("four_days_count")
                    .HasComment("Срок от 2 до 4 дней");

                entity.Property(e => e.MoreDaysCount)
                    .HasColumnName("more_days_count")
                    .HasComment("Срок от 8 дней");

                entity.Property(e => e.Paid)
                    .HasColumnName("paid")
                    .HasComment("Платные");

                entity.Property(e => e.Partners)
                    .HasColumnName("partners")
                    .HasComment("Количество партнеров");

                entity.Property(e => e.RecievedRegRequests)
                    .HasColumnName("recieved_reg_requests")
                    .HasComment("Количество поступивших заявок");

                entity.Property(e => e.RegRequest)
                    .HasColumnName("reg_request")
                    .HasComment("Поступившие заявки за неделю");

                entity.Property(e => e.RegisteredAbonents)
                    .HasColumnName("registered_abonents")
                    .HasComment("Количество зарегистрированных пользователей");

                entity.Property(e => e.ReportDate)
                    .HasColumnName("report_date")
                    .HasComment("Дата отчёта");

                entity.Property(e => e.SixDaysCount)
                    .HasColumnName("six_days_count")
                    .HasComment("Срок от 4 до 6 дней");

                entity.Property(e => e.SupportStatDataCallsEtsJson)
                    .HasColumnType("character varying")
                    .HasColumnName("support_stat_data_calls_ets_json")
                    .HasComment("Ответ сервиса статистики работы ТП по ЭТП(звонки)");

                entity.Property(e => e.SupportStatDataCallsJson)
                    .HasColumnType("character varying")
                    .HasColumnName("support_stat_data_calls_json")
                    .HasComment("Ответ сервиса статистики работы ТП по 1С(звонки)");

                entity.Property(e => e.SupportStatDataIncidentsEtsJson)
                    .HasColumnType("character varying")
                    .HasColumnName("support_stat_data_incidents_ets_json")
                    .HasComment("Ответ сервиса статистики работы ТП(инциденты)");

                entity.Property(e => e.SupportStatDataIncidentsJson)
                    .HasColumnType("character varying")
                    .HasColumnName("support_stat_data_incidents_json")
                    .HasComment("Ответ сервиса статистики работы ТП по 1C(инциденты)");

                entity.Property(e => e.TotalBonus)
                    .HasColumnName("total_bonus")
                    .HasComment("Действующие бонусные лицензии");

                entity.Property(e => e.TotalExclusive)
                    .HasColumnName("total_exclusive")
                    .HasComment("Действующие льготные лицензии");

                entity.Property(e => e.TotalPaid)
                    .HasColumnName("total_paid")
                    .HasComment("Действующие платные лицензии");

                entity.Property(e => e.TwoDaysCount)
                    .HasColumnName("two_days_count")
                    .HasComment("Срок от 0 до 2 дней");

                entity.Property(e => e.UnactiveExclusive)
                    .HasColumnName("unactive_exclusive")
                    .HasComment("Отвал льготных лицензий");

                entity.Property(e => e.UnactivePaid)
                    .HasColumnName("unactive_paid")
                    .HasComment("Отвал платных лицензий");

                entity.Property(e => e.UnprocRegRequests)
                    .HasColumnName("unproc_reg_requests")
                    .HasComment("Количество принятых, но не отправленных в обработку заявок");
            });

            modelBuilder.Entity<RoBalanceBuildTask>(entity =>
            {
                entity.HasKey(e => e.BalanceBuildTaskId)
                    .HasName("pk_balance_build_task_id");

                entity.ToTable("ro_balance_build_task");

                entity.HasComment("Таблица задач по построению сверок");

                entity.HasIndex(e => new { e.AgentBalanceGroupId, e.BalanceYear, e.BalanceMonth, e.StepId }, "idx_balance_build_task_group_year_month_step");

                entity.Property(e => e.BalanceBuildTaskId)
                    .HasColumnName("balance_build_task_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentBalanceGroupId)
                    .HasColumnName("agent_balance_group_id")
                    .HasComment("Тип сверки");

                entity.Property(e => e.BalanceMonth)
                    .HasColumnName("balance_month")
                    .HasComment("Месяц сверки");

                entity.Property(e => e.BalanceYear)
                    .HasColumnName("balance_year")
                    .HasComment("Год сверки");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания задачи");

                entity.Property(e => e.FinishTime)
                    .HasPrecision(0)
                    .HasColumnName("finish_time")
                    .HasComment("Время окончания выполнения задачи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time")
                    .HasComment("Время начала выполнения задачи");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, создавший задачу");

                entity.HasOne(d => d.AgentBalanceGroup)
                    .WithMany(p => p.RoBalanceBuildTasks)
                    .HasForeignKey(d => d.AgentBalanceGroupId)
                    .HasConstraintName("fk_agent_balance_group");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoBalanceBuildTasks)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoBalanceBuildTasks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoBank>(entity =>
            {
                entity.HasKey(e => e.Bic)
                    .HasName("ro_bank_pkey");

                entity.ToTable("ro_bank");

                entity.HasComment("Справочник банков");

                entity.Property(e => e.Bic)
                    .HasMaxLength(9)
                    .HasColumnName("bic")
                    .HasComment("БИК");

                entity.Property(e => e.BankName)
                    .HasColumnType("character varying")
                    .HasColumnName("bank_name")
                    .HasComment("Наименование банка");

                entity.Property(e => e.City)
                    .HasColumnType("character varying")
                    .HasColumnName("city")
                    .HasComment("Город");

                entity.Property(e => e.CorrespondentAccount)
                    .HasMaxLength(20)
                    .HasColumnName("correspondent_account")
                    .HasComment("Корреспондентский счёт");

                entity.Property(e => e.OffDate)
                    .HasColumnName("off_date")
                    .HasComment("Дата отключения");
            });

            modelBuilder.Entity<RoBillDocument>(entity =>
            {
                entity.HasKey(e => e.BillDocumentId)
                    .HasName("pk_bill_document");

                entity.ToTable("ro_bill_document");

                entity.HasIndex(e => e.BillId, "bill_document_bill_id_idx");

                entity.HasIndex(e => e.DocumentId, "bill_document_document_id_idx");

                entity.HasIndex(e => e.DocumentTypeId, "bill_document_document_type_id_idx");

                entity.Property(e => e.BillDocumentId).HasColumnName("bill_document_id");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.DocumentDate)
                    .HasPrecision(0)
                    .HasColumnName("document_date");

                entity.Property(e => e.DocumentId)
                    .HasColumnName("document_id")
                    .HasComment("Документ");

                entity.Property(e => e.DocumentNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("document_number");

                entity.Property(e => e.DocumentTypeId).HasColumnName("document_type_id");

                entity.Property(e => e.PaidSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("paid_sum")
                    .HasComment("Сумма платежа");

                entity.Property(e => e.PaymentGuid)
                    .HasColumnName("payment_guid")
                    .HasComment("Идентификатор платежа");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.RoBillDocuments)
                    .HasForeignKey(d => d.BillId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_bill");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.RoBillDocuments)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_document_type");
            });

            modelBuilder.Entity<RoBillDocumentType>(entity =>
            {
                entity.HasKey(e => e.DocumentTypeId)
                    .HasName("pk_bill_document_type");

                entity.ToTable("ro_bill_document_type");

                entity.Property(e => e.DocumentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("document_type_id");

                entity.Property(e => e.DocumentTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("document_type_name");
            });

            modelBuilder.Entity<RoBillView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_bill_view");

                entity.Property(e => e.ActDocDate)
                    .HasPrecision(0)
                    .HasColumnName("act_doc_date");

                entity.Property(e => e.ActNdsDocDate)
                    .HasPrecision(0)
                    .HasColumnName("act_nds_doc_date");

                entity.Property(e => e.ActNdsNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("act_nds_number");

                entity.Property(e => e.ActNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("act_number");

                entity.Property(e => e.BillDate)
                    .HasPrecision(0)
                    .HasColumnName("bill_date");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.BillNdsSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_nds_sum");

                entity.Property(e => e.BillNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("bill_number");

                entity.Property(e => e.BillPayedSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_payed_sum");

                entity.Property(e => e.BillTotalSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_total_sum");

                entity.Property(e => e.BlockTime)
                    .HasPrecision(0)
                    .HasColumnName("block_time");

                entity.Property(e => e.CancelTime)
                    .HasPrecision(0)
                    .HasColumnName("cancel_time");

                entity.Property(e => e.InvoiceDocDate)
                    .HasPrecision(0)
                    .HasColumnName("invoice_doc_date");

                entity.Property(e => e.InvoiceNdsDocDate)
                    .HasPrecision(0)
                    .HasColumnName("invoice_nds_doc_date");

                entity.Property(e => e.InvoiceNdsNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_nds_number");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_number");

                entity.Property(e => e.InvoiceReturnTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_return_type_name");

                entity.Property(e => e.IsSent).HasColumnName("is_sent");

                entity.Property(e => e.Notice)
                    .HasColumnType("character varying")
                    .HasColumnName("notice");

                entity.Property(e => e.PaidDate).HasColumnName("paid_date");

                entity.Property(e => e.ProductDocDate)
                    .HasPrecision(0)
                    .HasColumnName("product_doc_date");

                entity.Property(e => e.ProductNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("product_number");

                entity.Property(e => e.ProductndsDocDate)
                    .HasPrecision(0)
                    .HasColumnName("productnds_doc_date");

                entity.Property(e => e.ProductndsNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("productnds_number");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<RoBlockRequisiteTask>(entity =>
            {
                entity.HasKey(e => e.BlockRequisiteTaskId)
                    .HasName("pk_block_requisite_task_id");

                entity.ToTable("ro_block_requisite_task");

                entity.Property(e => e.BlockRequisiteTaskId).HasColumnName("block_requisite_task_id");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.FinishTime)
                    .HasPrecision(0)
                    .HasColumnName("finish_time");

                entity.Property(e => e.InnListJson)
                    .HasColumnType("json")
                    .HasColumnName("inn_list_json");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoBlockRequisiteTasks)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoBlockRequisiteTasks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoBlockedRequisite>(entity =>
            {
                entity.HasKey(e => e.BlockedRequisiteId)
                    .HasName("ro_blocked_requisite_pkey");

                entity.ToTable("ro_blocked_requisite");

                entity.HasIndex(e => new { e.Inn, e.Kpp }, "idx_blocked_requisite_inn_kpp")
                    .IsUnique();

                entity.HasIndex(e => e.Ogrn, "idx_blocked_requisite_ogrn");

                entity.HasIndex(e => e.Snils, "idx_blocked_requisite_snils")
                    .IsUnique();

                entity.Property(e => e.BlockedRequisiteId)
                    .HasColumnName("blocked_requisite_id")
                    .HasComment("Ид");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания записи");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("first_name")
                    .HasComment("Имя");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("last_name")
                    .HasComment("Фамилия");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(64)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(128)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoBlockedRequisites)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_blocked_requisite_user_id");
            });

            modelBuilder.Entity<RoBonu>(entity =>
            {
                entity.HasKey(e => e.BonusId)
                    .HasName("pk_bonus");

                entity.ToTable("ro_bonus");

                entity.HasComment("Таблица премий");

                entity.HasIndex(e => e.BonusTypeId, "bonus_bonus_type_id_idx");

                entity.Property(e => e.BonusId)
                    .HasColumnName("bonus_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.BonusName)
                    .HasMaxLength(200)
                    .HasColumnName("bonus_name")
                    .HasComment("Наименование");

                entity.Property(e => e.BonusTypeId)
                    .HasColumnName("bonus_type_id")
                    .HasComment("Тип премии");

                entity.Property(e => e.BonusValue)
                    .HasPrecision(18, 2)
                    .HasColumnName("bonus_value")
                    .HasComment("Значение");

                entity.Property(e => e.MaxNumber)
                    .HasColumnName("max_number")
                    .HasComment("Максимальное количество");

                entity.Property(e => e.MinNumber)
                    .HasColumnName("min_number")
                    .HasComment("Минимальное количество");

                entity.Property(e => e.Percent)
                    .IsRequired()
                    .HasColumnName("percent")
                    .HasDefaultValueSql("true")
                    .HasComment("Относительная/абсолютная");

                entity.HasOne(d => d.BonusType)
                    .WithMany(p => p.RoBonus)
                    .HasForeignKey(d => d.BonusTypeId)
                    .HasConstraintName("fk_bonus_type");
            });

            modelBuilder.Entity<RoBonusType>(entity =>
            {
                entity.HasKey(e => e.BonusTypeId)
                    .HasName("pk_bonus_type");

                entity.ToTable("ro_bonus_type");

                entity.HasComment("Таблица типов премий");

                entity.HasIndex(e => e.BonusTypeName, "sk_bonus_type_name")
                    .IsUnique();

                entity.Property(e => e.BonusTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("bonus_type_id")
                    .HasComment("Код");

                entity.Property(e => e.BonusTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("bonus_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoBulkSkziLicenseUploadTask>(entity =>
            {
                entity.HasKey(e => e.BulkSkziLicenseUploadTaskId)
                    .HasName("pk_bulk_skzi_license_upload_task");

                entity.ToTable("ro_bulk_skzi_license_upload_task");

                entity.Property(e => e.BulkSkziLicenseUploadTaskId)
                    .HasColumnName("bulk_skzi_license_upload_task_id")
                    .HasDefaultValueSql("nextval('ro_bulk_skzi_license_upload_t_bulk_skzi_license_upload_task_seq'::regclass)");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.FinishTime)
                    .HasPrecision(0)
                    .HasColumnName("finish_time");

                entity.Property(e => e.LicenseListFileId).HasColumnName("license_list_file_id");

                entity.Property(e => e.LicensesPdfFileId).HasColumnName("licenses_pdf_file_id");

                entity.Property(e => e.MerchandiseId).HasColumnName("merchandise_id");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.LicenseListFile)
                    .WithMany(p => p.RoBulkSkziLicenseUploadTaskLicenseListFiles)
                    .HasForeignKey(d => d.LicenseListFileId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_license_list_file");

                entity.HasOne(d => d.LicensesPdfFile)
                    .WithMany(p => p.RoBulkSkziLicenseUploadTaskLicensesPdfFiles)
                    .HasForeignKey(d => d.LicensesPdfFileId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_licenses_pdf_file");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.RoBulkSkziLicenseUploadTasks)
                    .HasForeignKey(d => d.MerchandiseId)
                    .HasConstraintName("ro_bulk_skzi_license_upload_task_merchandise_id_fkey");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoBulkSkziLicenseUploadTasks)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoBulkSkziLicenseUploadTasks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoCa>(entity =>
            {
                entity.HasKey(e => e.CaId)
                    .HasName("pk_ca");

                entity.ToTable("ro_ca");

                entity.HasComment("Таблица центров сертификации");

                entity.HasIndex(e => e.DefaultCuid, "ca_default_cuid_idx");

                entity.HasIndex(e => e.Inn, "ca_inn_idx");

                entity.HasIndex(e => e.CaName, "sk_ca_name")
                    .IsUnique();

                entity.HasIndex(e => e.CertificateId, "sk_certificate")
                    .IsUnique();

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaName)
                    .HasMaxLength(100)
                    .HasColumnName("ca_name")
                    .HasComment("Наименование");

                entity.Property(e => e.CaShortName)
                    .HasMaxLength(255)
                    .HasColumnName("ca_short_name")
                    .HasComment("Внешнее имя");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Cертификат");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DefaultCuid)
                    .HasMaxLength(9)
                    .HasColumnName("default_cuid")
                    .IsFixedLength()
                    .HasComment("СМ по умолчанию");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН УЦ");

                entity.Property(e => e.IsCryptopro)
                    .HasColumnName("is_cryptopro")
                    .HasComment("Крипто ПРО");

                entity.Property(e => e.IsQualified)
                    .HasColumnName("is_qualified")
                    .HasComment("Квалифицированный");

                entity.Property(e => e.IsSolid)
                    .HasColumnName("is_solid")
                    .HasComment("Признак СУЦ(Солидный УЦ)");

                entity.Property(e => e.IssuerId)
                    .HasColumnName("issuer_id")
                    .HasComment("Издатель");

                entity.Property(e => e.Mnemonic)
                    .HasMaxLength(50)
                    .HasColumnName("mnemonic")
                    .HasComment("Мнемоника");

                entity.Property(e => e.NetNumber)
                    .HasMaxLength(4)
                    .HasColumnName("net_number")
                    .HasComment("Номер сети ViPNet");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.PolicyOid)
                    .HasMaxLength(40)
                    .HasColumnName("policy_oid")
                    .HasComment("Объектный идентификатор политики");

                entity.Property(e => e.PolicyUrl)
                    .HasMaxLength(100)
                    .HasColumnName("policy_url")
                    .HasComment("Адрес документа политики");

                entity.Property(e => e.PrefixDuc)
                    .HasMaxLength(3)
                    .HasColumnName("prefix_duc")
                    .HasComment("Префикс ДУЦ");

                entity.Property(e => e.SystemNameDuc)
                    .HasMaxLength(20)
                    .HasColumnName("system_name_duc")
                    .HasComment("Системное имя ДУЦ");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Certificate)
                    .WithOne(p => p.RoCa)
                    .HasForeignKey<RoCa>(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.DefaultCu)
                    .WithMany(p => p.RoCas)
                    .HasForeignKey(d => d.DefaultCuid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_default_cuid");

                entity.HasOne(d => d.Issuer)
                    .WithMany(p => p.RoCas)
                    .HasForeignKey(d => d.IssuerId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("issuer_fk");
            });

            modelBuilder.Entity<RoCaAccreditation>(entity =>
            {
                entity.HasKey(e => e.CaAccreditationId)
                    .HasName("ro_ca_accreditation_pk");

                entity.ToTable("ro_ca_accreditation");

                entity.HasComment("Таблица аккредитаций УЦ");

                entity.HasIndex(e => e.CaId, "ca_id_index");

                entity.Property(e => e.CaAccreditationId)
                    .HasColumnName("ca_accreditation_id")
                    .HasComment("Идентификатор аккредитации");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.ReceivedAt)
                    .HasPrecision(0)
                    .HasColumnName("received_at")
                    .HasComment("Дата получения аккредитации");

                entity.Property(e => e.RevokedAt)
                    .HasPrecision(0)
                    .HasColumnName("revoked_at")
                    .HasComment("Дата отзыва аккредитации");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoCaAccreditations)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("ca_fk");
            });

            modelBuilder.Entity<RoCaAction>(entity =>
            {
                entity.HasKey(e => e.ActionId)
                    .HasName("pk_ca_action");

                entity.ToTable("ro_ca_action");

                entity.HasComment("Действие на УЦ");

                entity.HasIndex(e => e.ActionDescription, "sk_ca_action")
                    .IsUnique();

                entity.Property(e => e.ActionId)
                    .ValueGeneratedNever()
                    .HasColumnName("action_id")
                    .HasComment("Код");

                entity.Property(e => e.ActionDescription)
                    .HasMaxLength(64)
                    .HasColumnName("action_description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<RoCaCertificate>(entity =>
            {
                entity.HasKey(e => new { e.CaId, e.CertificateId })
                    .HasName("pk_ca_certificate");

                entity.ToTable("ro_ca_certificate");

                entity.HasComment("Таблица сертификатов ЦС");

                entity.HasIndex(e => e.CaId, "ca_certificate_ca_id_idx");

                entity.HasIndex(e => e.CertificateId, "ca_certificate_certificate_id_idx");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Центр сертификации");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoCaCertificates)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoCaCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");
            });

            modelBuilder.Entity<RoCaMessenger>(entity =>
            {
                entity.HasKey(e => new { e.CaId, e.MessengerId })
                    .HasName("pk_ca_messenger");

                entity.ToTable("ro_ca_messenger");

                entity.HasComment("Таблица связи УЦ и курьеров");

                entity.HasIndex(e => e.CaId, "ca_messenger_ca_id_idx");

                entity.HasIndex(e => e.MessengerId, "ca_messenger_messenger_id_idx");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.CreateTime)
                    .HasPrecision(0)
                    .HasColumnName("create_time")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoCaMessengers)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoCaMessengers)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");
            });

            modelBuilder.Entity<RoCaProductType>(entity =>
            {
                entity.HasKey(e => new { e.CaId, e.ProductTypeId })
                    .HasName("pk_ca_product_type");

                entity.ToTable("ro_ca_product_type");

                entity.HasComment("Таблица разрешенных УЦ для типа программы");

                entity.HasIndex(e => e.CaId, "ca_product_type_ca_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "ca_product_type_product_type_id_idx");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип программы");

                entity.Property(e => e.IsDefault)
                    .HasColumnName("is_default")
                    .HasComment("Является УЦ по умолчанию для типа продукта");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения УЦ для типа продукта");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoCaProductTypes)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoCaProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<RoCaRequestApi>(entity =>
            {
                entity.HasKey(e => e.CaRequestApiId)
                    .HasName("pk_ca_request_api");

                entity.ToTable("ro_ca_request_api");

                entity.HasComment("API для запросов на сертификат");

                entity.HasIndex(e => e.CaId, "sk_ca_id")
                    .IsUnique();

                entity.Property(e => e.CaRequestApiId)
                    .ValueGeneratedNever()
                    .HasColumnName("ca_request_api_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.CallbackUrl)
                    .HasColumnName("callback_url")
                    .HasComment("Url отправки ответа (сертификата) от внешней системы");

                entity.Property(e => e.EntrypointUrl)
                    .HasColumnName("entrypoint_url")
                    .HasComment("Url для отправки запроса на сертификат");

                entity.Property(e => e.ExternalCaGuid)
                    .HasColumnName("external_ca_guid")
                    .HasComment("Идентификатор УЦ во внешней системе");

                entity.Property(e => e.OffTime)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("off_time")
                    .HasComment("неактивен (not null)");

                entity.HasOne(d => d.Ca)
                    .WithOne(p => p.RoCaRequestApi)
                    .HasForeignKey<RoCaRequestApi>(d => d.CaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ro_ca_request_api");
            });

            modelBuilder.Entity<RoCaService>(entity =>
            {
                entity.HasKey(e => new { e.CaServiceTypeId, e.SchemeId })
                    .HasName("idx_scheme_id_service_type_id");

                entity.ToTable("ro_ca_service");

                entity.HasIndex(e => e.CaServiceTypeId, "fki_ca_service_type_id");

                entity.HasIndex(e => e.SchemeId, "fki_scheme_id");

                entity.Property(e => e.CaServiceTypeId)
                    .HasColumnName("ca_service_type_id")
                    .HasComment("Тип услуги");

                entity.Property(e => e.SchemeId)
                    .HasColumnName("scheme_id")
                    .HasComment("Схема");

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.HasOne(d => d.CaServiceType)
                    .WithMany(p => p.RoCaServices)
                    .HasForeignKey(d => d.CaServiceTypeId)
                    .HasConstraintName("fk_ca_service_type_id");

                entity.HasOne(d => d.Scheme)
                    .WithMany(p => p.RoCaServices)
                    .HasForeignKey(d => d.SchemeId)
                    .HasConstraintName("fk_scheme_id");
            });

            modelBuilder.Entity<RoCaServiceType>(entity =>
            {
                entity.HasKey(e => e.CaServiceTypeId)
                    .HasName("ro_ca_service_type_pkey");

                entity.ToTable("ro_ca_service_type");

                entity.HasIndex(e => e.CaServiceTypeName, "idx_ca_service_type_name")
                    .IsUnique();

                entity.Property(e => e.CaServiceTypeId)
                    .HasColumnName("ca_service_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaServiceTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("ca_service_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoCaSetting>(entity =>
            {
                entity.HasKey(e => e.CaSettingId)
                    .HasName("pk_ca_setting");

                entity.ToTable("ro_ca_setting");

                entity.HasComment("Таблица настроек УЦ");

                entity.HasIndex(e => e.CaId, "ca_setting_ca_id_idx");

                entity.HasIndex(e => e.SettingId, "ca_setting_setting_id_idx");

                entity.Property(e => e.CaSettingId)
                    .HasColumnName("ca_setting_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.SettingValue)
                    .HasMaxLength(100)
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoCaSettings)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoCaSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");
            });

            modelBuilder.Entity<RoCaTemplate>(entity =>
            {
                entity.HasKey(e => e.TemplateId)
                    .HasName("pk_ca_template");

                entity.ToTable("ro_ca_template");

                entity.HasComment("Таблица шаблонов для УЦ");

                entity.HasIndex(e => e.CaId, "ca_template_ca_id_idx");

                entity.Property(e => e.TemplateId)
                    .HasColumnName("template_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Удостоверяющий центр");

                entity.Property(e => e.TemplateOid)
                    .HasMaxLength(100)
                    .HasColumnName("template_oid")
                    .HasComment("Идентификатор шаблона");

                entity.Property(e => e.TemplateTypeId)
                    .HasColumnName("template_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Идентификатор шаблона");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoCaTemplates)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.TemplateType)
                    .WithMany(p => p.RoCaTemplates)
                    .HasForeignKey(d => d.TemplateTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_template_type");
            });

            modelBuilder.Entity<RoCaTemplateAttribute>(entity =>
            {
                entity.HasKey(e => new { e.CaTemplateId, e.AttributeId })
                    .HasName("ro_ca_template_attribute_pk");

                entity.ToTable("ro_ca_template_attribute");

                entity.HasComment("Таблица атрибутов шаблонов УЦ");

                entity.HasIndex(e => e.CaTemplateId, "ca_template_attribute_template_idx");

                entity.HasIndex(e => e.AttributeId, "ro_ca_template_attribute_attribute_idx");

                entity.HasIndex(e => e.ValidityUnitId, "ro_ca_template_attribute_validity_unit_id_idx");

                entity.Property(e => e.CaTemplateId)
                    .HasColumnName("ca_template_id")
                    .HasComment("Шаблон УЦ");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Атрибут");

                entity.Property(e => e.Validity)
                    .HasColumnName("validity")
                    .HasComment("Срок действия");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Ед. времени срока");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.RoCaTemplateAttributes)
                    .HasForeignKey(d => d.AttributeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_attribute");

                entity.HasOne(d => d.CaTemplate)
                    .WithMany(p => p.RoCaTemplateAttributes)
                    .HasForeignKey(d => d.CaTemplateId)
                    .HasConstraintName("fk_template");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.RoCaTemplateAttributes)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_validity_unit");
            });

            modelBuilder.Entity<RoCaTemplateType>(entity =>
            {
                entity.HasKey(e => e.TemplateTypeId)
                    .HasName("ro_ca_template_type_pkey");

                entity.ToTable("ro_ca_template_type");

                entity.HasComment("Шаблоны Крипто про");

                entity.Property(e => e.TemplateTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("template_type_id")
                    .HasComment("Идентификатор шаблона");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(128)
                    .HasColumnName("template_name")
                    .HasComment("Наименование шаблона");
            });

            modelBuilder.Entity<RoCallbackRequest>(entity =>
            {
                entity.HasKey(e => e.RequestId)
                    .HasName("pk_callback_request");

                entity.ToTable("ro_callback_request");

                entity.HasComment("Таблица запросов обратных звонков в call-center");

                entity.HasIndex(e => e.CallbackRequestTypeId, "callback_request_callback_request_type_id_idx");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CallbackRequestTypeId)
                    .HasColumnName("callback_request_type_id")
                    .HasComment("Тип запроса на обратный звонок");

                entity.Property(e => e.CalloutId)
                    .HasColumnName("callout_id")
                    .HasComment("Номер задачи от call-center");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DiagReportId)
                    .HasMaxLength(11)
                    .HasColumnName("diag_report_id")
                    .HasComment("Идентификатор диагностического отчета");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН абонента");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Имя абонента");

                entity.Property(e => e.Phone)
                    .HasMaxLength(11)
                    .HasColumnName("phone")
                    .HasComment("Номер телефона");

                entity.HasOne(d => d.CallbackRequestType)
                    .WithMany(p => p.RoCallbackRequests)
                    .HasForeignKey(d => d.CallbackRequestTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_callback_request_type");
            });

            modelBuilder.Entity<RoCallbackRequestType>(entity =>
            {
                entity.HasKey(e => e.CallbackRequestTypeId)
                    .HasName("pk_callback_request_type");

                entity.ToTable("ro_callback_request_type");

                entity.HasComment("Таблица типов запросов на обратный звонок");

                entity.HasIndex(e => e.CallbackRequestTypeName, "sk_callback_request_type_name")
                    .IsUnique();

                entity.Property(e => e.CallbackRequestTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("callback_request_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CallbackRequestTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("callback_request_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("pk_category");

                entity.ToTable("ro_category");

                entity.HasComment("Таблица категорий абонентов");

                entity.HasIndex(e => e.CategoryName, "sk_category_name")
                    .IsUnique();

                entity.Property(e => e.CategoryId)
                    .ValueGeneratedNever()
                    .HasColumnName("category_id")
                    .HasComment("Код");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(40)
                    .HasColumnName("category_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoCcItsBalance>(entity =>
            {
                entity.HasKey(e => e.BalanceId)
                    .HasName("ro_competence_center_its_reward_pkey");

                entity.ToTable("ro_cc_its_balance");

                entity.HasIndex(e => new { e.AgentId, e.Year, e.Month }, "ro_competence_center_its_reward_idx")
                    .IsUnique();

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("ЦК");

                entity.Property(e => e.Month)
                    .HasColumnName("month")
                    .HasComment("Месяц");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("% вознаграждения");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasComment("Год");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoCcItsBalances)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("ro_competence_center_its_reward_fk");
            });

            modelBuilder.Entity<RoCcItsBalanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_cc_its_balance_detail");

                entity.HasIndex(e => new { e.BalanceId, e.AbonentId, e.ContractTariffId }, "ro_cc_its_balance_detail_idx")
                    .IsUnique();

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Идентификатор абонента");

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Идентификатор баланса");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Идентификатор тарифа по договору");

                entity.Property(e => e.IsIts)
                    .HasColumnName("is_its")
                    .HasComment("Позиция по вознаграждению за ИТС");

                entity.Property(e => e.SumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum_reward")
                    .HasComment("Сумма вознаграждения");

                entity.HasOne(d => d.Abonent)
                    .WithMany()
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("ro_cc_its_balance_detail_fk1");

                entity.HasOne(d => d.Balance)
                    .WithMany()
                    .HasForeignKey(d => d.BalanceId)
                    .HasConstraintName("ro_cc_its_balance_detail_fk");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany()
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("ro_cc_its_balance_detail_fk2");
            });

            modelBuilder.Entity<RoCemposRecipient>(entity =>
            {
                entity.HasKey(e => e.CemposRecipientId)
                    .HasName("ro_cempos_recipient_pkey");

                entity.ToTable("ro_cempos_recipient");

                entity.HasIndex(e => e.RegionCode, "idx_cempos_recipient_region_code");

                entity.Property(e => e.CemposRecipientId)
                    .HasColumnName("cempos_recipient_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид");

                entity.Property(e => e.City)
                    .HasMaxLength(100)
                    .HasColumnName("city")
                    .HasComment("Город");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Завершение перехода");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code")
                    .HasComment("Код");

                entity.Property(e => e.RecipientCodeOld)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code_old")
                    .HasComment("Старый код");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(150)
                    .HasColumnName("recipient_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(3)
                    .HasColumnName("region_code")
                    .HasComment("Код региона");
            });

            modelBuilder.Entity<RoCertTemplate>(entity =>
            {
                entity.HasKey(e => e.CertTemplateId)
                    .HasName("pk_cert_template");

                entity.ToTable("ro_cert_template");

                entity.HasComment("Таблица шаблонов сертификатов");

                entity.HasIndex(e => e.CertTemplateName, "sk_cert_template_name")
                    .IsUnique();

                entity.Property(e => e.CertTemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("cert_template_id")
                    .HasComment("Код");

                entity.Property(e => e.CertTemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("cert_template_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoCertTemplateEku>(entity =>
            {
                entity.HasKey(e => new { e.CertTemplateId, e.EkuId })
                    .HasName("pk_cert_template_eku");

                entity.ToTable("ro_cert_template_eku");

                entity.HasComment("Таблица расширений для шаблонов сертификатов");

                entity.HasIndex(e => e.CertTemplateId, "cert_template_eku_cert_template_id_idx");

                entity.HasIndex(e => e.EkuId, "cert_template_eku_eku_id_idx");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.EkuId)
                    .HasColumnName("eku_id")
                    .HasComment("Расширение");

                entity.Property(e => e.Required)
                    .HasColumnName("required")
                    .HasComment("Обязательное");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.RoCertTemplateEkus)
                    .HasForeignKey(d => d.CertTemplateId)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.Eku)
                    .WithMany(p => p.RoCertTemplateEkus)
                    .HasForeignKey(d => d.EkuId)
                    .HasConstraintName("fk_eku");
            });

            modelBuilder.Entity<RoCertTemplateProductType>(entity =>
            {
                entity.HasKey(e => new { e.CertTemplateId, e.ProductTypeId })
                    .HasName("pk_cert_template_product_type");

                entity.ToTable("ro_cert_template_product_type");

                entity.HasComment("Таблица разрешенных шаблонов сертификата для типа программы");

                entity.HasIndex(e => e.CertTemplateId, "cert_template_product_type_cert_template_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "cert_template_product_type_product_type_id_idx");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип программы");

                entity.Property(e => e.IsDefault).HasColumnName("is_default");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.RoCertTemplateProductTypes)
                    .HasForeignKey(d => d.CertTemplateId)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoCertTemplateProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<RoCertificate>(entity =>
            {
                entity.HasKey(e => e.CertificateId)
                    .HasName("pk_certificate");

                entity.ToTable("ro_certificate");

                entity.HasComment("Таблица сертификатов");

                entity.HasIndex(e => e.CertId, "certificate_cert_id_idx");

                entity.HasIndex(e => e.CertificateTypeId, "certificate_certificate_type_id_idx");

                entity.HasIndex(e => e.ReceiptId, "certificate_receipt_id_idx");

                entity.HasIndex(e => e.StepId, "certificate_step_id_idx");

                entity.HasIndex(e => e.SubjectKeyId, "certificate_subject_key_id_idx");

                entity.HasIndex(e => e.ThumbPrint, "certificate_thumb_print_idx");

                entity.HasIndex(e => e.TrustCertificateId, "certificate_trust_certificate_id_idx");

                entity.HasIndex(e => e.EndTime, "idx_certificate_end_time");

                entity.HasIndex(e => e.InitialTime, "idx_certificate_initial_time");

                entity.HasIndex(e => new { e.CommonName, e.ThumbPrint }, "sk_certificate_cn_tp")
                    .IsUnique();

                entity.HasIndex(e => e.CertificateGuid, "sk_certificate_guid")
                    .IsUnique();

                entity.HasIndex(e => new { e.SerialNumber, e.IssuerCommonName }, "sk_certificate_sn_icn")
                    .IsUnique();

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthorityKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("authority_key_id")
                    .HasComment("Идентификатор ключа издателя");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CertificateGuid)
                    .HasColumnName("certificate_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.CertificateTypeId)
                    .HasColumnName("certificate_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.CommonName)
                    .HasMaxLength(300)
                    .HasColumnName("common_name")
                    .HasComment("Общее имя");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.IssuerCommonName)
                    .HasMaxLength(255)
                    .HasColumnName("issuer_common_name")
                    .HasComment("Общее имя издателя");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ReceiptId)
                    .HasColumnName("receipt_id")
                    .HasComment("Печатная форма расписки");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(40)
                    .HasColumnName("serial_number")
                    .HasComment("Серийный номер");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.SubjectKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id")
                    .HasComment("Идентификатор ключа субъекта");

                entity.Property(e => e.ThumbPrint)
                    .HasMaxLength(40)
                    .HasColumnName("thumb_print")
                    .HasComment("Отпечаток");

                entity.Property(e => e.TrustCertificateId)
                    .HasColumnName("trust_certificate_id")
                    .HasComment("Корневой");

                entity.HasOne(d => d.CertificateType)
                    .WithMany(p => p.RoCertificates)
                    .HasForeignKey(d => d.CertificateTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate_type");

                entity.HasOne(d => d.Receipt)
                    .WithMany(p => p.RoCertificates)
                    .HasForeignKey(d => d.ReceiptId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_receipt");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoCertificates)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.TrustCertificate)
                    .WithMany(p => p.InverseTrustCertificate)
                    .HasForeignKey(d => d.TrustCertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_trust_certificate");
            });

            modelBuilder.Entity<RoCertificateInProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_certificate_in_product");

                entity.HasComment("Возвращает выборку всех сертов по продуктам");

                entity.Property(e => e.CertificateId).HasColumnName("certificate_id");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");
            });

            modelBuilder.Entity<RoCertificateIrudRegistration>(entity =>
            {
                entity.HasKey(e => e.CertificateRegistrationId)
                    .HasName("pk_certificate_registration_id");

                entity.ToTable("ro_certificate_irud_registration");

                entity.HasComment("Таблица состояний регистрации сертификатов в ИРУД");

                entity.HasIndex(e => e.CertificateId, "ro_certificate_irud_registration_certificate_id");

                entity.HasIndex(e => e.CertificateStateId, "ro_certificate_irud_registration_certificate_state_id");

                entity.HasIndex(e => e.ProductId, "ro_certificate_irud_registration_product_id");

                entity.HasIndex(e => e.CertificateRegistrationStepId, "ro_certificate_irud_registration_registration_step_id");

                entity.HasIndex(e => e.SosId, "ro_certificate_irud_registration_sos_id");

                entity.Property(e => e.CertificateRegistrationId)
                    .HasColumnName("certificate_registration_id")
                    .HasDefaultValueSql("nextval('ro_certificate_irud_registratio_certificate_registration_id_seq'::regclass)")
                    .HasComment("Идентификатор регистрации сертификата");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Идентификатор сертификата");

                entity.Property(e => e.CertificateRegistrationStepId)
                    .HasColumnName("certificate_registration_step_id")
                    .HasComment("Идентификатор статуса процесса регистрации сертификата");

                entity.Property(e => e.CertificateStateId)
                    .HasColumnName("certificate_state_id")
                    .HasComment("Идентификатор состояния сертификата в ИРУД");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.RegistrationTime)
                    .HasColumnName("registration_time")
                    .HasComment("Время регистрации сертификата");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("Идентификатор спецоператора");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoCertificateIrudRegistrations)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.CertificateRegistrationStep)
                    .WithMany(p => p.RoCertificateIrudRegistrationCertificateRegistrationSteps)
                    .HasForeignKey(d => d.CertificateRegistrationStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate_registration_step");

                entity.HasOne(d => d.CertificateState)
                    .WithMany(p => p.RoCertificateIrudRegistrationCertificateStates)
                    .HasForeignKey(d => d.CertificateStateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate_state");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoCertificateIrudRegistrations)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.RoCertificateIrudRegistrations)
                    .HasForeignKey(d => d.SosId)
                    .HasConstraintName("fk_sos");
            });

            modelBuilder.Entity<RoCertificateRequest>(entity =>
            {
                entity.HasKey(e => e.CertificateRequestId)
                    .HasName("pk_certificate_request");

                entity.ToTable("ro_certificate_request");

                entity.HasComment("Таблица запросов на сертификат");

                entity.HasIndex(e => e.CertRequestId, "certificate_request_cert_request_id_idx");

                entity.HasIndex(e => e.CertificateRequestGuid, "sk_certificate_request_guid")
                    .IsUnique();

                entity.Property(e => e.CertificateRequestId)
                    .HasColumnName("certificate_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CertificateRequestGuid)
                    .HasColumnName("certificate_request_guid")
                    .HasComment("Гуид");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Наименование");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasComment("КПП");

                entity.Property(e => e.PublicKey)
                    .HasMaxLength(128)
                    .HasColumnName("public_key")
                    .HasComment("Открытый ключ");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoCertificateRequests)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoCertificateRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ro_certificate_request_fk");
            });

            modelBuilder.Entity<RoCertificateRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.CertificateRequestId, e.StepId, e.LogTime })
                    .HasName("pk_certificate_request_step");

                entity.ToTable("ro_certificate_request_step");

                entity.HasComment("Таблица состояний продуктов");

                entity.Property(e => e.CertificateRequestId)
                    .HasColumnName("certificate_request_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.ErrorMsg)
                    .HasColumnType("character varying")
                    .HasColumnName("error_msg")
                    .HasComment("Ошибка");

                entity.Property(e => e.NextStepId)
                    .HasColumnName("next_step_id")
                    .HasComment("Следующее состояние");

                entity.Property(e => e.PreviousStepId)
                    .HasColumnName("previous_step_id")
                    .HasComment("Предыдущие состояние");

                entity.HasOne(d => d.CertificateRequest)
                    .WithMany(p => p.RoCertificateRequestSteps)
                    .HasForeignKey(d => d.CertificateRequestId)
                    .HasConstraintName("fk_certificate_request");

                entity.HasOne(d => d.NextStep)
                    .WithMany(p => p.RoCertificateRequestStepNextSteps)
                    .HasForeignKey(d => d.NextStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_next_step");

                entity.HasOne(d => d.PreviousStep)
                    .WithMany(p => p.RoCertificateRequestStepPreviousSteps)
                    .HasForeignKey(d => d.PreviousStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_previous_step");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoCertificateRequestStepSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoCertificateRevocation>(entity =>
            {
                entity.HasKey(e => e.CertificateId)
                    .HasName("pk_certificate_revocation");

                entity.ToTable("ro_certificate_revocation");

                entity.HasComment("Автоматический отзыв сертификата");

                entity.HasIndex(e => e.ActionId, "certificate_revocation_action_id_idx");

                entity.HasIndex(e => e.ReasonId, "certificate_revocation_reason_id_idx");

                entity.Property(e => e.CertificateId)
                    .ValueGeneratedNever()
                    .HasColumnName("certificate_id")
                    .HasComment("Отзываемый сертификат");

                entity.Property(e => e.ActionId)
                    .HasColumnName("action_id")
                    .HasComment("Действие");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.ReasonId)
                    .HasColumnName("reason_id")
                    .HasComment("Причина отзыва");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time")
                    .HasComment("Время начала действия");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.RoCertificateRevocations)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_action");

                entity.HasOne(d => d.Certificate)
                    .WithOne(p => p.RoCertificateRevocation)
                    .HasForeignKey<RoCertificateRevocation>(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.RoCertificateRevocations)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_revocation_reason");
            });

            modelBuilder.Entity<RoCertificateRevokeHistory>(entity =>
            {
                entity.HasKey(e => e.CertificateRevokeHistoryId)
                    .HasName("ro_certificate_revoke_history_pkey");

                entity.ToTable("ro_certificate_revoke_history");

                entity.Property(e => e.CertificateRevokeHistoryId)
                    .HasColumnName("certificate_revoke_history_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertificateRevokeId)
                    .HasColumnName("certificate_revoke_id")
                    .HasComment("Заявление на отзыв сертификата");

                entity.Property(e => e.ChangeTime)
                    .HasColumnName("change_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата изменения");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasComment("Имя файла");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус заявки");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, изменивший заявление");

                entity.HasOne(d => d.CertificateRevoke)
                    .WithMany(p => p.RoCertificateRevokeHistories)
                    .HasForeignKey(d => d.CertificateRevokeId)
                    .HasConstraintName("ro_certificate_revoke_history_fk1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoCertificateRevokeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ro_certificate_revoke_history_fk");
            });

            modelBuilder.Entity<RoCertificateRevokeRequest>(entity =>
            {
                entity.HasKey(e => e.CertificateRevokeRequestId)
                    .HasName("ro_certificate_revoke_request_pkey");

                entity.ToTable("ro_certificate_revoke_request");

                entity.Property(e => e.CertificateRevokeRequestId)
                    .HasColumnName("certificate_revoke_request_id")
                    .HasComment("Ид заявки на отзыв сертификата");

                entity.Property(e => e.BlockedTime)
                    .HasPrecision(0)
                    .HasColumnName("blocked_time")
                    .HasComment("Время блокировки");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Отозванный сертификат");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания заявки");

                entity.Property(e => e.Executor)
                    .HasColumnName("executor")
                    .HasComment("Сотрудник УЦ подтвердивший/отклонивший заявку");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Прикрепленный файл");

                entity.Property(e => e.Is1cEtpPartner)
                    .HasColumnName("is_1c_etp_partner")
                    .HasComment("Заявка от партнера 1С-ЭТП");

                entity.Property(e => e.IsShowEmploeeUc)
                    .HasColumnName("is_show_emploee_uc")
                    .HasDefaultValueSql("true")
                    .HasComment("Видимость заявки сотруднику УЦ");

                entity.Property(e => e.StepBeforeBlock)
                    .HasColumnName("step_before_block")
                    .HasComment("Статус до блокировки");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус заявки");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoCertificateRevokeRequests)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_certificate_revoke_request_certificate_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoCertificateRevokeRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_certificate_revoke_request_step_id");
            });

            modelBuilder.Entity<RoCertificateService>(entity =>
            {
                entity.HasKey(e => e.CertificateServiceId)
                    .HasName("pk_certificate_service_certificate_service_id");

                entity.ToTable("ro_certificate_service");

                entity.HasIndex(e => e.CertificateId, "idx_certificate_service_certificate_id");

                entity.HasIndex(e => e.StepId, "idx_certificate_service_step_id");

                entity.Property(e => e.CertificateServiceId)
                    .HasColumnName("certificate_service_id")
                    .HasDefaultValueSql("nextval('ro_certificate_service_service_id_seq'::regclass)")
                    .HasComment("Ид. сервиса");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Ид. сертификата");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Тип сертивиса");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoCertificateServices)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate_service_certificate_id");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.RoCertificateServices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("fk_certificate_service_service_type_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoCertificateServices)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_certificate_service_step_id");
            });

            modelBuilder.Entity<RoCertificateServiceSetting>(entity =>
            {
                entity.HasKey(e => new { e.CertificateServiceId, e.SettingId })
                    .HasName("pk_certificate_service_setting");

                entity.ToTable("ro_certificate_service_setting");

                entity.HasIndex(e => new { e.SettingId, e.Value }, "certificate_service_setting_setting_id_value");

                entity.HasIndex(e => e.CertificateServiceId, "idx_certificate_service_setting_certificate_service_id");

                entity.HasIndex(e => e.SettingId, "idx_certificate_service_setting_setting_id");

                entity.HasIndex(e => e.Value, "idx_certificate_service_setting_value");

                entity.Property(e => e.CertificateServiceId)
                    .HasColumnName("certificate_service_id")
                    .HasComment("Ид. сервиса");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .HasColumnName("value")
                    .HasComment("Значение настройки");

                entity.HasOne(d => d.CertificateService)
                    .WithMany(p => p.RoCertificateServiceSettings)
                    .HasForeignKey(d => d.CertificateServiceId)
                    .HasConstraintName("fk_certificate_service_setting_certificate_service_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoCertificateServiceSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_certificate_service_setting_setting_id");
            });

            modelBuilder.Entity<RoCertificateServiceStep>(entity =>
            {
                entity.HasKey(e => e.CertificateServiceStepId)
                    .HasName("pk_ro_certificate_service_step_id");

                entity.ToTable("ro_certificate_service_step");

                entity.HasIndex(e => e.CertificateServiceId, "idx_certificate_service_step_service_id");

                entity.Property(e => e.CertificateServiceStepId)
                    .HasColumnName("certificate_service_step_id")
                    .HasComment("Ид");

                entity.Property(e => e.CertificateServiceId)
                    .HasColumnName("certificate_service_id")
                    .HasComment("Ид. сервиса");

                entity.Property(e => e.LogTime)
                    .HasPrecision(6)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.HasOne(d => d.CertificateService)
                    .WithMany(p => p.RoCertificateServiceSteps)
                    .HasForeignKey(d => d.CertificateServiceId)
                    .HasConstraintName("fk_certificate_service_step_certificate_service_id");
            });

            modelBuilder.Entity<RoCertificateStep>(entity =>
            {
                entity.HasKey(e => new { e.CertificateId, e.StepId, e.LogTime })
                    .HasName("pk_certificate_step");

                entity.ToTable("ro_certificate_step");

                entity.HasComment("Таблица состояний сертификатов");

                entity.HasIndex(e => e.ActionId, "certificate_step_action_id_idx");

                entity.HasIndex(e => e.CertificateId, "certificate_step_certificate_id_idx");

                entity.HasIndex(e => e.ReasonId, "certificate_step_reason_id_idx");

                entity.HasIndex(e => e.StepId, "certificate_step_step_id_idx");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.ActionEndTime)
                    .HasPrecision(0)
                    .HasColumnName("action_end_time")
                    .HasComment("Дата и время окончания действия");

                entity.Property(e => e.ActionId)
                    .HasColumnName("action_id")
                    .HasComment("Идентификатор действия");

                entity.Property(e => e.ActionStartTime)
                    .HasPrecision(0)
                    .HasColumnName("action_start_time")
                    .HasComment("Дата и время начала действия");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ReasonId)
                    .HasColumnName("reason_id")
                    .HasComment("Идентификатор причины");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.RoCertificateSteps)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_action");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoCertificateSteps)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.RoCertificateSteps)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_reason");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoCertificateSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoCertificateTariff>(entity =>
            {
                entity.HasKey(e => e.CertificateTariffId)
                    .HasName("pk_certificate_tariff");

                entity.ToTable("ro_certificate_tariff");

                entity.HasComment("Таблица услуг УЦ");

                entity.HasIndex(e => e.AgentId, "certificate_tariff_agent_id_idx");

                entity.HasIndex(e => e.CertificateId, "certificate_tariff_certificate_id_idx");

                entity.HasIndex(e => e.ProductId, "certificate_tariff_product_id_idx");

                entity.HasIndex(e => e.StepId, "certificate_tariff_step_id_idx");

                entity.Property(e => e.CertificateTariffId)
                    .HasColumnName("certificate_tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum")
                    .HasComment("Сумма скидки");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount")
                    .HasComment("Процент скидки");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.Sum)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum")
                    .HasComment("Стоимость");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoCertificateTariffs)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoCertificateTariffs)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoCertificateTariffs)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoCertificateTariffs)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoCertificateTariffStep>(entity =>
            {
                entity.HasKey(e => new { e.CertificateTariffId, e.StepId, e.LogTime })
                    .HasName("pk_certificate_tariff_step");

                entity.ToTable("ro_certificate_tariff_step");

                entity.HasComment("Таблица состояний услуг УЦ");

                entity.HasIndex(e => e.CertificateTariffId, "certificate_tariff_step_certificate_tariff_id_idx");

                entity.HasIndex(e => e.StepId, "certificate_tariff_step_step_id_idx");

                entity.Property(e => e.CertificateTariffId)
                    .HasColumnName("certificate_tariff_id")
                    .HasComment("Услуга УЦ");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.CertificateTariff)
                    .WithMany(p => p.RoCertificateTariffSteps)
                    .HasForeignKey(d => d.CertificateTariffId)
                    .HasConstraintName("fk_certificate_tariff");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoCertificateTariffSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoCertificateType>(entity =>
            {
                entity.HasKey(e => e.CertificateTypeId)
                    .HasName("pk_certificate_type");

                entity.ToTable("ro_certificate_type");

                entity.HasComment("Таблица типов сертификатов");

                entity.HasIndex(e => e.CertificateTypeName, "sk_certificate_type_name")
                    .IsUnique();

                entity.Property(e => e.CertificateTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("certificate_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CertificateTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("certificate_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoCheckingMode>(entity =>
            {
                entity.HasKey(e => e.CheckingModeId)
                    .HasName("pk_checking_mode");

                entity.ToTable("ro_checking_mode");

                entity.HasComment("Таблица с режимами проверки");

                entity.Property(e => e.CheckingModeId)
                    .ValueGeneratedNever()
                    .HasColumnName("checking_mode_id")
                    .HasComment("Код");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание режима");

                entity.Property(e => e.Name)
                    .HasMaxLength(25)
                    .HasColumnName("name")
                    .HasComment("Название");
            });

            modelBuilder.Entity<RoCheckingScheme>(entity =>
            {
                entity.HasKey(e => e.SchemeId)
                    .HasName("pk_checking_scheme");

                entity.ToTable("ro_checking_scheme");

                entity.HasComment("Таблица схемы проверок");

                entity.HasIndex(e => e.CheckingModeId, "checking_scheme_checking_mode_id_idx");

                entity.HasIndex(e => e.CheckingTypeId, "checking_scheme_checking_type_id_idx");

                entity.HasIndex(e => e.OfficeId, "checking_scheme_office_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "checking_scheme_product_type_id_idx");

                entity.Property(e => e.SchemeId)
                    .HasColumnName("scheme_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CheckingModeId)
                    .HasColumnName("checking_mode_id")
                    .HasComment("Режим проверки");

                entity.Property(e => e.CheckingTypeId)
                    .HasColumnName("checking_type_id")
                    .HasComment("Тип проверки");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.CheckingMode)
                    .WithMany(p => p.RoCheckingSchemes)
                    .HasForeignKey(d => d.CheckingModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_checking_mode");

                entity.HasOne(d => d.CheckingType)
                    .WithMany(p => p.RoCheckingSchemes)
                    .HasForeignKey(d => d.CheckingTypeId)
                    .HasConstraintName("fk_checking_type");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoCheckingSchemes)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoCheckingSchemes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<RoCheckingType>(entity =>
            {
                entity.HasKey(e => e.CheckingTypeId)
                    .HasName("pk_checking_type");

                entity.ToTable("ro_checking_type");

                entity.HasComment("Таблица типов проверок");

                entity.HasIndex(e => e.CheckingTypeName, "sk_checking_type_name")
                    .IsUnique();

                entity.Property(e => e.CheckingTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("checking_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CheckingTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("checking_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoChildAgentViewAndAbonent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_child_agent_view_and_abonent");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.CompetentionCenterId).HasColumnName("competention_center_id");

                entity.Property(e => e.CompetentionCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("competention_center_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LevelId).HasColumnName("level_id");

                entity.Property(e => e.SaleCenterId).HasColumnName("sale_center_id");

                entity.Property(e => e.SaleCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("sale_center_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<RoChildAgentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_child_agents_view");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.CompetentionCenterId).HasColumnName("competention_center_id");

                entity.Property(e => e.CompetentionCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("competention_center_name");

                entity.Property(e => e.LevelId).HasColumnName("level_id");

                entity.Property(e => e.SaleCenterId).HasColumnName("sale_center_id");

                entity.Property(e => e.SaleCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("sale_center_name");
            });

            modelBuilder.Entity<RoCoefficient>(entity =>
            {
                entity.HasKey(e => e.CoefficientId)
                    .HasName("pk_coefficien_id");

                entity.ToTable("ro_coefficient");

                entity.HasComment("Сведения о ценах и налогах");

                entity.Property(e => e.CoefficientId)
                    .HasColumnName("coefficient_id")
                    .HasDefaultValueSql("nextval('ro_price_tax_price_id_seq'::regclass)");

                entity.Property(e => e.CoefficientTypeId)
                    .HasColumnName("coefficient_type_id")
                    .HasComment("Тип коэффициента (цена, налог)");

                entity.Property(e => e.MerchandiseId)
                    .HasColumnName("merchandise_id")
                    .HasComment("Ид номенклатуры");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasComment("Значение");
            });

            modelBuilder.Entity<RoCoefficientType>(entity =>
            {
                entity.HasKey(e => e.CoefficientTypeId)
                    .HasName("pk_coefficient_id");

                entity.ToTable("ro_coefficient_type");

                entity.HasComment("Типы цен и налогов");

                entity.Property(e => e.CoefficientTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("coefficient_type_id")
                    .HasComment("Тип коэффициента");

                entity.Property(e => e.CoefficientTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("coefficient_type_name")
                    .HasComment("Имя типа");
            });

            modelBuilder.Entity<RoComment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("ro_comment_pkey");

                entity.ToTable("ro_comment");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Идентификатор комментария");

                entity.Property(e => e.CommentText)
                    .HasColumnType("character varying")
                    .HasColumnName("comment_text")
                    .HasComment("Текст сообщения");
            });

            modelBuilder.Entity<RoCompanyGroup>(entity =>
            {
                entity.HasKey(e => e.CompanyGroupId)
                    .HasName("pk_company_group");

                entity.ToTable("ro_company_group");

                entity.HasComment("Таблица групп компаний");

                entity.HasIndex(e => e.AbonentId, "company_group_abonent_id_idx");

                entity.HasIndex(e => e.CompanyGroupName, "company_group_name_idx");

                entity.HasIndex(e => e.OfficeId, "company_group_office_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "company_group_product_type_id_idx");

                entity.HasIndex(e => e.CompanyGroupGuid, "ro_company_group_company_group_guid_key")
                    .IsUnique();

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Главная организация");

                entity.Property(e => e.CompanyGroupGuid)
                    .HasColumnName("company_group_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.CompanyGroupName)
                    .HasColumnType("character varying")
                    .HasColumnName("company_group_name")
                    .HasComment("Наименование");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoCompanyGroups)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoCompanyGroups)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoCompanyGroups)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasMany(d => d.Abonents)
                    .WithMany(p => p.CompanyGroups)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoCompanyGroupAbonent",
                        l => l.HasOne<RoAbonent>().WithMany().HasForeignKey("AbonentId").HasConstraintName("fk_abonent"),
                        r => r.HasOne<RoCompanyGroup>().WithMany().HasForeignKey("CompanyGroupId").HasConstraintName("fk_company_group"),
                        j =>
                        {
                            j.HasKey("CompanyGroupId", "AbonentId").HasName("pk_company_group_abonent");

                            j.ToTable("ro_company_group_abonent").HasComment("Таблица членов группы компаний");

                            j.HasIndex(new[] { "AbonentId" }, "company_group_abonent_abonent_id_idx");

                            j.HasIndex(new[] { "CompanyGroupId" }, "company_group_abonent_company_group_id_idx");

                            j.IndexerProperty<int>("CompanyGroupId").HasColumnName("company_group_id").HasComment("Группа компаний");

                            j.IndexerProperty<int>("AbonentId").HasColumnName("abonent_id").HasComment("Компания");
                        });
            });

            modelBuilder.Entity<RoCompetencyCenterReward>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_competency_center_reward");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward");
            });

            modelBuilder.Entity<RoCondition>(entity =>
            {
                entity.HasKey(e => e.ConditionId)
                    .HasName("pk_condition");

                entity.ToTable("ro_condition");

                entity.HasComment("Таблица условий");

                entity.HasIndex(e => e.ConditionGuid, "sk_condition")
                    .IsUnique();

                entity.Property(e => e.ConditionId)
                    .HasColumnName("condition_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ConditionGuid)
                    .HasColumnName("condition_guid")
                    .HasComment("ГУИД условия");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<RoConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_config");

                entity.HasComment("Таблица настроек");

                entity.Property(e => e.Key)
                    .HasColumnType("character varying")
                    .HasColumnName("key");

                entity.Property(e => e.Value)
                    .HasColumnType("character varying")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<RoContact>(entity =>
            {
                entity.HasKey(e => e.ContactId)
                    .HasName("pk_contact");

                entity.ToTable("ro_contact");

                entity.HasComment("Контактные данные");

                entity.HasIndex(e => e.ContactValue, "contact_contact_value_idx");

                entity.HasIndex(e => e.ProductId, "contact_product_id_idx");

                entity.HasIndex(e => e.TypeId, "contact_type_id_idx");

                entity.HasIndex(e => new { e.ProductId, e.TypeId, e.ContactValue }, "sk_contact")
                    .IsUnique();

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContactValue)
                    .HasMaxLength(100)
                    .HasColumnName("contact_value")
                    .HasComment("Данные контакта");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoContacts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoContacts)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contact_type");
            });

            modelBuilder.Entity<RoContactPerson>(entity =>
            {
                entity.HasKey(e => e.ContactPersonId)
                    .HasName("pk_contact_person");

                entity.ToTable("ro_contact_person");

                entity.HasComment("Контактные данные сотрудников");

                entity.HasIndex(e => e.ProductPersonId, "contact_person_product_person_id_idx");

                entity.HasIndex(e => e.TypeId, "contact_person_type_id_idx");

                entity.HasIndex(e => new { e.ProductPersonId, e.TypeId, e.ContactValue }, "sk_contact_person")
                    .IsUnique();

                entity.Property(e => e.ContactPersonId)
                    .HasColumnName("contact_person_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContactValue)
                    .HasMaxLength(100)
                    .HasColumnName("contact_value")
                    .HasComment("Данные контакта");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RoContactPeople)
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoContactPeople)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contact_type");
            });

            modelBuilder.Entity<RoContactPersonUse>(entity =>
            {
                entity.HasKey(e => new { e.ContactPersonId, e.TypeId })
                    .HasName("pk_contact__person_use");

                entity.ToTable("ro_contact_person_use");

                entity.HasComment("Использование контактов сотрудников");

                entity.HasIndex(e => e.ContactPersonId, "contact_person_use_contact_person_id_idx");

                entity.HasIndex(e => e.TypeId, "contact_person_use_type_id_idx");

                entity.Property(e => e.ContactPersonId)
                    .HasColumnName("contact_person_id")
                    .HasComment("Контакт сотрудника");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasDefaultValueSql("true")
                    .HasComment("Основной");

                entity.HasOne(d => d.ContactPerson)
                    .WithMany(p => p.RoContactPersonUses)
                    .HasForeignKey(d => d.ContactPersonId)
                    .HasConstraintName("fk_contact_person");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoContactPersonUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RoContactType>(entity =>
            {
                entity.HasKey(e => e.ContactTypeId)
                    .HasName("pk_contact_type");

                entity.ToTable("ro_contact_type");

                entity.HasComment("Тип контактных данных");

                entity.Property(e => e.ContactTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("contact_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ContactTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("contact_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoContactUse>(entity =>
            {
                entity.HasKey(e => new { e.ContactId, e.TypeId })
                    .HasName("pk_contact_use");

                entity.ToTable("ro_contact_use");

                entity.HasComment("Использование контактов");

                entity.HasIndex(e => e.ContactId, "contact_use_contact_id_idx");

                entity.HasIndex(e => e.TypeId, "contact_use_type_id_idx");

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Контакт");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasDefaultValueSql("true")
                    .HasComment("Основной");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.RoContactUses)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("fk_contact");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoContactUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RoContract>(entity =>
            {
                entity.HasKey(e => e.ContractId)
                    .HasName("pk_contract");

                entity.ToTable("ro_contract");

                entity.HasComment("Таблица договоров");

                entity.HasIndex(e => e.AbonentId, "contract_abonent_id_idx");

                entity.HasIndex(e => e.CompanyGroupId, "contract_company_group_id_idx");

                entity.HasIndex(e => e.ContractTypeId, "contract_contract_type_id_idx");

                entity.HasIndex(e => e.OfficeId, "contract_office_id_idx");

                entity.HasIndex(e => e.StepId, "contract_step_id_idx");

                entity.HasIndex(e => e.UserId, "contract_user_id_idx");

                entity.HasIndex(e => e.ContractGuid, "ro_contract_contract_guid_key")
                    .IsUnique();

                entity.HasIndex(e => new { e.AbonentId, e.ContractName }, "sk_abonent_contract_name")
                    .IsUnique();

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.ContractGuid)
                    .HasColumnName("contract_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.ContractName)
                    .HasMaxLength(50)
                    .HasColumnName("contract_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ContractTypeId)
                    .HasColumnName("contract_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.CreateTime)
                    .HasPrecision(0)
                    .HasColumnName("create_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.StartDate)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("start_date")
                    .HasComment("Дата начала");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.StepReason)
                    .HasColumnType("character varying")
                    .HasColumnName("step_reason")
                    .HasComment("Причина состояния");

                entity.Property(e => e.TariffZoneId)
                    .HasColumnName("tariff_zone_id")
                    .HasComment("Тарифная зона");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoContracts)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.RoContracts)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_company_group");

                entity.HasOne(d => d.ContractType)
                    .WithMany(p => p.RoContracts)
                    .HasForeignKey(d => d.ContractTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contract_type");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoContracts)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoContracts)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.TariffZone)
                    .WithMany(p => p.RoContracts)
                    .HasForeignKey(d => d.TariffZoneId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_tariff_zone");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoContracts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Licenses)
                    .WithMany(p => p.Contracts)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoContractLicense",
                        l => l.HasOne<RoLicensePool>().WithMany().HasForeignKey("LicenseId").HasConstraintName("fk_license_pool"),
                        r => r.HasOne<RoContract>().WithMany().HasForeignKey("ContractId").HasConstraintName("fk_contract"),
                        j =>
                        {
                            j.HasKey("ContractId", "LicenseId").HasName("pk_contract_license");

                            j.ToTable("ro_contract_license").HasComment("Таблица внешних лицензий договора");

                            j.HasIndex(new[] { "ContractId" }, "contract_license_contract_id_idx");

                            j.HasIndex(new[] { "LicenseId" }, "contract_license_license_id_idx");

                            j.IndexerProperty<int>("ContractId").HasColumnName("contract_id").HasComment("Договор");

                            j.IndexerProperty<int>("LicenseId").HasColumnName("license_id").HasComment("Лицензия");
                        });
            });

            modelBuilder.Entity<RoContractStep>(entity =>
            {
                entity.HasKey(e => new { e.ContractId, e.StepId, e.LogTime })
                    .HasName("pk_contract_step");

                entity.ToTable("ro_contract_step");

                entity.HasComment("Таблица состояний договоров");

                entity.HasIndex(e => e.ContractId, "contract_step_contract_id_idx");

                entity.HasIndex(e => e.StepId, "contract_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "contract_step_user_id_idx");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Договор");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.RoContractSteps)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("fk_contract");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoContractSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoContractSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoContractTariff>(entity =>
            {
                entity.HasKey(e => e.ContractTariffId)
                    .HasName("pk_contract_tariff");

                entity.ToTable("ro_contract_tariff");

                entity.HasComment("Таблица услуг по договору");

                entity.HasIndex(e => e.ContractId, "contract_tariff_contract_id_idx");

                entity.HasIndex(e => e.RegistrationNumber, "contract_tariff_registration_number_idx");

                entity.HasIndex(e => e.SectionId, "contract_tariff_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "contract_tariff_section_id_tariff_id_idx");

                entity.HasIndex(e => e.StepId, "contract_tariff_step_id_idx");

                entity.HasIndex(e => e.TariffId, "contract_tariff_tariff_id_idx");

                entity.HasIndex(e => e.UserId, "contract_tariff_user_id_idx");

                entity.HasIndex(e => e.EndDate, "idx_contract_tariff_end_date");

                entity.HasIndex(e => e.InitialDate, "idx_contract_tariff_initial_date");

                entity.HasIndex(e => e.RegistrationDate, "idx_registration_date");

                entity.HasIndex(e => e.ContractTariffGuid, "ro_contract_tariff_contract_tariff_guid_key")
                    .IsUnique();

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Договор");

                entity.Property(e => e.ContractTariffGuid)
                    .HasColumnName("contract_tariff_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.Cost)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost")
                    .HasComment("Затраты");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum")
                    .HasComment("Сумма скидки");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasDefaultValueSql("('now'::text)::date")
                    .HasComment("Дата начала");

                entity.Property(e => e.IsPrimary)
                    .HasColumnName("is_primary")
                    .HasComment("Первичный");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasDefaultValueSql("1")
                    .HasComment("Количество");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount")
                    .HasComment("Процент скидки");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.RegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("registration_date")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата регистрации");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number")
                    .HasComment("Регистрационный номер");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("16")
                    .HasComment("Состояние");

                entity.Property(e => e.Sum)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum")
                    .HasComment("Стоимость");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WaitingDays)
                    .HasColumnName("waiting_days")
                    .HasComment("Дни ожидания");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.RoContractTariffs)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("fk_contract");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.RoContractTariffs)
                    .HasForeignKey(d => d.SectionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoContractTariffs)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoContractTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoContractTariffs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.RoPriceTariff)
                    .WithMany(p => p.RoContractTariffs)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_price_tariff");

                entity.HasMany(d => d.Keys)
                    .WithMany(p => p.ContractTariffs)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoContractTariffKey",
                        l => l.HasOne<RoKey>().WithMany().HasForeignKey("KeyId").HasConstraintName("ro_contract_tariff_key_fk1"),
                        r => r.HasOne<RoContractTariff>().WithMany().HasForeignKey("ContractTariffId").HasConstraintName("ro_contract_tariff_key_fk"),
                        j =>
                        {
                            j.HasKey("ContractTariffId", "KeyId").HasName("pk_contract_tariff_key");

                            j.ToTable("ro_contract_tariff_key").HasComment("Таблица для фиксации факта выпуска сертификата по тарифу");

                            j.IndexerProperty<int>("ContractTariffId").HasColumnName("contract_tariff_id").HasComment("Тариф по договору");

                            j.IndexerProperty<int>("KeyId").HasColumnName("key_id").HasComment("Ключ");
                        });

                entity.HasMany(d => d.Products)
                    .WithMany(p => p.ContractTariffs)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoProductTariff",
                        l => l.HasOne<RoProduct>().WithMany().HasForeignKey("ProductId").HasConstraintName("fk_product"),
                        r => r.HasOne<RoContractTariff>().WithMany().HasForeignKey("ContractTariffId").HasConstraintName("fk_contract_tariff"),
                        j =>
                        {
                            j.HasKey("ContractTariffId", "ProductId").HasName("pk_product_tariff");

                            j.ToTable("ro_product_tariff").HasComment("Таблица услуг продукта");

                            j.HasIndex(new[] { "ContractTariffId" }, "product_tariff_contract_tariff_id_idx");

                            j.HasIndex(new[] { "ProductId" }, "product_tariff_product_id_idx");

                            j.IndexerProperty<int>("ContractTariffId").HasColumnName("contract_tariff_id").HasComment("Услуга по договору");

                            j.IndexerProperty<int>("ProductId").HasColumnName("product_id").HasComment("Продукт");
                        });
            });

            modelBuilder.Entity<RoContractTariffDiscount>(entity =>
            {
                entity.HasKey(e => new { e.ContractTariffId, e.DiscountId })
                    .HasName("pk_contract_tariff_discount");

                entity.ToTable("ro_contract_tariff_discount");

                entity.HasComment("Таблица скидок на покупки");

                entity.HasIndex(e => e.ContractTariffId, "contract_tariff_discount_contract_tariff_id_idx");

                entity.HasIndex(e => e.DiscountId, "contract_tariff_discount_discount_id_idx");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Тариф по договору");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum")
                    .HasComment("Сумма скидки");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount")
                    .HasComment("Процент скидки");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.RoContractTariffDiscounts)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.RoContractTariffDiscounts)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoContractTariffDiscounts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<RoContractTariffExtension>(entity =>
            {
                entity.HasKey(e => e.ExtensionId)
                    .HasName("pk_contract_tariff_extension");

                entity.ToTable("ro_contract_tariff_extension");

                entity.HasComment("Таблица расширений услуг продукта");

                entity.HasIndex(e => e.ContractTariffId, "contract_tariff_extension_contract_tariff_id_idx");

                entity.Property(e => e.ExtensionId)
                    .ValueGeneratedNever()
                    .HasColumnName("extension_id")
                    .HasComment("Расширение");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Главная услуга");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.RoContractTariffExtensionContractTariffs)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.Extension)
                    .WithOne(p => p.RoContractTariffExtensionExtension)
                    .HasForeignKey<RoContractTariffExtension>(d => d.ExtensionId)
                    .HasConstraintName("fk_extension");
            });

            modelBuilder.Entity<RoContractTariffStep>(entity =>
            {
                entity.HasKey(e => new { e.ContractTariffId, e.StepId, e.LogTime })
                    .HasName("pk_contract_tariff_step");

                entity.ToTable("ro_contract_tariff_step");

                entity.HasComment("Таблица состояний услуг по договорам");

                entity.HasIndex(e => e.ContractTariffId, "contract_tariff_step_contract_tariff_id_idx");

                entity.HasIndex(e => e.StepId, "contract_tariff_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "contract_tariff_step_user_id_idx");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Услуга по договору");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.RoContractTariffSteps)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoContractTariffSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoContractTariffSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoContractType>(entity =>
            {
                entity.HasKey(e => e.ContractTypeId)
                    .HasName("pk_contract_type");

                entity.ToTable("ro_contract_type");

                entity.HasComment("Таблица типов договоров");

                entity.HasIndex(e => e.ContractTypeName, "sk_contract_type_name")
                    .IsUnique();

                entity.Property(e => e.ContractTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("contract_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ContractTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("contract_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoCountry>(entity =>
            {
                entity.HasKey(e => e.CountryId)
                    .HasName("pk_country");

                entity.ToTable("ro_country");

                entity.HasComment("Таблица стран мира");

                entity.HasIndex(e => e.Alpha2Id, "sk_alpha2")
                    .IsUnique();

                entity.HasIndex(e => e.Alpha3Id, "sk_alpha3")
                    .IsUnique();

                entity.Property(e => e.CountryId)
                    .HasMaxLength(3)
                    .HasColumnName("country_id")
                    .HasComment("Цифровой код");

                entity.Property(e => e.Alpha2Id)
                    .HasMaxLength(2)
                    .HasColumnName("alpha2_id")
                    .HasComment("Буквенный код альфа-2");

                entity.Property(e => e.Alpha3Id)
                    .HasMaxLength(3)
                    .HasColumnName("alpha3_id")
                    .HasComment("Буквенный код альфа-3");

                entity.Property(e => e.FullName)
                    .HasMaxLength(200)
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(50)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");
            });

            modelBuilder.Entity<RoCrl>(entity =>
            {
                entity.HasKey(e => e.CrlId)
                    .HasName("pk_crl");

                entity.ToTable("ro_crl");

                entity.HasComment("Таблица списков анулированных сертификатов");

                entity.HasIndex(e => e.FileId, "crl_file_id_idx");

                entity.HasIndex(e => e.AuthorityKeyId, "sk_crl")
                    .IsUnique();

                entity.Property(e => e.CrlId)
                    .HasColumnName("crl_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthorityKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("authority_key_id")
                    .HasComment("Идентификатор ключа издателя");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.NextUpdate)
                    .HasPrecision(0)
                    .HasColumnName("next_update")
                    .HasComment("Дата следующего обновления");

                entity.Property(e => e.ProcessingDate)
                    .HasPrecision(0)
                    .HasColumnName("processing_date")
                    .HasComment("Дата обработки списка отзывов");

                entity.Property(e => e.ThisUpdate)
                    .HasPrecision(0)
                    .HasColumnName("this_update")
                    .HasComment("Дата текущего обновления");
            });

            modelBuilder.Entity<RoCrlLink>(entity =>
            {
                entity.HasKey(e => e.CrlLinkId)
                    .HasName("pk_crl_link");

                entity.ToTable("ro_crl_link");

                entity.HasComment("Таблица ссылок (URI) на списки анулированных сертификатов");

                entity.HasIndex(e => e.CrlId, "crl_link_crl_id_idx");

                entity.HasIndex(e => new { e.CrlId, e.Link }, "sk_crl_link")
                    .IsUnique();

                entity.Property(e => e.CrlLinkId)
                    .HasColumnName("crl_link_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CrlId)
                    .HasColumnName("crl_id")
                    .HasComment("Список");

                entity.Property(e => e.Link)
                    .HasColumnType("character varying")
                    .HasColumnName("link")
                    .HasComment("Ссылка");

                entity.HasOne(d => d.Crl)
                    .WithMany(p => p.RoCrlLinks)
                    .HasForeignKey(d => d.CrlId)
                    .HasConstraintName("fk_crl");
            });

            modelBuilder.Entity<RoCryptoStorage>(entity =>
            {
                entity.HasKey(e => e.CryptoStorageId)
                    .HasName("pk_crypto_storage");

                entity.ToTable("ro_crypto_storage");

                entity.HasComment("Таблица криптографических хранилищ");

                entity.HasIndex(e => e.CryptoStorageName, "sk_crypto_storage")
                    .IsUnique();

                entity.Property(e => e.CryptoStorageId)
                    .ValueGeneratedNever()
                    .HasColumnName("crypto_storage_id")
                    .HasComment("Код");

                entity.Property(e => e.CryptoStorageName)
                    .HasMaxLength(100)
                    .HasColumnName("crypto_storage_name")
                    .HasComment("Наименование");

                entity.Property(e => e.IsDefault).HasColumnName("is_default");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.RemoteAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("remote_address")
                    .HasComment("Адрес");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.RoCryptoStorages)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("fk_provider");
            });

            modelBuilder.Entity<RoCryptoStorageKey>(entity =>
            {
                entity.HasKey(e => e.CryptoStorageKeyId)
                    .HasName("pk_crypto_storage_key");

                entity.ToTable("ro_crypto_storage_key");

                entity.HasComment("Таблица ключей криптографического хранилища");

                entity.HasIndex(e => e.CryptoStorageId, "crypto_storage_key_crypto_storage_id_idx");

                entity.HasIndex(e => e.KeyId, "crypto_storage_key_key_id_idx");

                entity.HasIndex(e => new { e.KeyId, e.CryptoStorageId }, "sk_crypto_storage_key")
                    .IsUnique();

                entity.Property(e => e.CryptoStorageKeyId)
                    .HasColumnName("crypto_storage_key_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CryptoStorageId)
                    .HasColumnName("crypto_storage_id")
                    .HasComment("Хранилище");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.HasOne(d => d.CryptoStorage)
                    .WithMany(p => p.RoCryptoStorageKeys)
                    .HasForeignKey(d => d.CryptoStorageId)
                    .HasConstraintName("fk_reflex_type");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.RoCryptoStorageKeys)
                    .HasForeignKey(d => d.KeyId)
                    .HasConstraintName("fk_key");
            });

            modelBuilder.Entity<RoDiscount>(entity =>
            {
                entity.HasKey(e => e.DiscountId)
                    .HasName("pk_discount");

                entity.ToTable("ro_discount");

                entity.HasComment("Таблица скидок");

                entity.HasIndex(e => e.DiscountTypeId, "discount_discount_type_id_idx");

                entity.HasIndex(e => e.Article, "sk_discount_article")
                    .IsUnique();

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Article)
                    .HasMaxLength(40)
                    .HasColumnName("article")
                    .HasComment("Артикул");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.DiscountName)
                    .HasMaxLength(200)
                    .HasColumnName("discount_name")
                    .HasComment("Наименование");

                entity.Property(e => e.DiscountTypeId)
                    .HasColumnName("discount_type_id")
                    .HasComment("Тип скидки");

                entity.Property(e => e.DiscountValue)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_value")
                    .HasComment("Значение");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Время начала действия");

                entity.Property(e => e.MaxValue)
                    .HasPrecision(18, 2)
                    .HasColumnName("max_value")
                    .HasComment("Максимальное значение");

                entity.Property(e => e.MinValue)
                    .HasPrecision(18, 2)
                    .HasColumnName("min_value")
                    .HasComment("Минимальное значение");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.Percent)
                    .IsRequired()
                    .HasColumnName("percent")
                    .HasDefaultValueSql("true")
                    .HasComment("Относительная/абсолютная");

                entity.HasOne(d => d.DiscountType)
                    .WithMany(p => p.RoDiscounts)
                    .HasForeignKey(d => d.DiscountTypeId)
                    .HasConstraintName("fk_discount_type");
            });

            modelBuilder.Entity<RoDiscountType>(entity =>
            {
                entity.HasKey(e => e.DiscountTypeId)
                    .HasName("pk_discount_type");

                entity.ToTable("ro_discount_type");

                entity.HasComment("Таблица типов скидок");

                entity.HasIndex(e => e.DiscountTypeName, "sk_discount_type_name")
                    .IsUnique();

                entity.Property(e => e.DiscountTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("discount_type_id")
                    .HasComment("Код");

                entity.Property(e => e.DiscountTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("discount_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoDisqualifiedPerson>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("pk_record_id");

                entity.ToTable("ro_disqualified_person");

                entity.HasComment("Таблица с выгрузкой дисквалифицированных лиц");

                entity.HasIndex(e => e.BirthDate, "disqualified_person_birth_date_idx");

                entity.HasIndex(e => e.FullName, "disqualified_person_full_name_idx");

                entity.HasIndex(e => e.OrgInn, "disqualified_person_org_inn_idx");

                entity.Property(e => e.RecordId).HasColumnName("record_id");

                entity.Property(e => e.BirthDate)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения дисквалифицированного лица");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(256)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения дисквалифицированного лица");

                entity.Property(e => e.CodexClause)
                    .HasMaxLength(50)
                    .HasColumnName("codex_clause")
                    .HasComment("Статья КоАП РФ");

                entity.Property(e => e.DisqualificationEnd)
                    .HasColumnName("disqualification_end")
                    .HasComment("Дата истечения срока дисквалификации");

                entity.Property(e => e.DisqualificationStart)
                    .HasColumnName("disqualification_start")
                    .HasComment("Дата начала дисквалификации");

                entity.Property(e => e.DisqualificationTerm)
                    .HasMaxLength(20)
                    .HasColumnName("disqualification_term")
                    .HasComment("Срок дисквалификации");

                entity.Property(e => e.FullName)
                    .HasMaxLength(200)
                    .HasColumnName("full_name")
                    .HasComment("ФИО дисквалифицированного лица");

                entity.Property(e => e.JudgeFullName)
                    .HasMaxLength(200)
                    .HasColumnName("judge_full_name")
                    .HasComment("ФИО судьи");

                entity.Property(e => e.JudgePost)
                    .HasMaxLength(50)
                    .HasColumnName("judge_post")
                    .HasComment("Должность судьи");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasComment("№ п/п");

                entity.Property(e => e.OrgInn)
                    .HasMaxLength(12)
                    .HasColumnName("org_inn")
                    .HasComment("ИНН организации");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(200)
                    .HasColumnName("org_name")
                    .HasComment("Наименование организации");

                entity.Property(e => e.Post)
                    .HasMaxLength(50)
                    .HasColumnName("post")
                    .HasComment("Должность");

                entity.Property(e => e.ProtocolAgency)
                    .HasMaxLength(200)
                    .HasColumnName("protocol_agency")
                    .HasComment("Наименование органа, составившего протокол об административном правонарушении");

                entity.Property(e => e.RdlNumber)
                    .HasMaxLength(12)
                    .HasColumnName("rdl_number")
                    .HasComment("Номер записи РДЛ");
            });

            modelBuilder.Entity<RoDistributionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_distribution_view");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Distributor)
                    .HasMaxLength(200)
                    .HasColumnName("distributor");

                entity.Property(e => e.Inn).HasColumnName("inn");

                entity.Property(e => e.IsAuto).HasColumnName("is_auto");

                entity.Property(e => e.IsCompetencyCenter).HasColumnName("is_competency_center");

                entity.Property(e => e.IsIts).HasColumnName("is_its");

                entity.Property(e => e.IsItsProf).HasColumnName("is_its_prof");

                entity.Property(e => e.ItsAgentId).HasColumnName("its_agent_id");

                entity.Property(e => e.ItsEndDate)
                    .HasPrecision(0)
                    .HasColumnName("its_end_date");

                entity.Property(e => e.ItsExpired).HasColumnName("its_expired");

                entity.Property(e => e.ItsPartner)
                    .HasMaxLength(200)
                    .HasColumnName("its_partner");

                entity.Property(e => e.ItsRequerid).HasColumnName("its_requerid");

                entity.Property(e => e.ItsSaleCenterId).HasColumnName("its_sale_center_id");

                entity.Property(e => e.PartnerId).HasColumnName("partner_id");

                entity.Property(e => e.PartnerName)
                    .HasColumnType("character varying")
                    .HasColumnName("partner_name");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");

                entity.Property(e => e.RegistrationNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("registration_number");

                entity.Property(e => e.SaleCenterId).HasColumnName("sale_center_id");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<RoDoc>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("pk_doc");

                entity.ToTable("ro_doc");

                entity.HasComment("Таблица документов");

                entity.HasIndex(e => e.AbonentId, "doc_abonent_id_idx");

                entity.HasIndex(e => e.DocTypeId, "doc_doc_type_id_idx");

                entity.HasIndex(e => e.FileId, "doc_file_id_idx");

                entity.HasIndex(e => e.PassportTypeId, "doc_passport_type_id_idx");

                entity.HasIndex(e => e.UserId, "doc_user_id_idx");

                entity.HasIndex(e => new { e.DocId, e.AbonentId }, "sk_abonent")
                    .IsUnique();

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .IsRequired()
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.Addon)
                    .HasMaxLength(200)
                    .HasColumnName("addon")
                    .HasComment("Дополнение");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DocTypeId)
                    .HasColumnName("doc_type_id")
                    .HasComment("Вид документа");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasComment("Дата выдачи");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.Number)
                    .HasMaxLength(25)
                    .HasColumnName("number")
                    .HasComment("Номер документа");

                entity.Property(e => e.PassportTypeId)
                    .HasColumnName("passport_type_id")
                    .HasComment("Тип документа удостоверяющего личность");

                entity.Property(e => e.Series)
                    .HasMaxLength(25)
                    .HasColumnName("series")
                    .HasComment("Серия документа");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoDocs)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.RoDocs)
                    .HasForeignKey(d => d.DocTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_doc_type");

                entity.HasOne(d => d.PassportType)
                    .WithMany(p => p.RoDocs)
                    .HasForeignKey(d => d.PassportTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoDocs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoDocType>(entity =>
            {
                entity.HasKey(e => e.DocTypeId)
                    .HasName("pk_doc_type");

                entity.ToTable("ro_doc_type");

                entity.HasComment("Таблица видов документов");

                entity.HasIndex(e => e.DocTypeName, "sk_doc_type_name")
                    .IsUnique();

                entity.Property(e => e.DocTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("doc_type_id")
                    .HasComment("Код");

                entity.Property(e => e.DocTypeAlias)
                    .HasMaxLength(50)
                    .HasColumnName("doc_type_alias")
                    .HasComment("Псевдоним");

                entity.Property(e => e.DocTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("doc_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoDocumentType>(entity =>
            {
                entity.HasKey(e => e.DocumentTypeId)
                    .HasName("pk_document_type");

                entity.ToTable("ro_document_type");

                entity.HasComment("Таблица типов документов");

                entity.HasIndex(e => e.DocumentTypeName, "sk_document_type_name")
                    .IsUnique();

                entity.Property(e => e.DocumentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("document_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DocumentTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("document_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoDomainEvent>(entity =>
            {
                entity.HasKey(e => e.Guid)
                    .HasName("ro_domain_event_pkey");

                entity.ToTable("ro_domain_event");

                entity.HasComment("Таблица доменных событий");

                entity.HasIndex(e => e.IsPublished, "ro_domain_event_is_published_idx")
                    .HasFilter("(is_published = false)");

                entity.Property(e => e.Guid)
                    .HasColumnName("guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Идентификатор события");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.EventBody)
                    .HasColumnName("event_body")
                    .HasComment("Тело события");

                entity.Property(e => e.EventType)
                    .HasColumnName("event_type")
                    .HasComment("Тип события");

                entity.Property(e => e.IsPublished)
                    .HasColumnName("is_published")
                    .HasComment("Событие отправлено в шину");
            });

            modelBuilder.Entity<RoDss>(entity =>
            {
                entity.HasKey(e => e.DssId)
                    .HasName("pk_dss");

                entity.ToTable("ro_dss");

                entity.HasComment("DSS");

                entity.HasIndex(e => e.CertificateId, "dss_certificate_id_idx");

                entity.HasIndex(e => e.ProviderId, "dss_provider_id_idx");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AccountAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("account_address")
                    .HasComment("Адрес ЛК");

                entity.Property(e => e.ApiVer)
                    .HasColumnType("character varying")
                    .HasColumnName("api_ver")
                    .HasComment("Версия АПИ");

                entity.Property(e => e.AuthMethod)
                    .HasColumnName("auth_method")
                    .HasComment("Способ аутентификации");

                entity.Property(e => e.CaName)
                    .HasMaxLength(128)
                    .HasColumnName("ca_name")
                    .HasComment("Наименование УЦ");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат оператора");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(128)
                    .HasColumnName("client_id")
                    .HasComment("ИД клиента");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.ConfirmMethod)
                    .HasColumnName("confirm_method")
                    .HasComment("Способ подтверждения");

                entity.Property(e => e.ConfirmTemplate)
                    .HasColumnType("character varying")
                    .HasColumnName("confirm_template")
                    .HasComment("Шаблон подтверждения");

                entity.Property(e => e.CsAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("cs_address")
                    .HasComment("Адрес криптосервиса");

                entity.Property(e => e.DssHost)
                    .HasMaxLength(128)
                    .HasColumnName("dss_host")
                    .HasComment("Адрес");

                entity.Property(e => e.DssName)
                    .HasMaxLength(50)
                    .HasColumnName("dss_name")
                    .HasComment("Представление");

                entity.Property(e => e.EncryptUser)
                    .HasColumnType("character varying")
                    .HasColumnName("encrypt_user")
                    .HasComment("Открытый пользователь");

                entity.Property(e => e.EncryptUserPassword)
                    .HasMaxLength(64)
                    .HasColumnName("encrypt_user_password")
                    .HasDefaultValueSql("NULL::character varying")
                    .HasComment("Пароль открытого пользователя");

                entity.Property(e => e.InnerId)
                    .HasColumnType("character varying")
                    .HasColumnName("inner_id")
                    .HasComment("Внутренний идентификатор");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasDefaultValueSql("19")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.SignAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("sign_address")
                    .HasComment("Адрес СЭП");

                entity.Property(e => e.SignId)
                    .HasColumnType("character varying")
                    .HasColumnName("sign_id")
                    .HasComment("Идентификатор СЭП");

                entity.Property(e => e.StsAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("sts_address")
                    .HasComment("Адрес ЦИ");

                entity.Property(e => e.StsId)
                    .HasColumnType("character varying")
                    .HasColumnName("sts_id")
                    .HasComment("Идентификатор ЦИ");

                entity.Property(e => e.SvsAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("svs_address")
                    .HasComment("Адрес SVS");

                entity.Property(e => e.TemplateOid)
                    .HasMaxLength(128)
                    .HasColumnName("template_oid")
                    .HasComment("OID шаблона");

                entity.Property(e => e.Timeout)
                    .HasColumnName("timeout")
                    .HasDefaultValueSql("120")
                    .HasComment("Таймаут");

                entity.Property(e => e.Used)
                    .HasColumnName("used")
                    .HasComment("Используется");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoDsses)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.RoDsses)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_provider");
            });

            modelBuilder.Entity<RoDssAuth>(entity =>
            {
                entity.HasKey(e => e.AuthId)
                    .HasName("pk_dss_auth");

                entity.ToTable("ro_dss_auth");

                entity.HasComment("Таблица состояний аутентификации пользователей DSS");

                entity.HasIndex(e => e.CheckTime, "dss_auth_check_time_idx");

                entity.HasIndex(e => e.StepId, "dss_auth_step_id_idx");

                entity.HasIndex(e => e.UserId, "dss_auth_user_id_idx");

                entity.Property(e => e.AuthId)
                    .HasColumnName("auth_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthSystemId)
                    .HasColumnName("auth_system_id")
                    .HasDefaultValueSql("2")
                    .HasComment("Система аутентификации");

                entity.Property(e => e.CheckTime)
                    .HasPrecision(0)
                    .HasColumnName("check_time")
                    .HasComment("Время проверки");

                entity.Property(e => e.EndTime).HasColumnName("end_time");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Владелец ЭП");

                entity.Property(e => e.QrCodeId)
                    .HasColumnName("qr_code_id")
                    .HasComment("QR-код");

                entity.Property(e => e.Serial)
                    .HasColumnType("character varying")
                    .HasColumnName("serial")
                    .HasComment("Серийный номер");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Шаг аутентификации");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь DSS");

                entity.HasOne(d => d.AuthSystem)
                    .WithMany(p => p.RoDssAuths)
                    .HasForeignKey(d => d.AuthSystemId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_system");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RoDssAuths)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.QrCode)
                    .WithMany(p => p.RoDssAuths)
                    .HasForeignKey(d => d.QrCodeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_qr_code");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoDssAuths)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoDssAuths)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_dss_user");
            });

            modelBuilder.Entity<RoDssAuthKey>(entity =>
            {
                entity.ToTable("ro_dss_auth_key");

                entity.HasIndex(e => e.DssId, "dss_auth_key_dss_id_idx");

                entity.HasIndex(e => e.DssUserId, "dss_auth_key_dss_user_id_idx");

                entity.HasIndex(e => e.IdKey, "dss_auth_key_id_key_idx");

                entity.HasIndex(e => e.QrCodeId, "dss_auth_key_qr_code_id_idx");

                entity.HasIndex(e => e.StepId, "dss_auth_key_step_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasDefaultValueSql("1")
                    .HasComment("DSS");

                entity.Property(e => e.DssUserId)
                    .HasColumnName("dss_user_id")
                    .HasComment("Пользователь DSS");

                entity.Property(e => e.Expired)
                    .HasPrecision(0)
                    .HasColumnName("expired")
                    .HasComment("Срок действия");

                entity.Property(e => e.IdKey)
                    .HasMaxLength(32)
                    .HasColumnName("id_key")
                    .HasComment("Идентификатор ключа");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.QrCodeId)
                    .HasColumnName("qr_code_id")
                    .HasComment("QR-код");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.RoDssAuthKeys)
                    .HasForeignKey(d => d.DssId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.RoDssAuthKeys)
                    .HasForeignKey(d => d.DssUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_dss_user");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RoDssAuthKeys)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_member_id");

                entity.HasOne(d => d.QrCode)
                    .WithMany(p => p.RoDssAuthKeys)
                    .HasForeignKey(d => d.QrCodeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_file");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoDssAuthKeys)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoDssAuthKeyStep>(entity =>
            {
                entity.HasKey(e => new { e.DssAuthKeyId, e.StepId, e.LogTime })
                    .HasName("pk_dss_auth_key_step");

                entity.ToTable("ro_dss_auth_key_step");

                entity.HasComment("Таблица логов изменений статусов кодов аутентификации");

                entity.Property(e => e.DssAuthKeyId)
                    .HasColumnName("dss_auth_key_id")
                    .HasComment("Идентификатор кода аутентификации");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.Property(e => e.LogTime)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата изменения");

                entity.HasOne(d => d.DssAuthKey)
                    .WithMany(p => p.RoDssAuthKeySteps)
                    .HasForeignKey(d => d.DssAuthKeyId)
                    .HasConstraintName("fk_dss_auth_key");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoDssAuthKeySteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step_id");
            });

            modelBuilder.Entity<RoDssAuthMeth>(entity =>
            {
                entity.HasKey(e => e.MethId)
                    .HasName("pk_dss_auth_meth");

                entity.ToTable("ro_dss_auth_meth");

                entity.HasComment("Таблица методов аутентификации DSS");

                entity.Property(e => e.MethId)
                    .ValueGeneratedNever()
                    .HasColumnName("meth_id")
                    .HasComment("Флаг метода");

                entity.Property(e => e.AuthOrder)
                    .HasColumnName("auth_order")
                    .HasComment("Порядок метода");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<RoDssAuthMode>(entity =>
            {
                entity.HasKey(e => e.ModeId)
                    .HasName("pk_dss_auth_mode");

                entity.ToTable("ro_dss_auth_mode");

                entity.HasComment("Таблица режимов аутентификации пользователей DSS");

                entity.Property(e => e.ModeId)
                    .HasColumnName("mode_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ModeName)
                    .HasMaxLength(100)
                    .HasColumnName("mode_name")
                    .HasComment("Название режима");
            });

            modelBuilder.Entity<RoDssAuthStep>(entity =>
            {
                entity.ToTable("ro_dss_auth_step");

                entity.HasComment("Таблица истории состояний аутентификации пользователей DSS");

                entity.HasIndex(e => e.AuthId, "dss_auth_step_auth_id_idx");

                entity.HasIndex(e => e.StepId, "dss_auth_step_step_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthId)
                    .HasColumnName("auth_id")
                    .HasComment("Запись аутентификации");

                entity.Property(e => e.CheckTime)
                    .HasPrecision(0)
                    .HasColumnName("check_time")
                    .HasComment("Время проверки");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Срок действия ключа");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время шага");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Шаг аутентификации");

                entity.HasOne(d => d.Auth)
                    .WithMany(p => p.RoDssAuthSteps)
                    .HasForeignKey(d => d.AuthId)
                    .HasConstraintName("fk_auth");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoDssAuthSteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoDssAuthSystem>(entity =>
            {
                entity.HasKey(e => e.AuthSystemId)
                    .HasName("pk_dss_auth_system");

                entity.ToTable("ro_dss_auth_system");

                entity.HasComment("Система аутентификации DSS");

                entity.HasIndex(e => e.SystemAlias, "auth_system_system_alias_idx");

                entity.HasIndex(e => e.SystemId, "auth_system_system_id_idx");

                entity.Property(e => e.AuthSystemId)
                    .ValueGeneratedNever()
                    .HasColumnName("auth_system_id")
                    .HasComment("Идентификатор системы");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasComment("DSS");

                entity.Property(e => e.IsDefault)
                    .HasColumnName("is_default")
                    .HasComment("Используется по умолчанию");

                entity.Property(e => e.MethId)
                    .HasColumnName("meth_id")
                    .HasComment("Метод аутентификации");

                entity.Property(e => e.SystemAlias)
                    .HasMaxLength(128)
                    .HasColumnName("system_alias")
                    .HasComment("Псевдоним системы");

                entity.Property(e => e.SystemId)
                    .HasColumnType("character varying")
                    .HasColumnName("system_id")
                    .HasComment("Идентификатор системы в DSS");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.RoDssAuthSystems)
                    .HasForeignKey(d => d.DssId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.Meth)
                    .WithMany(p => p.RoDssAuthSystems)
                    .HasForeignKey(d => d.MethId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_meth");
            });

            modelBuilder.Entity<RoDssTariff>(entity =>
            {
                entity.HasKey(e => e.DssId)
                    .HasName("ro_dss_tariff_pk");

                entity.ToTable("ro_dss_tariff");

                entity.HasComment("Таблица тарифов для серверов DSS");

                entity.HasIndex(e => e.DssId, "ro_dss_tariff_dss_id_uindex")
                    .IsUnique();

                entity.Property(e => e.DssId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("dss_id")
                    .HasComment("Идентификатор сервера DSS");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Идентификатор тарифа");

                entity.HasOne(d => d.Dss)
                    .WithOne(p => p.RoDssTariff)
                    .HasForeignKey<RoDssTariff>(d => d.DssId)
                    .HasConstraintName("ro_dss_tariff_ro_dss_dss_id_fk");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoDssTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("ro_dss_tariff_ro_tariff_tariff_id_fk");
            });

            modelBuilder.Entity<RoDssUser>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("pk_dss_user");

                entity.ToTable("ro_dss_user");

                entity.HasComment("Таблица пользователей DSS");

                entity.HasIndex(e => e.DssId, "dss_user_dss_id_idx");

                entity.HasIndex(e => e.Email, "dss_user_email_idx");

                entity.HasIndex(e => e.GroupId, "dss_user_group_id_idx");

                entity.HasIndex(e => e.MobilePhone, "dss_user_mobile_phone_idx");

                entity.HasIndex(e => e.NextCheckTime, "dss_user_next_check_time_idx");

                entity.HasIndex(e => e.ProductId, "dss_user_product_id_idx");

                entity.HasIndex(e => e.UserName, "dss_user_user_name_idx");

                entity.HasIndex(e => new { e.UserName, e.DssId }, "sk_dss_user")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthContactTypeId)
                    .HasColumnName("auth_contact_type_id")
                    .HasComment("Тип контакта для аутентификации");

                entity.Property(e => e.AuthModeId)
                    .HasColumnName("auth_mode_id")
                    .HasComment("Режим аутентификации");

                entity.Property(e => e.AuthStepId)
                    .HasColumnName("auth_step_id")
                    .HasComment("Состояние аутентификации");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasDefaultValueSql("1")
                    .HasComment("DSS");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронная почта");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("Группа пользователей DSS");

                entity.Property(e => e.InstallDate)
                    .HasColumnName("install_date")
                    .HasComment("Время активации ключа в myDSS");

                entity.Property(e => e.LastInitialTime)
                    .HasPrecision(0)
                    .HasColumnName("last_initial_time")
                    .HasComment("Дата последней инициализации мобильной аутентификации");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(24)
                    .HasColumnName("mobile_phone")
                    .HasComment("Номер мобильного телефона");

                entity.Property(e => e.NextCheckTime)
                    .HasPrecision(0)
                    .HasColumnName("next_check_time")
                    .HasComment("Дата следующей проверки на отключение мобильной аутентификации");

                entity.Property(e => e.OffTime)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.Password)
                    .HasMaxLength(64)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт пользователя");

                entity.Property(e => e.QrcodeEndDate)
                    .HasPrecision(0)
                    .HasColumnName("qrcode_end_date")
                    .HasComment("Дата окончания действия кода");

                entity.Property(e => e.QrcodeFileId)
                    .HasColumnName("qrcode_file_id")
                    .HasComment("QR-код");

                entity.Property(e => e.StsUserId)
                    .HasColumnName("sts_user_id")
                    .HasComment("Идентификатор пользователя в ЦИ");

                entity.Property(e => e.UserName)
                    .HasMaxLength(36)
                    .HasColumnName("user_name")
                    .HasComment("Логин");

                entity.HasOne(d => d.AuthContactType)
                    .WithMany(p => p.RoDssUsers)
                    .HasForeignKey(d => d.AuthContactTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_contact_type");

                entity.HasOne(d => d.AuthMode)
                    .WithMany(p => p.RoDssUsers)
                    .HasForeignKey(d => d.AuthModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_mode");

                entity.HasOne(d => d.AuthStep)
                    .WithMany(p => p.RoDssUsers)
                    .HasForeignKey(d => d.AuthStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_step");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.RoDssUsers)
                    .HasForeignKey(d => d.DssId)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.RoDssUsers)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss_user_group");

                entity.HasOne(d => d.QrcodeFile)
                    .WithMany(p => p.RoDssUsers)
                    .HasForeignKey(d => d.QrcodeFileId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_qrcode_file");
            });

            modelBuilder.Entity<RoDssUserAuthStep>(entity =>
            {
                entity.ToTable("ro_dss_user_auth_step");

                entity.HasComment("Таблица состояний мобильной аутентификации пользователей DSS");

                entity.HasIndex(e => e.AuthStepId, "dss_auth_step_auth_step_id_idx");

                entity.HasIndex(e => e.DssUserId, "dss_auth_step_user_id_idx");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthStepId)
                    .HasColumnName("auth_step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.DssUserId)
                    .HasColumnName("dss_user_id")
                    .HasComment("Пользователь DSS");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.AuthStep)
                    .WithMany(p => p.RoDssUserAuthSteps)
                    .HasForeignKey(d => d.AuthStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_step");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.RoDssUserAuthSteps)
                    .HasForeignKey(d => d.DssUserId)
                    .HasConstraintName("fk_dss_user_id");
            });

            modelBuilder.Entity<RoDssUserGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("pk_dss_user_group");

                entity.ToTable("ro_dss_user_group");

                entity.HasComment("Таблица групп пользователей DSS");

                entity.HasIndex(e => e.DssId, "dss_user_group_dss_id_idx");

                entity.HasIndex(e => e.ValidityUnitId, "dss_user_group_validity_unit_id_idx");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasComment("DSS");

                entity.Property(e => e.GroupName)
                    .HasColumnType("character varying")
                    .HasColumnName("group_name")
                    .HasComment("Наименование");

                entity.Property(e => e.IsDefault)
                    .HasColumnName("is_default")
                    .HasComment("Группа по умолчанию");

                entity.Property(e => e.LicenseValidity)
                    .HasColumnName("license_validity")
                    .HasComment("Период действия лицензии");

                entity.Property(e => e.OffTime)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Единицы времени лицензии");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.RoDssUserGroups)
                    .HasForeignKey(d => d.DssId)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.RoDssUserGroups)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_validity_unit");
            });

            modelBuilder.Entity<RoEku>(entity =>
            {
                entity.HasKey(e => e.EkuId)
                    .HasName("pk_eku");

                entity.ToTable("ro_eku");

                entity.HasComment("Таблица расширений сертификата");

                entity.HasIndex(e => e.EkuName, "sk_eku_name")
                    .IsUnique();

                entity.HasIndex(e => e.EkuOid, "sk_eku_oid")
                    .IsUnique();

                entity.Property(e => e.EkuId)
                    .HasColumnName("eku_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.EkuName)
                    .HasMaxLength(150)
                    .HasColumnName("eku_name")
                    .HasComment("Наименование");

                entity.Property(e => e.EkuOid)
                    .HasMaxLength(100)
                    .HasColumnName("eku_oid")
                    .HasComment("Объектный идентификатор");

                entity.Property(e => e.Required)
                    .HasColumnName("required")
                    .HasComment("Обязательный");
            });

            modelBuilder.Entity<RoEmail>(entity =>
            {
                entity.HasKey(e => e.EmailId)
                    .HasName("ro_email_pkey");

                entity.ToTable("ro_email");

                entity.HasComment("Электронные адреса");

                entity.HasIndex(e => e.Email, "ro_email_email_key")
                    .IsUnique();

                entity.Property(e => e.EmailId)
                    .HasColumnName("email_id")
                    .HasComment("Идентификатор электронного адреса");

                entity.Property(e => e.Email)
                    .HasColumnType("character varying")
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");
            });

            modelBuilder.Entity<RoEntityType>(entity =>
            {
                entity.HasKey(e => e.EntityTypeId)
                    .HasName("pk_entity_type");

                entity.ToTable("ro_entity_type");

                entity.HasComment("Таблица видов объектов для обновления");

                entity.HasIndex(e => e.EntityTypeId, "entity_type_id_idx");

                entity.Property(e => e.EntityTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("entity_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Description)
                    .HasMaxLength(128)
                    .HasColumnName("description")
                    .HasComment("Описание");

                entity.Property(e => e.EntityTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("entity_type_name")
                    .HasComment("Название");
            });

            modelBuilder.Entity<RoExtremumAoContractTariffView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_extremum_ao_contract_tariff_view");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.FirstContractTariffId).HasColumnName("first_contract_tariff_id");

                entity.Property(e => e.LastContractTariffId).HasColumnName("last_contract_tariff_id");
            });

            modelBuilder.Entity<RoExtremumLicenseView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_extremum_license_view");

                entity.Property(e => e.MaxLicenseId).HasColumnName("max_license_id");

                entity.Property(e => e.MinLicenseId).HasColumnName("min_license_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<RoFeedbackRating>(entity =>
            {
                entity.HasKey(e => e.RatingId)
                    .HasName("pk_feedback_rating");

                entity.ToTable("ro_feedback_rating");

                entity.HasComment("Таблица возможных оценок при обратной связи");

                entity.Property(e => e.RatingId)
                    .ValueGeneratedNever()
                    .HasColumnName("rating_id")
                    .HasComment("Оценка");

                entity.Property(e => e.Label)
                    .HasColumnType("character varying")
                    .HasColumnName("label")
                    .HasComment("Название");
            });

            modelBuilder.Entity<RoFile>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("pk_file");

                entity.ToTable("ro_file");

                entity.HasComment("Таблица файлов");

                entity.HasIndex(e => e.FileTypeId, "file_file_type_id_idx");

                entity.HasIndex(e => e.UserId, "file_user_id_idx");

                entity.HasIndex(e => e.FileGuid, "sk_guid")
                    .IsUnique();

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CleaningTime)
                    .HasColumnName("cleaning_time")
                    .HasComment("Время удаления");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Data)
                    .HasColumnName("data")
                    .HasComment("Данные");

                entity.Property(e => e.FileGuid)
                    .HasColumnName("file_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.FileName)
                    .HasColumnType("character varying")
                    .HasColumnName("file_name")
                    .HasComment("Наименование");

                entity.Property(e => e.FileTypeId)
                    .HasColumnName("file_type_id")
                    .HasComment("Тип файла");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.RoFiles)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_file_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoFiles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoFileMask>(entity =>
            {
                entity.HasKey(e => e.FileMaskId)
                    .HasName("pk_file_mask");

                entity.ToTable("ro_file_mask");

                entity.HasComment("Таблица масок файлов");

                entity.HasIndex(e => e.MaskTemplate, "sk_file_mask")
                    .IsUnique();

                entity.Property(e => e.FileMaskId)
                    .ValueGeneratedNever()
                    .HasColumnName("file_mask_id")
                    .HasComment("Код");

                entity.Property(e => e.MaskTemplate)
                    .HasColumnType("character varying")
                    .HasColumnName("mask_template")
                    .HasComment("Шаблон");
            });

            modelBuilder.Entity<RoFileSignature>(entity =>
            {
                entity.HasKey(e => new { e.FileId, e.SignatureId })
                    .HasName("pk_file_signature");

                entity.ToTable("ro_file_signature");

                entity.HasComment("Таблица подписей файла");

                entity.HasIndex(e => e.FileId, "file_signature_file_id_idx");

                entity.HasIndex(e => e.SignatureId, "file_signature_signature_id_idx");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.SignatureId)
                    .HasColumnName("signature_id")
                    .HasComment("Подпись");
            });

            modelBuilder.Entity<RoFileType>(entity =>
            {
                entity.HasKey(e => e.FileTypeId)
                    .HasName("pk_file_type");

                entity.ToTable("ro_file_type");

                entity.HasComment("Таблица типов файлов");

                entity.HasIndex(e => e.FileTypeName, "sk_file_type_name")
                    .IsUnique();

                entity.Property(e => e.FileTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("file_type_id")
                    .HasComment("Код");

                entity.Property(e => e.FileExtension)
                    .HasMaxLength(10)
                    .HasColumnName("file_extension")
                    .HasComment("Расширение");

                entity.Property(e => e.FileTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("file_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoGate>(entity =>
            {
                entity.HasKey(e => e.GateId)
                    .HasName("pk_gate");

                entity.ToTable("ro_gate");

                entity.HasComment("Таблица шлюзов");

                entity.HasIndex(e => e.GateName, "sk_gate")
                    .IsUnique();

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("ГУИД");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.GateName)
                    .HasMaxLength(100)
                    .HasColumnName("gate_name")
                    .HasComment("Наименование");

                entity.Property(e => e.IsVirtual).HasColumnName("is_virtual");

                entity.Property(e => e.Password)
                    .HasMaxLength(128)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.SystemId).HasColumnName("system_id");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoGates)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_cert_id");

                entity.HasOne(d => d.System)
                    .WithMany(p => p.RoGates)
                    .HasForeignKey(d => d.SystemId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_gate_system_id");
            });

            modelBuilder.Entity<RoGateProductType>(entity =>
            {
                entity.HasKey(e => e.GateProductTypeId)
                    .HasName("pk_product_type_gate");

                entity.ToTable("ro_gate_product_type");

                entity.HasComment("Таблица систем обновлений");

                entity.Property(e => e.GateProductTypeId)
                    .HasColumnName("gate_product_type_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.RoGateProductTypes)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate_id");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoGateProductTypes)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office_id");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoGateProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type_id");
            });

            modelBuilder.Entity<RoGateProtocol>(entity =>
            {
                entity.HasKey(e => e.GateProtocolId)
                    .HasName("pk_gate_protocol");

                entity.ToTable("ro_gate_protocol");

                entity.HasComment("Таблица протоколов гейтов");

                entity.Property(e => e.GateProtocolId)
                    .HasColumnName("gate_protocol_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.RoGateProtocols)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate_id");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RoGateProtocols)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol_id");
            });

            modelBuilder.Entity<RoGateSetting>(entity =>
            {
                entity.HasKey(e => new { e.GateId, e.SettingId })
                    .HasName("pk_gate_setting");

                entity.ToTable("ro_gate_setting");

                entity.HasComment("Таблица настроек гейстов");

                entity.HasIndex(e => e.GateId, "gate_setting_gate_id_idx");

                entity.HasIndex(e => e.SettingId, "gate_setting_setting_id_idx");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.SettingValue)
                    .HasMaxLength(100)
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.RoGateSettings)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoGateSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting");
            });

            modelBuilder.Entity<RoGateUpdater>(entity =>
            {
                entity.HasKey(e => e.GateUpdaterId)
                    .HasName("pk_gate_updater");

                entity.ToTable("ro_gate_updater");

                entity.HasComment("Таблица обновлений объектов");

                entity.HasIndex(e => e.CreationTime, "gate_updater_creation_time_idx");

                entity.HasIndex(e => e.GateId, "gate_updater_gate_id_idx");

                entity.HasIndex(e => e.GateUpdaterId, "gate_updater_gate_updater_id_idx");

                entity.HasIndex(e => new { e.GateId, e.EntityGuid, e.EntityTypeId, e.CreationTime }, "sk_gate_updater")
                    .IsUnique();

                entity.Property(e => e.GateUpdaterId)
                    .HasColumnName("gate_updater_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ConfirmTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("confirm_time")
                    .HasComment("Время подтверждения обновления");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время обновления");

                entity.Property(e => e.EntityGuid)
                    .HasColumnName("entity_guid")
                    .HasComment("Гуид объекта");

                entity.Property(e => e.EntityTypeId)
                    .HasColumnName("entity_type_id")
                    .HasComment("Тип объекта");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.HasOne(d => d.EntityType)
                    .WithMany(p => p.RoGateUpdaters)
                    .HasForeignKey(d => d.EntityTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_entity_type");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.RoGateUpdaters)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate");
            });

            modelBuilder.Entity<RoGender>(entity =>
            {
                entity.HasKey(e => e.GenderId)
                    .HasName("pk_gender");

                entity.ToTable("ro_gender");

                entity.HasComment("Таблица полов");

                entity.HasIndex(e => e.GenderName, "sk_gender_name")
                    .IsUnique();

                entity.Property(e => e.GenderId)
                    .ValueGeneratedNever()
                    .HasColumnName("gender_id")
                    .HasComment("Код");

                entity.Property(e => e.GenderName)
                    .HasMaxLength(50)
                    .HasColumnName("gender_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoHolding>(entity =>
            {
                entity.HasKey(e => e.HoldingId)
                    .HasName("ro_holding_pkey");

                entity.ToTable("ro_holding");

                entity.HasIndex(e => new { e.OffTime, e.AbonentId, e.ParentAbonentId }, "idx_parend_abonent_id_abonent_id_off_time")
                    .IsUnique();

                entity.Property(e => e.HoldingId)
                    .HasColumnName("holding_id")
                    .HasComment("Ид");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Организация");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Время отключения");

                entity.Property(e => e.ParentAbonentId)
                    .HasColumnName("parent_abonent_id")
                    .HasComment("Головная организация");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoHoldingAbonents)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_ro_holding_holding_abonent_id");

                entity.HasOne(d => d.ParentAbonent)
                    .WithMany(p => p.RoHoldingParentAbonents)
                    .HasForeignKey(d => d.ParentAbonentId)
                    .HasConstraintName("fk_ro_holding_parent_abonent_id");
            });

            modelBuilder.Entity<RoHoldingAbonent>(entity =>
            {
                entity.HasKey(e => e.AbonentId)
                    .HasName("ro_holding_abonent_pkey");

                entity.ToTable("ro_holding_abonent");

                entity.HasIndex(e => new { e.OffTime, e.Kpp, e.Inn, e.AgentId }, "idx_ro_holding_abonent_inn_kpp_agetnt_1c_id_offtime")
                    .IsUnique();

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Ид");

                entity.Property(e => e.AgentId)
                    .HasMaxLength(20)
                    .HasColumnName("agent_id")
                    .HasComment("Ид партнёра 1С");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasComment("КПП");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Время отключения");
            });

            modelBuilder.Entity<RoInterview>(entity =>
            {
                entity.HasKey(e => e.InterviewId)
                    .HasName("pk_interview");

                entity.ToTable("ro_interview");

                entity.HasComment("Таблица опросов");

                entity.HasIndex(e => e.StepId, "interview_step_id_idx");

                entity.HasIndex(e => e.UserId, "interview_user_id_idx");

                entity.Property(e => e.InterviewId)
                    .HasColumnName("interview_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.MultySelect)
                    .HasColumnName("multy_select")
                    .HasComment("Множественный выбор");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("16")
                    .HasComment("Состояние");

                entity.Property(e => e.Subject)
                    .HasColumnType("character varying")
                    .HasColumnName("subject")
                    .HasComment("Содержание");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoInterviews)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoInterviews)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoInterviewAnswer>(entity =>
            {
                entity.HasKey(e => e.AnswerId)
                    .HasName("pk_interview_answer");

                entity.ToTable("ro_interview_answer");

                entity.HasComment("Таблица ответов");

                entity.HasIndex(e => e.InterviewId, "interview_answer_interview_id_idx");

                entity.HasIndex(e => new { e.InterviewId, e.AnswerValue }, "sk_interview_answer_value")
                    .IsUnique();

                entity.Property(e => e.AnswerId)
                    .HasColumnName("answer_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AnswerValue)
                    .HasColumnType("character varying")
                    .HasColumnName("answer_value")
                    .HasComment("Значение");

                entity.Property(e => e.InterviewId)
                    .HasColumnName("interview_id")
                    .HasComment("Опрос");

                entity.HasOne(d => d.Interview)
                    .WithMany(p => p.RoInterviewAnswers)
                    .HasForeignKey(d => d.InterviewId)
                    .HasConstraintName("fk_interview");

                entity.HasMany(d => d.Agents)
                    .WithMany(p => p.Answers)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoInterviewAgent",
                        l => l.HasOne<RoAgent>().WithMany().HasForeignKey("AgentId").HasConstraintName("fk_agent"),
                        r => r.HasOne<RoInterviewAnswer>().WithMany().HasForeignKey("AnswerId").HasConstraintName("fk_interview_answer"),
                        j =>
                        {
                            j.HasKey("AnswerId", "AgentId").HasName("pk_interview_agent");

                            j.ToTable("ro_interview_agent").HasComment("Таблица ответов партнеров");

                            j.HasIndex(new[] { "AgentId" }, "interview_agent_agent_id_idx");

                            j.HasIndex(new[] { "AnswerId" }, "interview_agent_answer_id_idx");

                            j.IndexerProperty<int>("AnswerId").HasColumnName("answer_id").HasComment("Ответ");

                            j.IndexerProperty<int>("AgentId").HasColumnName("agent_id").HasComment("Партнер");
                        });

                entity.HasMany(d => d.Users)
                    .WithMany(p => p.Answers)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoInterviewUser",
                        l => l.HasOne<RoUser>().WithMany().HasForeignKey("UserId").HasConstraintName("fk_user"),
                        r => r.HasOne<RoInterviewAnswer>().WithMany().HasForeignKey("AnswerId").HasConstraintName("fk_interview_answer"),
                        j =>
                        {
                            j.HasKey("AnswerId", "UserId").HasName("pk_interview_user");

                            j.ToTable("ro_interview_user").HasComment("Таблица ответов пользователя");

                            j.HasIndex(new[] { "AnswerId" }, "interview_user_answer_id_idx");

                            j.HasIndex(new[] { "UserId" }, "interview_user_user_id_idx");

                            j.IndexerProperty<int>("AnswerId").HasColumnName("answer_id").HasComment("Ответ");

                            j.IndexerProperty<int>("UserId").HasColumnName("user_id").HasComment("Пользователь");
                        });
            });

            modelBuilder.Entity<RoInterviewStep>(entity =>
            {
                entity.HasKey(e => new { e.InterviewId, e.StepId, e.LogTime })
                    .HasName("pk_interview_step");

                entity.ToTable("ro_interview_step");

                entity.HasComment("Таблица состояний опросов");

                entity.HasIndex(e => e.InterviewId, "interview_step_interview_id_idx");

                entity.HasIndex(e => e.StepId, "interview_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "interview_step_user_id_idx");

                entity.Property(e => e.InterviewId)
                    .HasColumnName("interview_id")
                    .HasComment("Опрос");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Interview)
                    .WithMany(p => p.RoInterviewSteps)
                    .HasForeignKey(d => d.InterviewId)
                    .HasConstraintName("fk_interview");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoInterviewSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoInterviewSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoInvoiceReturnType>(entity =>
            {
                entity.HasKey(e => e.InvoiceReturnTypeId)
                    .HasName("pk_invoice_return_type");

                entity.ToTable("ro_invoice_return_type");

                entity.Property(e => e.InvoiceReturnTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("invoice_return_type_id");

                entity.Property(e => e.InvoiceReturnTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_return_type_name");
            });

            modelBuilder.Entity<RoIp>(entity =>
            {
                entity.HasKey(e => e.IpId)
                    .HasName("pk_ip");

                entity.ToTable("ro_ip");

                entity.HasComment("Таблица IP серверов");

                entity.HasIndex(e => e.ServerId, "ip_server_id_idx");

                entity.HasIndex(e => new { e.IpAddress, e.ServerId }, "sk_ip_server")
                    .IsUnique();

                entity.Property(e => e.IpId)
                    .HasColumnName("ip_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IpAddress)
                    .HasColumnName("ip_address")
                    .HasComment("IP Адрес");

                entity.Property(e => e.ServerId)
                    .HasColumnName("server_id")
                    .HasComment("Сервер");

                entity.HasOne(d => d.Server)
                    .WithMany(p => p.RoIps)
                    .HasForeignKey(d => d.ServerId)
                    .HasConstraintName("fk_server");
            });

            modelBuilder.Entity<RoIrucAbonent>(entity =>
            {
                entity.HasKey(e => e.IrucAbonentId)
                    .HasName("pk_iruc_abonent");

                entity.ToTable("ro_iruc_abonent");

                entity.HasComment("Таблица абонентов ИРУЦ");

                entity.HasIndex(e => new { e.AbonentGuid, e.SystemPrefix, e.EmailLogin, e.DomainSoed }, "sk_iruc_abonent")
                    .IsUnique();

                entity.Property(e => e.IrucAbonentId)
                    .HasColumnName("iruc_abonent_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentGuid)
                    .HasColumnName("abonent_guid")
                    .HasComment("ГУИД абонента");

                entity.Property(e => e.DomainSoed)
                    .HasMaxLength(100)
                    .HasColumnName("domain_soed")
                    .HasComment("Домен СОЭД");

                entity.Property(e => e.EmailLogin)
                    .HasMaxLength(100)
                    .HasColumnName("email_login")
                    .HasComment("Логин");

                entity.Property(e => e.EmailPassword)
                    .HasMaxLength(40)
                    .HasColumnName("email_password")
                    .HasComment("Пароль");

                entity.Property(e => e.SystemPrefix)
                    .HasMaxLength(3)
                    .HasColumnName("system_prefix")
                    .IsFixedLength()
                    .HasComment("Префикс");
            });

            modelBuilder.Entity<RoIsExistRnsPfr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_is_exist_rns_pfr");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<RoIssuer>(entity =>
            {
                entity.HasKey(e => e.IssuerId)
                    .HasName("pk_issuer_id");

                entity.ToTable("ro_issuer");

                entity.HasComment("Издатели");

                entity.HasIndex(e => e.Inn, "ro_issuer_inn_uindex")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "ro_issuer_name_uindex")
                    .IsUnique();

                entity.Property(e => e.IssuerId)
                    .HasColumnName("issuer_id")
                    .HasComment("ИД издателя");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН издателя");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name")
                    .HasComment("Наименование издателя");
            });

            modelBuilder.Entity<RoIssuerAccreditation>(entity =>
            {
                entity.HasKey(e => e.IssuerAccreditationId)
                    .HasName("pk_issuer_accreditation_id");

                entity.ToTable("ro_issuer_accreditation");

                entity.HasComment("Таблица аккредитаций издателей");

                entity.Property(e => e.IssuerAccreditationId)
                    .HasColumnName("issuer_accreditation_id")
                    .HasComment("Идентификатор аккредитации");

                entity.Property(e => e.IssuerId)
                    .HasColumnName("issuer_id")
                    .HasComment("Издатель");

                entity.Property(e => e.ReceivedAt)
                    .HasPrecision(0)
                    .HasColumnName("received_at")
                    .HasComment("Дата получения аккредитации");

                entity.Property(e => e.RevokedAt)
                    .HasPrecision(0)
                    .HasColumnName("revoked_at")
                    .HasComment("Дата отзыва аккредитации");

                entity.HasOne(d => d.Issuer)
                    .WithMany(p => p.RoIssuerAccreditations)
                    .HasForeignKey(d => d.IssuerId)
                    .HasConstraintName("issuer_fk");
            });

            modelBuilder.Entity<RoIt>(entity =>
            {
                entity.HasKey(e => e.ItsId)
                    .HasName("pk_its_id");

                entity.ToTable("ro_its");

                entity.HasComment("Таблица рег-номеров подписки ИТС");

                entity.HasIndex(e => e.AgentId, "its_agent_id_idx");

                entity.HasIndex(e => e.RegionId, "its_region_id_idx");

                entity.HasIndex(e => e.ItsInn, "ro_its_its_inn_idx");

                entity.HasIndex(e => e.ItsInn, "ro_its_its_kpp_idx");

                entity.HasIndex(e => e.RegistrationNumber, "ro_its_registration_number_key")
                    .IsUnique();

                entity.Property(e => e.ItsId)
                    .HasColumnName("its_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.AgentInn)
                    .HasMaxLength(12)
                    .HasColumnName("agent_inn")
                    .HasComment("ИНН партнера");

                entity.Property(e => e.AgentKpp)
                    .HasMaxLength(9)
                    .HasColumnName("agent_kpp")
                    .HasComment("КПП партнера");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name")
                    .HasComment("Наименование партнера");

                entity.Property(e => e.Distributor)
                    .HasMaxLength(200)
                    .HasColumnName("distributor")
                    .HasComment("Дистрибьютор (ЦП)");

                entity.Property(e => e.DistributorInn)
                    .HasMaxLength(12)
                    .HasColumnName("distributor_inn")
                    .HasComment("ИНН ЦП");

                entity.Property(e => e.DistributorKpp)
                    .HasMaxLength(9)
                    .HasColumnName("distributor_kpp")
                    .HasComment("КПП ЦП");

                entity.Property(e => e.ItsCreationDate)
                    .HasPrecision(0)
                    .HasColumnName("its_creation_date")
                    .HasComment("Дата внесения подписки");

                entity.Property(e => e.ItsEndDate)
                    .HasPrecision(0)
                    .HasColumnName("its_end_date")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата окончания подписки");

                entity.Property(e => e.ItsInn)
                    .HasMaxLength(12)
                    .HasColumnName("its_inn")
                    .HasComment("ИНН");

                entity.Property(e => e.ItsKpp)
                    .HasMaxLength(9)
                    .HasColumnName("its_kpp")
                    .HasComment("КПП");

                entity.Property(e => e.ItsName)
                    .HasColumnType("character varying")
                    .HasColumnName("its_name")
                    .HasComment("Наименование организации-владельца");

                entity.Property(e => e.ItsPaid)
                    .HasColumnName("its_paid")
                    .HasComment("Платная");

                entity.Property(e => e.ItsPublishCount)
                    .HasColumnName("its_publish_count")
                    .HasComment("Выпусков");

                entity.Property(e => e.ItsPublishName)
                    .HasColumnType("character varying")
                    .HasColumnName("its_publish_name")
                    .HasComment("Издание");

                entity.Property(e => e.ItsStartDate)
                    .HasPrecision(0)
                    .HasColumnName("its_start_date")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата начала подписки");

                entity.Property(e => e.Locality)
                    .HasMaxLength(50)
                    .HasColumnName("locality")
                    .HasComment("Населенный пункт");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number")
                    .HasComment("Рег-номер подиски ИТС-Проф");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoIts)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoIts)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_region");

                entity.HasMany(d => d.ItsChildren)
                    .WithMany(p => p.ItsParents)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoItsAdditional",
                        l => l.HasOne<RoIt>().WithMany().HasForeignKey("ItsChildId").HasConstraintName("fk_its_child"),
                        r => r.HasOne<RoIt>().WithMany().HasForeignKey("ItsParentId").HasConstraintName("fk_its_parent"),
                        j =>
                        {
                            j.HasKey("ItsParentId", "ItsChildId").HasName("pk_ro_its_additional");

                            j.ToTable("ro_its_additional").HasComment("Таблица дополнительных рег-номеров подписки ИТС");

                            j.HasIndex(new[] { "ItsParentId" }, "ro_its_additional_its_parent_id_idx");

                            j.IndexerProperty<int>("ItsParentId").HasColumnName("its_parent_id").HasComment("Идентификатор родителького рег-номера");

                            j.IndexerProperty<int>("ItsChildId").HasColumnName("its_child_id").HasComment("Идентификатор дочернего рег-номера");
                        });

                entity.HasMany(d => d.ItsParents)
                    .WithMany(p => p.ItsChildren)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoItsAdditional",
                        l => l.HasOne<RoIt>().WithMany().HasForeignKey("ItsParentId").HasConstraintName("fk_its_parent"),
                        r => r.HasOne<RoIt>().WithMany().HasForeignKey("ItsChildId").HasConstraintName("fk_its_child"),
                        j =>
                        {
                            j.HasKey("ItsParentId", "ItsChildId").HasName("pk_ro_its_additional");

                            j.ToTable("ro_its_additional").HasComment("Таблица дополнительных рег-номеров подписки ИТС");

                            j.HasIndex(new[] { "ItsParentId" }, "ro_its_additional_its_parent_id_idx");

                            j.IndexerProperty<int>("ItsParentId").HasColumnName("its_parent_id").HasComment("Идентификатор родителького рег-номера");

                            j.IndexerProperty<int>("ItsChildId").HasColumnName("its_child_id").HasComment("Идентификатор дочернего рег-номера");
                        });
            });

            modelBuilder.Entity<RoItsDistributor>(entity =>
            {
                entity.HasKey(e => e.ItsDistributorName)
                    .HasName("pk_its_distributor");

                entity.ToTable("ro_its_distributor");

                entity.HasComment("Таблица дистрибьюторов ИТС");

                entity.Property(e => e.ItsDistributorName)
                    .HasColumnType("character varying")
                    .HasColumnName("its_distributor_name")
                    .HasComment("Наименование дистрибьютора");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("ЦП");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoItsDistributors)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_agent_id");
            });

            modelBuilder.Entity<RoItsHistory>(entity =>
            {
                entity.HasKey(e => e.ItsHistoryId)
                    .HasName("pk_its_history");

                entity.ToTable("ro_its_history");

                entity.HasComment("История подписок ИТС");

                entity.HasIndex(e => e.ItsId, "its_history_its_id_idx");

                entity.Property(e => e.ItsHistoryId)
                    .HasColumnName("its_history_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания");

                entity.Property(e => e.ItsId)
                    .HasColumnName("its_id")
                    .HasComment("ИТС");

                entity.Property(e => e.ItsPublishName)
                    .HasColumnType("character varying")
                    .HasColumnName("its_publish_name")
                    .HasComment("Издание");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasComment("Дата начала");

                entity.HasOne(d => d.Its)
                    .WithMany(p => p.RoItsHistories)
                    .HasForeignKey(d => d.ItsId)
                    .HasConstraintName("fk_its_history");
            });

            modelBuilder.Entity<RoItsProcessedFileHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_its_processed_file_history");

                entity.Property(e => e.FileName)
                    .HasMaxLength(64)
                    .HasColumnName("file_name")
                    .HasComment("Имя файла");

                entity.Property(e => e.ItsProcessedFileHistoryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("its_processed_file_history_id")
                    .HasComment("Идентификатор файла");

                entity.Property(e => e.ProcessedDate)
                    .HasPrecision(0)
                    .HasColumnName("processed_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обработки файла");
            });

            modelBuilder.Entity<RoItsProfSubscription>(entity =>
            {
                entity.HasKey(e => e.ItsSubscriptionId)
                    .HasName("pk_its_subscription");

                entity.ToTable("ro_its_prof_subscription");

                entity.HasComment("Таблица подписок ИТС-Проф");

                entity.Property(e => e.ItsSubscriptionId)
                    .HasColumnName("its_subscription_id")
                    .HasComment("Идентификатор ИТС подписки");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ItsPublishName)
                    .HasMaxLength(100)
                    .HasColumnName("its_publish_name")
                    .HasComment("Наименование ИТС подписки");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата отключения");
            });

            modelBuilder.Entity<RoItsStringNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_its_string_number");

                entity.Property(e => e.ChildNumbers).HasColumnName("child_numbers");

                entity.Property(e => e.ItsEndDate)
                    .HasPrecision(0)
                    .HasColumnName("its_end_date");

                entity.Property(e => e.ItsEndDateNormal).HasColumnName("its_end_date_normal");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number");
            });

            modelBuilder.Entity<RoKcrIssue>(entity =>
            {
                entity.HasKey(e => e.IssueId)
                    .HasName("ro_kcr_issue_pk");

                entity.ToTable("ro_kcr_issue");

                entity.HasComment("Выпуски КЦР");

                entity.Property(e => e.IssueId).HasColumnName("issue_id");

                entity.Property(e => e.AbonentTypeId).HasColumnName("abonent_type_id");

                entity.Property(e => e.Article).HasColumnName("article");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("expiry_date")
                    .HasComment("дата истечения срока действия договора");

                entity.Property(e => e.ExtensionGuid)
                    .HasColumnName("extension_guid")
                    .HasComment("id расширения");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("выпуск открыт");

                entity.Property(e => e.IssueGuid).HasColumnName("issue_guid");

                entity.Property(e => e.IssuedAmount)
                    .HasColumnName("issued_amount")
                    .HasComment("выпущенное количество КЭП");

                entity.Property(e => e.MaxAmount)
                    .HasColumnName("max_amount")
                    .HasComment("максимальное количество КЭП");

                entity.Property(e => e.PriceTariffGuid)
                    .HasColumnName("price_tariff_guid")
                    .HasComment("id тарифа на выпуск КЭП");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.SectionId).HasColumnName("section_id");

                entity.Property(e => e.TariffDiscountId).HasColumnName("tariff_discount_id");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RoKcrIssues)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoKcrIssues)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.TariffDiscount)
                    .WithMany(p => p.RoKcrIssues)
                    .HasForeignKey(d => d.TariffDiscountId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_tariff_discount");

                entity.HasOne(d => d.RoPriceTariff)
                    .WithMany(p => p.RoKcrIssues)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<RoKey>(entity =>
            {
                entity.HasKey(e => e.KeyId)
                    .HasName("pk_key");

                entity.ToTable("ro_key");

                entity.HasComment("Таблица ключей");

                entity.HasIndex(e => e.CaId, "key_ca_id_idx");

                entity.HasIndex(e => e.CertRequestId, "key_cert_request_id_idx");

                entity.HasIndex(e => e.CertificateId, "key_certificate_id_idx");

                entity.HasIndex(e => e.ContainerId, "key_container_id_idx");

                entity.HasIndex(e => e.PersonId, "key_person_id_idx");

                entity.HasIndex(e => e.ProviderId, "key_provider_id_idx");

                entity.HasIndex(e => e.TemplateId, "key_template_id_idx");

                entity.HasIndex(e => e.VipnetUserId, "key_vipnet_user_id_idx");

                entity.HasIndex(e => e.PackId, "sk_pack_id")
                    .IsUnique();

                entity.HasIndex(e => e.PublicKey, "sk_public_key")
                    .IsUnique();

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("ЦС");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.ContainerId)
                    .HasColumnName("container_id")
                    .HasComment("Контейнер");

                entity.Property(e => e.ContainerName)
                    .HasMaxLength(100)
                    .HasColumnName("container_name")
                    .HasComment("Наименование контейнера");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания");

                entity.Property(e => e.Eхportable)
                    .IsRequired()
                    .HasColumnName("eхportable")
                    .HasDefaultValueSql("true")
                    .HasComment("Экспортируемый ключ");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала");

                entity.Property(e => e.KeyPassword)
                    .HasMaxLength(20)
                    .HasColumnName("key_password")
                    .HasComment("Пароль");

                entity.Property(e => e.PackId)
                    .HasMaxLength(64)
                    .HasColumnName("pack_id")
                    .HasComment("Пакет");

                entity.Property(e => e.PasswordPhrase)
                    .HasMaxLength(100)
                    .HasColumnName("password_phrase")
                    .HasComment("Парольная фраза");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Физ. лицо");

                entity.Property(e => e.ProtectionClassId)
                    .HasColumnName("protection_class_id")
                    .HasComment("Класс защиты");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.PublicKey)
                    .HasMaxLength(256)
                    .HasColumnName("public_key")
                    .HasComment("Открытый ключ");

                entity.Property(e => e.TemplateId)
                    .HasColumnName("template_id")
                    .HasComment("Шаблон УЦ");

                entity.Property(e => e.VipnetUserId)
                    .HasMaxLength(8)
                    .HasColumnName("vipnet_user_id")
                    .IsFixedLength()
                    .HasComment("Пользователь ViPNet");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.CaId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.ContainerId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_container");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_person");

                entity.HasOne(d => d.ProtectionClass)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.ProtectionClassId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_protection_class");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_provider");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_template");

                entity.HasOne(d => d.VipnetUser)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.VipnetUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_vipnet_user");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.RoKeys)
                    .HasForeignKey(d => d.WorkflowId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RoKeyPermission>(entity =>
            {
                entity.HasKey(e => e.KeyPermissionId)
                    .HasName("pk_key_permission");

                entity.ToTable("ro_key_permission");

                entity.HasIndex(e => e.PermissionId, "key_permission_permission_id_idx");

                entity.HasIndex(e => e.PersonKeyId, "key_permission_person_key_id_idx");

                entity.Property(e => e.KeyPermissionId)
                    .HasColumnName("key_permission_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PermissionId)
                    .HasColumnName("permission_id")
                    .HasComment("Разрешение");

                entity.Property(e => e.PersonKeyId)
                    .HasColumnName("person_key_id")
                    .HasComment("Ключ владельца ЭП");

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.RoKeyPermissions)
                    .HasForeignKey(d => d.PermissionId)
                    .HasConstraintName("fk_permission");

                entity.HasOne(d => d.PersonKey)
                    .WithMany(p => p.RoKeyPermissions)
                    .HasForeignKey(d => d.PersonKeyId)
                    .HasConstraintName("fk_product_person_key");
            });

            modelBuilder.Entity<RoKeySerialNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_key_serial_number");

                entity.HasComment("Таблица связи ключ - серийный номер носителя");

                entity.HasIndex(e => new { e.KeyId, e.SerialNumber }, "sk_serial_number")
                    .IsUnique();

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(64)
                    .HasColumnName("serial_number")
                    .HasComment("Серийный номер носителя");

                entity.HasOne(d => d.Key)
                    .WithMany()
                    .HasForeignKey(d => d.KeyId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_key");
            });

            modelBuilder.Entity<RoKladr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_kladr");

                entity.HasComment("Таблица КЛАДР (4 уровня)");

                entity.HasIndex(e => e.Code, "ro_kladr_code");

                entity.Property(e => e.Code)
                    .HasMaxLength(13)
                    .HasColumnName("code")
                    .IsFixedLength();

                entity.Property(e => e.Gninmb)
                    .HasMaxLength(4)
                    .HasColumnName("gninmb")
                    .IsFixedLength()
                    .HasComment("Код ИФНС");

                entity.Property(e => e.Index)
                    .HasMaxLength(6)
                    .HasColumnName("index")
                    .IsFixedLength()
                    .HasComment("Индекс");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .HasColumnName("name")
                    .HasComment("Наименование");

                entity.Property(e => e.Ocatd)
                    .HasMaxLength(11)
                    .HasColumnName("ocatd")
                    .IsFixedLength()
                    .HasComment("ОКАТО");

                entity.Property(e => e.Socr)
                    .HasMaxLength(10)
                    .HasColumnName("socr")
                    .HasComment("Сокращение типа");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус");

                entity.Property(e => e.Uno)
                    .HasMaxLength(4)
                    .HasColumnName("uno")
                    .IsFixedLength()
                    .HasComment("Код тер. уч. ИФНС");
            });

            modelBuilder.Entity<RoLicense>(entity =>
            {
                entity.HasKey(e => e.LicenseId)
                    .HasName("pk_license");

                entity.ToTable("ro_license");

                entity.HasIndex(e => e.LicenseTypeId, "license_license_type_id_idx");

                entity.HasIndex(e => e.ProductId, "license_product_id_idx");

                entity.HasIndex(e => e.StepId, "license_step_id_idx");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания действия лицензии");

                entity.Property(e => e.IsActual)
                    .HasColumnName("is_actual")
                    .HasComment("Флаг актуальности");

                entity.Property(e => e.IsPrimary)
                    .HasColumnName("is_primary")
                    .HasComment("Флаг первой лицензии");

                entity.Property(e => e.LicenseGuid)
                    .HasColumnName("license_guid")
                    .HasComment("Гуид лицензии");

                entity.Property(e => e.LicenseTypeId)
                    .HasColumnName("license_type_id")
                    .HasComment("Ссылка на тип лицензии");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Ссылка на продукт");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время начала действия лицензии");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("16")
                    .HasComment("Состояние");

                entity.Property(e => e.TimeLimit)
                    .HasColumnName("time_limit")
                    .HasComment("Время ожидания");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.LicenseType)
                    .WithMany(p => p.RoLicenses)
                    .HasForeignKey(d => d.LicenseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ro_license_license_type_id_fkey");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoLicenses)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_license_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoLicenses)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoLicenseDetail>(entity =>
            {
                entity.HasKey(e => e.LicenseId)
                    .HasName("pk_license_detail");

                entity.ToTable("ro_license_detail");

                entity.HasComment("Таблица реквизитов лицензий");

                entity.HasIndex(e => e.ItsId, "license_detail_its_id_idx");

                entity.HasIndex(e => e.OfficeId, "license_detail_office_id_idx");

                entity.Property(e => e.LicenseId)
                    .ValueGeneratedNever()
                    .HasColumnName("license_id")
                    .HasComment("Лицензия");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.IsFree)
                    .HasColumnName("is_free")
                    .HasComment("Флаг бесплатной лицензии");

                entity.Property(e => e.ItsId)
                    .HasColumnName("its_id")
                    .HasComment("ИТС");

                entity.Property(e => e.ItsOptionId)
                    .HasMaxLength(50)
                    .HasColumnName("its_option_id")
                    .HasComment("Ид. опции ИТС");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Uin1c)
                    .HasMaxLength(50)
                    .HasColumnName("uin_1c")
                    .HasComment("Ид. пользователя 1С");

                entity.HasOne(d => d.Its)
                    .WithMany(p => p.RoLicenseDetails)
                    .HasForeignKey(d => d.ItsId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_its");

                entity.HasOne(d => d.License)
                    .WithOne(p => p.RoLicenseDetail)
                    .HasForeignKey<RoLicenseDetail>(d => d.LicenseId)
                    .HasConstraintName("fk_license_id");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoLicenseDetails)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<RoLicenseInProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_license_in_product");

                entity.HasComment("Возвращает выборку всех лицензий по продуктам");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.LicenseTypeId).HasColumnName("license_type_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time");
            });

            modelBuilder.Entity<RoLicensePool>(entity =>
            {
                entity.HasKey(e => e.LicenseId)
                    .HasName("pk_license_pool");

                entity.ToTable("ro_license_pool");

                entity.HasComment("Таблица пулов лицензий");

                entity.HasIndex(e => e.LicenseTypeId, "license_pool_license_type_id_idx");

                entity.HasIndex(e => e.StepId, "license_pool_step_id_idx");

                entity.HasIndex(e => new { e.LicenseTypeId, e.RegistrationNumber }, "sk_license_pool")
                    .IsUnique();

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.LicenseTypeId)
                    .HasColumnName("license_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.PinCode)
                    .HasColumnType("character varying")
                    .HasColumnName("pin_code")
                    .HasComment("ПИН код");

                entity.Property(e => e.RegistrationNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("registration_number")
                    .HasComment("Регистрационный номер");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("57")
                    .HasComment("Состояние");

                entity.HasOne(d => d.LicenseType)
                    .WithMany(p => p.RoLicensePools)
                    .HasForeignKey(d => d.LicenseTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_license_type_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoLicensePools)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoLicensePoolStep>(entity =>
            {
                entity.HasKey(e => new { e.LicenseId, e.StepId, e.LogTime })
                    .HasName("pk_license_pool_step");

                entity.ToTable("ro_license_pool_step");

                entity.HasComment("Таблица состояний лицензий в пуле");

                entity.HasIndex(e => e.LicenseId, "license_pool_step_license_id_idx");

                entity.HasIndex(e => e.StepId, "license_pool_step_step_id_idx");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasComment("Лицензия");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.License)
                    .WithMany(p => p.RoLicensePoolSteps)
                    .HasForeignKey(d => d.LicenseId)
                    .HasConstraintName("fk_license_pool");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoLicensePoolSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoLicenseStep>(entity =>
            {
                entity.HasKey(e => new { e.LicenseId, e.StepId, e.LogTime })
                    .HasName("pk_license_step");

                entity.ToTable("ro_license_step");

                entity.HasComment("Таблица состояний лицензий");

                entity.HasIndex(e => e.LicenseId, "license_step_license_id_idx");

                entity.HasIndex(e => e.StepId, "license_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "license_step_user_id_idx");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasComment("Лицензия");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.License)
                    .WithMany(p => p.RoLicenseSteps)
                    .HasForeignKey(d => d.LicenseId)
                    .HasConstraintName("fk_license");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoLicenseSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoLicenseSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoLicenseType>(entity =>
            {
                entity.HasKey(e => e.LicenseTypeId)
                    .HasName("pk_license_type");

                entity.ToTable("ro_license_type");

                entity.Property(e => e.LicenseTypeId).HasColumnName("license_type_id");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата время создания");

                entity.Property(e => e.LicenseTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("license_type_name")
                    .HasComment("Имя");
            });

            modelBuilder.Entity<RoLimit>(entity =>
            {
                entity.HasKey(e => e.LimitId)
                    .HasName("pk_limit");

                entity.ToTable("ro_limit");

                entity.HasComment("Таблица ограничений");

                entity.HasIndex(e => e.LimitGuid, "sk_limit_guid")
                    .IsUnique();

                entity.HasIndex(e => e.LimitName, "sk_limit_name")
                    .IsUnique();

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("Код");

                entity.Property(e => e.LimitGuid)
                    .HasColumnName("limit_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.LimitName)
                    .HasMaxLength(100)
                    .HasColumnName("limit_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoLog>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_log");

                entity.ToTable("ro_log");

                entity.HasComment("Таблица лога");

                entity.HasIndex(e => e.ApplicationId, "log_application_id_idx");

                entity.HasIndex(e => e.LogTime, "log_log_time_idx");

                entity.HasIndex(e => e.LogTypeId, "log_log_type_id_idx");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.LogCode)
                    .HasColumnName("log_code")
                    .HasComment("Код");

                entity.Property(e => e.LogMessage)
                    .HasColumnType("character varying")
                    .HasColumnName("log_message")
                    .HasComment("Сообщение");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("log_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.RoLogs)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.LogType)
                    .WithMany(p => p.RoLogs)
                    .HasForeignKey(d => d.LogTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_log_type");
            });

            modelBuilder.Entity<RoLogExtended>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_log_extended");

                entity.ToTable("ro_log_extended");

                entity.HasComment("Расширенная таблица логов");

                entity.HasIndex(e => e.EntityId, "log_extended_entity_id_idx")
                    .HasSortOrder(new[] { SortOrder.Descending });

                entity.HasIndex(e => e.LogTypeId, "ro_log_extended_type_id_idx");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasComment("ID таблицы");

                entity.Property(e => e.EntityId)
                    .HasColumnName("entity_id")
                    .HasComment("ID изменяемой сущности");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата операции");

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("log_type_id")
                    .HasComment("Тип операции");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasComment("Логгируемая операция");

                entity.Property(e => e.TableName)
                    .HasColumnType("character varying")
                    .HasColumnName("table_name")
                    .HasComment("Изменяемая таблица");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.LogType)
                    .WithMany(p => p.RoLogExtendeds)
                    .HasForeignKey(d => d.LogTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_log_type");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.RoLogExtendeds)
                    .HasForeignKey(d => d.OperationId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_log_extended_fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoLogExtendeds)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_log_extended_user");
            });

            modelBuilder.Entity<RoLogExtendedDetail>(entity =>
            {
                entity.HasKey(e => e.LogDetailId)
                    .HasName("pk_log_extended_detail");

                entity.ToTable("ro_log_extended_detail");

                entity.Property(e => e.LogDetailId)
                    .HasColumnName("log_detail_id")
                    .HasComment("ID таблицы");

                entity.Property(e => e.FieldName)
                    .HasColumnType("character varying")
                    .HasColumnName("field_name")
                    .HasComment("Наименование колонки изменяемой таблицы");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasComment("ID основного лога");

                entity.Property(e => e.NewBool)
                    .HasColumnName("new_bool")
                    .HasComment("Новое значение bool");

                entity.Property(e => e.NewDatetime)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("new_datetime")
                    .HasComment("Новое значение datetime");

                entity.Property(e => e.NewInt)
                    .HasColumnName("new_int")
                    .HasComment("Новое значение int");

                entity.Property(e => e.NewString)
                    .HasColumnType("character varying")
                    .HasColumnName("new_string")
                    .HasComment("Новое значение string");

                entity.Property(e => e.OldBool)
                    .HasColumnName("old_bool")
                    .HasComment("Старое значение bool");

                entity.Property(e => e.OldDatetime)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("old_datetime")
                    .HasComment("Старое значение datetime");

                entity.Property(e => e.OldInt)
                    .HasColumnName("old_int")
                    .HasComment("Старое значение int");

                entity.Property(e => e.OldString)
                    .HasColumnType("character varying")
                    .HasColumnName("old_string")
                    .HasComment("Старое значение string");

                entity.HasOne(d => d.Log)
                    .WithMany(p => p.RoLogExtendedDetails)
                    .HasForeignKey(d => d.LogId)
                    .HasConstraintName("fk_ro_log_extended");
            });

            modelBuilder.Entity<RoLogExtendedOperationDesc>(entity =>
            {
                entity.HasKey(e => e.OperationId)
                    .HasName("ro_log_extended_operation_desc_pkey");

                entity.ToTable("ro_log_extended_operation_desc");

                entity.HasComment("Описание операций логирования");

                entity.Property(e => e.OperationId).HasColumnName("operation_id");

                entity.Property(e => e.OperationDescription)
                    .HasColumnType("character varying")
                    .HasColumnName("operation_description");
            });

            modelBuilder.Entity<RoLogType>(entity =>
            {
                entity.HasKey(e => e.LogTypeId)
                    .HasName("pk_log_type");

                entity.ToTable("ro_log_type");

                entity.HasComment("Таблица типов лога");

                entity.HasIndex(e => e.LogTypeName, "sk_log_type_name")
                    .IsUnique();

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("log_type_id")
                    .HasDefaultValueSql("nextval(('public.ro_log_type_log_type_id_seq'::text)::regclass)")
                    .HasComment("Код");

                entity.Property(e => e.LogTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("log_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoLogV2>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_log_v2");

                entity.ToTable("ro_log_v2");

                entity.HasComment("Таблица лога");

                entity.HasIndex(e => e.ApplicationId, "log_v2_application_id_idx");

                entity.HasIndex(e => new { e.LogTime, e.ApplicationId }, "log_v2_log_time_application_id_idx")
                    .HasSortOrder(new[] { SortOrder.Descending, SortOrder.Ascending });

                entity.HasIndex(e => e.LogTypeId, "log_v2_log_type_id_idx");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AppInstance)
                    .HasMaxLength(50)
                    .HasColumnName("app_instance")
                    .HasComment("Имя хоста");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.LogCode)
                    .HasColumnName("log_code")
                    .HasComment("Код");

                entity.Property(e => e.LogMessage)
                    .HasColumnType("character varying")
                    .HasColumnName("log_message")
                    .HasComment("Сообщение");

                entity.Property(e => e.LogTime)
                    .HasPrecision(3)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("log_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.RoLogV2s)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.LogType)
                    .WithMany(p => p.RoLogV2s)
                    .HasForeignKey(d => d.LogTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_log_type");
            });

            modelBuilder.Entity<RoLoginFailAttempt>(entity =>
            {
                entity.HasKey(e => e.FailAttemptId)
                    .HasName("ro_login_fail_attempts_pkey");

                entity.ToTable("ro_login_fail_attempts");

                entity.HasIndex(e => new { e.UserName, e.AttemptDate }, "idx_login_fail_attempts_user_name_attempt_date");

                entity.Property(e => e.FailAttemptId)
                    .HasColumnName("fail_attempt_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AttemptDate)
                    .HasPrecision(0)
                    .HasColumnName("attempt_date")
                    .HasComment("Время попытки логина");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasColumnName("user_name")
                    .HasComment("Имя");
            });

            modelBuilder.Entity<RoMachineReadableProxyType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("pk_type");

                entity.ToTable("ro_machine_readable_proxy_type");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.TypeName)
                    .HasMaxLength(100)
                    .HasColumnName("type_name");
            });

            modelBuilder.Entity<RoMemberReserveKey>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("pk_member_reserve_key");

                entity.ToTable("ro_member_reserve_key");

                entity.HasComment("Таблица резервных ключей сотрудников");

                entity.HasIndex(e => e.CaId, "member_reserve_key_ca_id_idx");

                entity.HasIndex(e => e.CertRequestId, "member_reserve_key_cert_request_id_idx");

                entity.HasIndex(e => e.ProviderId, "member_reserve_key_provider_id_idx");

                entity.Property(e => e.MemberId)
                    .ValueGeneratedNever()
                    .HasColumnName("member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Ссылка на УЦ");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.ContainerName)
                    .HasMaxLength(50)
                    .HasColumnName("container_name")
                    .HasComment("Контейнер");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.SubjectKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id")
                    .HasComment("Идентификатор ключа субъекта");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoMemberReserveKeys)
                    .HasForeignKey(d => d.CaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.CertRequest)
                    .WithMany(p => p.RoMemberReserveKeys)
                    .HasForeignKey(d => d.CertRequestId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_cert_request");

                entity.HasOne(d => d.Member)
                    .WithOne(p => p.RoMemberReserveKey)
                    .HasForeignKey<RoMemberReserveKey>(d => d.MemberId)
                    .HasConstraintName("fk_member");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.RoMemberReserveKeys)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_provider");
            });

            modelBuilder.Entity<RoMerchandise>(entity =>
            {
                entity.HasKey(e => e.MerchandiseId)
                    .HasName("pk_merchandise_id");

                entity.ToTable("ro_merchandise");

                entity.HasComment("Номенклатура");

                entity.Property(e => e.MerchandiseId).HasColumnName("merchandise_id");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.MaxCount)
                    .HasColumnName("max_count")
                    .HasComment("Максимальное количество компаний");

                entity.Property(e => e.MeasureUnitCode)
                    .HasColumnName("measure_unit_code")
                    .HasComment("Код единицы измерения");

                entity.Property(e => e.MerchandiseSid)
                    .HasColumnType("character varying")
                    .HasColumnName("merchandise_sid")
                    .HasComment("Ид в базе 1С");

                entity.Property(e => e.MerchandiseTypeId)
                    .HasColumnName("merchandise_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.MinCount)
                    .HasColumnName("min_count")
                    .HasComment("Минимальное количество компаний");

                entity.Property(e => e.NdsPercent)
                    .HasPrecision(15, 2)
                    .HasColumnName("nds_percent");

                entity.Property(e => e.OffTime).HasColumnName("off_time");

                entity.Property(e => e.Price)
                    .HasPrecision(15, 2)
                    .HasColumnName("price");

                entity.Property(e => e.Reward)
                    .HasColumnName("reward")
                    .HasComment("Размер вознаграждения");

                entity.Property(e => e.ShortName)
                    .HasColumnType("character varying")
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.UnitFullName)
                    .HasColumnType("character varying")
                    .HasColumnName("unit_full_name")
                    .HasComment("Полное наименование единицы измерения");

                entity.Property(e => e.UnitShortName)
                    .HasColumnType("character varying")
                    .HasColumnName("unit_short_name")
                    .HasComment("Краткое наименование единицы измерения");

                entity.Property(e => e.Weight)
                    .HasPrecision(5, 3)
                    .HasColumnName("weight")
                    .HasComment("Вес(кг)");

                entity.HasOne(d => d.MerchandiseType)
                    .WithMany(p => p.RoMerchandises)
                    .HasForeignKey(d => d.MerchandiseTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_merchandise_merchandise_type_id");
            });

            modelBuilder.Entity<RoMerchandiseBill>(entity =>
            {
                entity.HasKey(e => e.MerchandiseBillId)
                    .HasName("pk_merchandise_bill");

                entity.ToTable("ro_merchandise_bill");

                entity.HasComment("Связь счетов и номенклатур");

                entity.Property(e => e.MerchandiseBillId).HasColumnName("merchandise_bill_id");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.MerchandiseId).HasColumnName("merchandise_id");

                entity.Property(e => e.Price)
                    .HasPrecision(15, 2)
                    .HasColumnName("price")
                    .HasComment("Стоимость");

                entity.Property(e => e.ScSumReward)
                    .HasPrecision(15, 2)
                    .HasColumnName("sc_sum_reward")
                    .HasComment("Вознаграждение ЦП");

                entity.Property(e => e.SumReward)
                    .HasPrecision(15, 2)
                    .HasColumnName("sum_reward")
                    .HasComment("Вознаграждение");

                entity.Property(e => e.TotalSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("total_sum");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.RoMerchandiseBills)
                    .HasForeignKey(d => d.BillId)
                    .HasConstraintName("gr");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.RoMerchandiseBills)
                    .HasForeignKey(d => d.MerchandiseId)
                    .HasConstraintName("fk_merchandise");
            });

            modelBuilder.Entity<RoMerchandiseGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("pk_group_id");

                entity.ToTable("ro_merchandise_group");

                entity.Property(e => e.GroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("group_id");

                entity.Property(e => e.GroupCid)
                    .HasColumnType("character varying")
                    .HasColumnName("group_cid")
                    .HasComment("Ид группы в 1С");

                entity.Property(e => e.GroupName)
                    .HasColumnType("character varying")
                    .HasColumnName("group_name")
                    .HasComment("Имя группы товаров");

                entity.Property(e => e.MerchandiseGroupTypeId)
                    .HasColumnName("merchandise_group_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Родительская группа");

                entity.HasOne(d => d.MerchandiseGroupType)
                    .WithMany(p => p.RoMerchandiseGroups)
                    .HasForeignKey(d => d.MerchandiseGroupTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_merchandise_group_type_id");
            });

            modelBuilder.Entity<RoMerchandiseGroupItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_merchandise_group_items");

                entity.HasComment("Членство расширений в группах");

                entity.HasIndex(e => new { e.GroupId, e.MerchandiseId, e.IsRequired }, "ro_merchandise_group_items_group_id_merchandise_id_is_requi_key")
                    .IsUnique();

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("Id группы");

                entity.Property(e => e.IsRequired)
                    .HasColumnName("is_required")
                    .HasComment("Обязательное расширение");

                entity.Property(e => e.MerchandiseId)
                    .HasColumnName("merchandise_id")
                    .HasComment("Id расширения");

                entity.HasOne(d => d.Group)
                    .WithMany()
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_merchandise_group_items_group_id_fkey");

                entity.HasOne(d => d.Merchandise)
                    .WithMany()
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_merchandise_group_items_merchandise_id_fkey");
            });

            modelBuilder.Entity<RoMerchandiseGroupType>(entity =>
            {
                entity.HasKey(e => e.MerchandiseGroupTypeId)
                    .HasName("ro_merchandise_group_type_pkey");

                entity.ToTable("ro_merchandise_group_type");

                entity.Property(e => e.MerchandiseGroupTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("merchandise_group_type_id")
                    .HasComment("Ид");

                entity.Property(e => e.MerchandiseGroupTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("merchandise_group_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoMerchandiseType>(entity =>
            {
                entity.HasKey(e => e.MerchandiseTypeId)
                    .HasName("ro_merchandise_type_pkey");

                entity.ToTable("ro_merchandise_type");

                entity.Property(e => e.MerchandiseTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("merchandise_type_id")
                    .HasComment("Ид");

                entity.Property(e => e.MerchandiseTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("merchandise_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoMercuryCommonView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_mercury_common_view");

                entity.Property(e => e.AbonentTypeId).HasColumnName("abonent_type_id");

                entity.Property(e => e.AccountIn)
                    .HasMaxLength(50)
                    .HasColumnName("account_in");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.DefaultPrefixSos)
                    .HasMaxLength(3)
                    .HasColumnName("default_prefix_sos");

                entity.Property(e => e.DomainSoed)
                    .HasMaxLength(100)
                    .HasColumnName("domain_soed");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .HasColumnName("first_name");

                entity.Property(e => e.HardCodeSos).HasColumnName("hard_code_sos");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.IrucAccount)
                    .HasMaxLength(50)
                    .HasColumnName("iruc_account");

                entity.Property(e => e.IrucPassword)
                    .HasMaxLength(50)
                    .HasColumnName("iruc_password");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .HasColumnName("last_name");

                entity.Property(e => e.MercuryGuid).HasColumnName("mercury_guid");

                entity.Property(e => e.MercuryId).HasColumnName("mercury_id");

                entity.Property(e => e.PasswordIn)
                    .HasMaxLength(50)
                    .HasColumnName("password_in");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic");

                entity.Property(e => e.PrefixSos)
                    .HasMaxLength(3)
                    .HasColumnName("prefix_sos");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<RoMercuryExternalView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_mercury_external_view");

                entity.Property(e => e.CerData).HasColumnName("cer_data");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .HasColumnName("first_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .HasColumnName("last_name");

                entity.Property(e => e.MercuryGuid).HasColumnName("mercury_guid");

                entity.Property(e => e.MercuryId).HasColumnName("mercury_id");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeGuid).HasColumnName("office_guid");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic");

                entity.Property(e => e.PrefixSos)
                    .HasMaxLength(3)
                    .HasColumnName("prefix_sos");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.SubjectKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id");
            });

            modelBuilder.Entity<RoMercuryMessenger>(entity =>
            {
                entity.HasKey(e => new { e.MercuryId, e.MessengerId })
                    .HasName("pk_mercury_messenger");

                entity.ToTable("ro_mercury_messenger");

                entity.HasComment("Таблица курьеров АстралОтчет");

                entity.HasIndex(e => e.MercuryId, "mercury_messenger_mercury_id_idx");

                entity.HasIndex(e => e.MessengerId, "mercury_messenger_messenger_id_idx");

                entity.HasIndex(e => e.OperatorIrucId, "mercury_messenger_operator_iruc_id_idx");

                entity.HasIndex(e => e.StepId, "mercury_messenger_step_id_idx");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.AccountIn)
                    .HasMaxLength(50)
                    .HasColumnName("account_in")
                    .HasComment("Логин входящий");

                entity.Property(e => e.AccountOut)
                    .HasMaxLength(50)
                    .HasColumnName("account_out")
                    .HasComment("Логин исходящий");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.IrucAccount)
                    .HasMaxLength(50)
                    .HasColumnName("iruc_account")
                    .HasComment("Логин в ИРУЦ");

                entity.Property(e => e.IrucPassword)
                    .HasMaxLength(50)
                    .HasColumnName("iruc_password")
                    .HasComment("Пароль в ИРУЦ");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата оключения");

                entity.Property(e => e.OperatorIrucId)
                    .HasColumnName("operator_iruc_id")
                    .HasComment("Оператор ИРУЦ");

                entity.Property(e => e.PackId)
                    .HasMaxLength(36)
                    .HasColumnName("pack_id")
                    .HasComment("Идентификатор пакета");

                entity.Property(e => e.PasswordIn)
                    .HasMaxLength(50)
                    .HasColumnName("password_in")
                    .HasComment("Пароль входящий");

                entity.Property(e => e.PasswordOut)
                    .HasMaxLength(50)
                    .HasColumnName("password_out")
                    .HasComment("Пароль исходящий");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояния");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.RoMercuryMessengers)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoMercuryMessengers)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.OperatorIruc)
                    .WithMany(p => p.RoMercuryMessengers)
                    .HasForeignKey(d => d.OperatorIrucId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_operator_iruc");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoMercuryMessengers)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoMercuryMessengerStep>(entity =>
            {
                entity.HasKey(e => new { e.MercuryId, e.MessengerId, e.StepId, e.LogTime })
                    .HasName("pk_mercury_messenger_step");

                entity.ToTable("ro_mercury_messenger_step");

                entity.HasComment("Таблица состояний курьеров АстралОтчет");

                entity.HasIndex(e => e.FileId, "mercury_messenger_step_file_id_idx");

                entity.HasIndex(e => e.MercuryId, "mercury_messenger_step_mercury_id_idx");

                entity.HasIndex(e => new { e.MercuryId, e.MessengerId }, "mercury_messenger_step_mercury_messenger_idx");

                entity.HasIndex(e => e.MessengerId, "mercury_messenger_step_messenger_id_idx");

                entity.HasIndex(e => e.NextStepId, "mercury_messenger_step_next_step_id_idx");

                entity.HasIndex(e => e.PreviousStepId, "mercury_messenger_step_previous_step_id_idx");

                entity.HasIndex(e => e.StepId, "mercury_messenger_step_step_id_idx");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.ErrorMsg)
                    .HasColumnType("character varying")
                    .HasColumnName("error_msg")
                    .HasComment("Ошибка");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.NextStepId)
                    .HasColumnName("next_step_id")
                    .HasComment("Следующее состояние");

                entity.Property(e => e.PreviousStepId)
                    .HasColumnName("previous_step_id")
                    .HasComment("Предыдущие состояние");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.RoMercuryMessengerSteps)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_file");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.RoMercuryMessengerSteps)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoMercuryMessengerSteps)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.NextStep)
                    .WithMany(p => p.RoMercuryMessengerStepNextSteps)
                    .HasForeignKey(d => d.NextStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_next_step");

                entity.HasOne(d => d.PreviousStep)
                    .WithMany(p => p.RoMercuryMessengerStepPreviousSteps)
                    .HasForeignKey(d => d.PreviousStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_previous_step");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoMercuryMessengerStepSteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Me)
                    .WithMany(p => p.RoMercuryMessengerSteps)
                    .HasForeignKey(d => new { d.MercuryId, d.MessengerId })
                    .HasConstraintName("fk_mercury_messenger");
            });

            modelBuilder.Entity<RoMercuryOfficeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_mercury_office_view");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.DateFixed).HasColumnName("date_fixed");

                entity.Property(e => e.DomainIn)
                    .HasMaxLength(100)
                    .HasColumnName("domain_in");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .HasColumnName("first_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.IpAddress).HasColumnName("ip_address");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .HasColumnName("last_name");

                entity.Property(e => e.MercuryGuid).HasColumnName("mercury_guid");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(100)
                    .HasColumnName("provider_name");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength();

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time");
            });

            modelBuilder.Entity<RoMercuryPlugin>(entity =>
            {
                entity.HasKey(e => e.MercuryPluginId)
                    .HasName("pk_mercury_plugin");

                entity.ToTable("ro_mercury_plugin");

                entity.HasComment("Таблица плагинов АстралОтчет");

                entity.HasIndex(e => e.MercuryId, "mercury_plugin_mercury_id_idx");

                entity.HasIndex(e => e.PluginId, "mercury_plugin_plugin_id_idx");

                entity.HasIndex(e => new { e.TariffId, e.PluginId }, "mercury_plugin_tariff_id_plugin_id_idx");

                entity.HasIndex(e => new { e.MercuryId, e.PluginId }, "sk_mercury_plugin")
                    .IsUnique();

                entity.Property(e => e.MercuryPluginId)
                    .HasColumnName("mercury_plugin_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.PluginId)
                    .HasColumnName("plugin_id")
                    .HasComment("Плагин");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.RoMercuryPlugins)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Plugin)
                    .WithMany(p => p.RoMercuryPlugins)
                    .HasForeignKey(d => d.PluginId)
                    .HasConstraintName("fk_plugin");

                entity.HasOne(d => d.RoPluginTariff)
                    .WithMany(p => p.RoMercuryPlugins)
                    .HasForeignKey(d => new { d.TariffId, d.PluginId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_plugin_tariff");
            });

            modelBuilder.Entity<RoMercuryRecipient>(entity =>
            {
                entity.HasKey(e => new { e.MercuryId, e.RecipientId })
                    .HasName("pk_mercury_recipient");

                entity.ToTable("ro_mercury_recipient");

                entity.HasComment("Таблица получателей АстралОтчет");

                entity.HasIndex(e => e.FileId, "mercury_recipient_file_id_idx");

                entity.HasIndex(e => e.MercuryId, "mercury_recipient_mercury_id_idx");

                entity.HasIndex(e => new { e.MercuryId, e.MessengerId }, "mercury_recipient_mercury_messenger_idx");

                entity.HasIndex(e => e.MessengerId, "mercury_recipient_messenger_id_idx");

                entity.HasIndex(e => e.RecipientId, "mercury_recipient_recipient_id_idx");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер участка");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.PackId)
                    .HasMaxLength(36)
                    .HasColumnName("pack_id")
                    .HasComment("Идентификатор пакета");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.RoMercuryRecipients)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoMercuryRecipients)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoMercuryRecipients)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoMercuryRecipients)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoMercuryRecipients)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.Me)
                    .WithMany(p => p.RoMercuryRecipients)
                    .HasForeignKey(d => new { d.MercuryId, d.MessengerId })
                    .HasConstraintName("fk_mercury_messenger");
            });

            modelBuilder.Entity<RoMercuryRecipientStep>(entity =>
            {
                entity.HasKey(e => new { e.RecipientId, e.MercuryId, e.StepId, e.LogTime })
                    .HasName("pk_mercury_recipient_step");

                entity.ToTable("ro_mercury_recipient_step");

                entity.HasComment("Таблица состояний получателей продуктов");

                entity.HasIndex(e => e.FileId, "mercury_recipient_step_file_id_idx");

                entity.HasIndex(e => e.MercuryId, "mercury_recipient_step_mercury_id_idx");

                entity.HasIndex(e => e.RecipientId, "mercury_recipient_step_recipient_id_idx");

                entity.HasIndex(e => new { e.RecipientId, e.MercuryId }, "mercury_recipient_step_recipient_id_mercury_id_idx");

                entity.HasIndex(e => e.StepId, "mercury_recipient_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "mercury_recipient_step_user_id_idx");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.PackId)
                    .HasMaxLength(36)
                    .HasColumnName("pack_id")
                    .HasComment("Идентификатор пакета");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.RoMercuryRecipientSteps)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoMercuryRecipientSteps)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoMercuryRecipientSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoMercuryRecipientSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoMercuryRecipientView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_mercury_recipient_view");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");
            });

            modelBuilder.Entity<RoMercuryRoute>(entity =>
            {
                entity.HasKey(e => new { e.MercuryId, e.RecipientId, e.Kpp })
                    .HasName("pk_mercury_route");

                entity.ToTable("ro_mercury_route");

                entity.HasComment("Таблица маршрутов АстралОтчет");

                entity.HasIndex(e => e.MercuryId, "mercury_route_mercury_id_idx");

                entity.HasIndex(e => new { e.MercuryId, e.RecipientId }, "mercury_route_mercury_recipient_idx");

                entity.HasIndex(e => e.RecipientId, "mercury_route_recipient_id_idx");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .IsFixedLength()
                    .HasComment("КПП");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.RoMercuryRoutes)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoMercuryRoutes)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");

                entity.HasOne(d => d.RoMercuryRecipient)
                    .WithMany(p => p.RoMercuryRoutes)
                    .HasForeignKey(d => new { d.MercuryId, d.RecipientId })
                    .HasConstraintName("fk_mercury_recipient");
            });

            modelBuilder.Entity<RoMessenger>(entity =>
            {
                entity.HasKey(e => e.MessengerId)
                    .HasName("pk_messenger");

                entity.ToTable("ro_messenger");

                entity.HasComment("Таблица курьеров");

                entity.HasIndex(e => e.DomainSoed, "domain_soed");

                entity.HasIndex(e => e.CertificateId, "messenger_certificate_id_idx");

                entity.HasIndex(e => e.MessengerUpdaterId, "messenger_messenger_updater_id_idx");

                entity.HasIndex(e => e.PfrProviderId, "messenger_pfr_provider_id_idx");

                entity.HasIndex(e => e.ServerId, "messenger_server_id_idx");

                entity.HasIndex(e => e.SosId, "messenger_sos_id_idx");

                entity.HasIndex(e => e.Suid, "messenger_suid_idx");

                entity.HasIndex(e => e.ProtocolId, "protocol");

                entity.HasIndex(e => e.MessengerGuid, "sk_messenger_guid")
                    .IsUnique();

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DomainSoed)
                    .HasMaxLength(100)
                    .HasColumnName("domain_soed")
                    .HasComment("Домен СОЭД");

                entity.Property(e => e.MessengerCode)
                    .HasMaxLength(12)
                    .HasColumnName("messenger_code")
                    .HasComment("Код");

                entity.Property(e => e.MessengerGuid)
                    .HasColumnName("messenger_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("ГУИД");

                entity.Property(e => e.MessengerName)
                    .HasMaxLength(100)
                    .HasColumnName("messenger_name")
                    .HasComment("Наименование");

                entity.Property(e => e.MessengerUpdaterId)
                    .HasColumnName("messenger_updater_id")
                    .HasComment("Обновление");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.PfrProviderId)
                    .HasColumnName("pfr_provider_id")
                    .HasComment("Провайдер ПФР");

                entity.Property(e => e.PortIn)
                    .HasColumnName("port_in")
                    .HasDefaultValueSql("80")
                    .HasComment("Входящий порт");

                entity.Property(e => e.PortOut)
                    .HasColumnName("port_out")
                    .HasDefaultValueSql("80")
                    .HasComment("Исходящий порт");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RegPfr)
                    .HasColumnName("reg_pfr")
                    .HasComment("Регистрация в ПФР");

                entity.Property(e => e.ServerId)
                    .HasColumnName("server_id")
                    .HasComment("Сервер");

                entity.Property(e => e.SinglePacket)
                    .HasColumnName("single_packet")
                    .HasComment("Пакет только по одному направлению");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("СОС");

                entity.Property(e => e.Suid)
                    .HasMaxLength(9)
                    .HasColumnName("suid")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");

                entity.Property(e => e.WaitReply)
                    .HasColumnName("wait_reply")
                    .HasComment("Ожидать ответ");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoMessengers)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.MessengerUpdater)
                    .WithMany(p => p.RoMessengers)
                    .HasForeignKey(d => d.MessengerUpdaterId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_messenger_updater");

                entity.HasOne(d => d.PfrProvider)
                    .WithMany(p => p.RoMessengers)
                    .HasForeignKey(d => d.PfrProviderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_pfr_provider");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RoMessengers)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.Server)
                    .WithMany(p => p.RoMessengers)
                    .HasForeignKey(d => d.ServerId)
                    .HasConstraintName("fk_server");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.RoMessengers)
                    .HasForeignKey(d => d.SosId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_sos");

                entity.HasOne(d => d.Su)
                    .WithMany(p => p.RoMessengers)
                    .HasForeignKey(d => d.Suid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_suid");
            });

            modelBuilder.Entity<RoMessengerCertificate>(entity =>
            {
                entity.HasKey(e => new { e.MessengerId, e.CertificateId })
                    .HasName("pk_messenger_certificate");

                entity.ToTable("ro_messenger_certificate");

                entity.HasComment("Таблица сертификатов курьеров");

                entity.HasIndex(e => e.CertificateId, "messenger_certificate_certificate_id_idx");

                entity.HasIndex(e => e.MessengerId, "messenger_certificate_messenger_id_idx");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoMessengerCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoMessengerCertificates)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");
            });

            modelBuilder.Entity<RoMessengerRecipient>(entity =>
            {
                entity.HasKey(e => new { e.MessengerId, e.RecipientId })
                    .HasName("pk_messenger_recipient");

                entity.ToTable("ro_messenger_recipient");

                entity.HasComment("Таблица связи курьеров с получателями");

                entity.HasIndex(e => e.MessengerId, "messenger_recipient_messenger_id_idx");

                entity.HasIndex(e => e.RecipientId, "messenger_recipient_recipient_id_idx");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Default)
                    .HasColumnName("default")
                    .HasComment("Курьер по умолчанию");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoMessengerRecipients)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoMessengerRecipients)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RoMessengerSuffix>(entity =>
            {
                entity.HasKey(e => new { e.MessengerId, e.Suffix })
                    .HasName("pk_messenger_suffix");

                entity.ToTable("ro_messenger_suffix");

                entity.HasComment("Суффиксы курьеров");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(7)
                    .HasColumnName("suffix")
                    .HasComment("Суффикс");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoMessengerSuffixes)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");
            });

            modelBuilder.Entity<RoMessengerUpdater>(entity =>
            {
                entity.HasKey(e => e.MessengerUpdaterId)
                    .HasName("pk_messenger_updater");

                entity.ToTable("ro_messenger_updater");

                entity.HasComment("Таблица обновления курьеров");

                entity.HasIndex(e => e.CertId, "messenger_updater_cert_id_idx");

                entity.HasIndex(e => e.MessengerId, "messenger_updater_messenger_id_idx");

                entity.HasIndex(e => e.OfficeId, "messenger_updater_office_id_idx");

                entity.HasIndex(e => e.PfrProviderId, "messenger_updater_pfr_provider_id_idx");

                entity.HasIndex(e => e.ProtocolId, "messenger_updater_protocol_id_idx");

                entity.HasIndex(e => e.ServerId, "messenger_updater_server_id_idx");

                entity.HasIndex(e => e.SosId, "messenger_updater_sos_id_idx");

                entity.HasIndex(e => e.Suid, "messenger_updater_suid_idx");

                entity.HasIndex(e => e.UserId, "messenger_updater_user_id_idx");

                entity.Property(e => e.MessengerUpdaterId)
                    .HasColumnName("messenger_updater_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplyDate)
                    .HasPrecision(0)
                    .HasColumnName("apply_date")
                    .HasComment("Дата применения");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.ConfirmDate)
                    .HasPrecision(0)
                    .HasColumnName("confirm_date")
                    .HasComment("Дата подтверждения");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DomainSoed)
                    .HasMaxLength(100)
                    .HasColumnName("domain_soed")
                    .HasComment("Домен СОЭД");

                entity.Property(e => e.MessengerCode)
                    .HasMaxLength(12)
                    .HasColumnName("messenger_code")
                    .HasComment("Код");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.MessengerName)
                    .HasMaxLength(100)
                    .HasColumnName("messenger_name")
                    .HasComment("Наименование");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PfrProviderId)
                    .HasColumnName("pfr_provider_id")
                    .HasComment("Провайдер ПФР");

                entity.Property(e => e.PortIn)
                    .HasColumnName("port_in")
                    .HasDefaultValueSql("80")
                    .HasComment("Входящий порт");

                entity.Property(e => e.PortOut)
                    .HasColumnName("port_out")
                    .HasDefaultValueSql("80")
                    .HasComment("Исходящий порт");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RegPfr)
                    .HasColumnName("reg_pfr")
                    .HasComment("Регистрация в ПФР");

                entity.Property(e => e.ServerId)
                    .HasColumnName("server_id")
                    .HasComment("Сервер");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("СОС");

                entity.Property(e => e.Suid)
                    .HasMaxLength(9)
                    .HasColumnName("suid")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WaitReply)
                    .HasColumnName("wait_reply")
                    .HasComment("Ожидать ответ");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoMessengerUpdaters)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoMessengerUpdaters)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.PfrProvider)
                    .WithMany(p => p.RoMessengerUpdaters)
                    .HasForeignKey(d => d.PfrProviderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_pfr_provider");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RoMessengerUpdaters)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.Server)
                    .WithMany(p => p.RoMessengerUpdaters)
                    .HasForeignKey(d => d.ServerId)
                    .HasConstraintName("fk_server");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.RoMessengerUpdaters)
                    .HasForeignKey(d => d.SosId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_sos");

                entity.HasOne(d => d.Su)
                    .WithMany(p => p.RoMessengerUpdaters)
                    .HasForeignKey(d => d.Suid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_suid");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoMessengerUpdaters)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoModule>(entity =>
            {
                entity.HasKey(e => e.ModuleId)
                    .HasName("pk_module");

                entity.ToTable("ro_module");

                entity.HasComment("Таблица модулей");

                entity.HasIndex(e => e.ProductTypeId, "module_product_type_id_idx");

                entity.HasIndex(e => e.TypeId, "module_type_id_idx");

                entity.HasIndex(e => e.MuduleName, "sk_module_name")
                    .IsUnique();

                entity.Property(e => e.ModuleId)
                    .ValueGeneratedNever()
                    .HasColumnName("module_id")
                    .HasComment("Код");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.MuduleName)
                    .HasMaxLength(150)
                    .HasColumnName("mudule_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoModules)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoModules)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RoModuleTariff>(entity =>
            {
                entity.HasKey(e => e.ModuleTariffId)
                    .HasName("pk_module_tariff");

                entity.ToTable("ro_module_tariff");

                entity.HasComment("Тарифы для модуля");

                entity.HasIndex(e => e.ModuleId, "module_tariff_module_id_idx");

                entity.HasIndex(e => e.TariffId, "module_tariff_tariff_id_idx");

                entity.HasIndex(e => new { e.ModuleId, e.TariffId }, "sk_module_tariff")
                    .IsUnique();

                entity.Property(e => e.ModuleTariffId)
                    .HasColumnName("module_tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasComment("Модуль");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.RoModuleTariffs)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("fk_module");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoModuleTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");
            });

            modelBuilder.Entity<RoModuleType>(entity =>
            {
                entity.HasKey(e => e.ModuleTypeId)
                    .HasName("pk_module_type");

                entity.ToTable("ro_module_type");

                entity.HasComment("Тип модуля");

                entity.Property(e => e.ModuleTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("module_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ModuleTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("module_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoMonitoringView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_monitoring_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("abonent_type_name");

                entity.Property(e => e.CodeName)
                    .HasMaxLength(10)
                    .HasColumnName("code_name");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.DateFixed).HasColumnName("date_fixed");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.Fax)
                    .HasMaxLength(24)
                    .HasColumnName("fax");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.HardCodeSos).HasColumnName("hard_code_sos");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeGuid).HasColumnName("office_guid");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn");

                entity.Property(e => e.OkopfId).HasColumnName("okopf_id");

                entity.Property(e => e.PfrSender)
                    .HasMaxLength(40)
                    .HasColumnName("pfr_sender");

                entity.Property(e => e.PfrSystemSender)
                    .HasMaxLength(40)
                    .HasColumnName("pfr_system_sender");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductTypeGuid).HasColumnName("product_type_guid");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength();

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TimeLimit).HasColumnName("time_limit");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time");
            });

            modelBuilder.Entity<RoNews>(entity =>
            {
                entity.HasKey(e => e.NewsId)
                    .HasName("pk_news");

                entity.ToTable("ro_news");

                entity.HasComment("Таблица новостей");

                entity.HasIndex(e => e.ImageId, "news_image_id_idx");

                entity.HasIndex(e => e.Topic, "news_topic_idx");

                entity.HasIndex(e => e.UserId, "news_user_id_idx");

                entity.HasIndex(e => e.VisibilityTypeId, "news_visibility_type_id_idx");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Content)
                    .HasColumnType("character varying")
                    .HasColumnName("content")
                    .HasComment("Содержание");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ImageId)
                    .HasColumnName("image_id")
                    .HasComment("Изображение");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата удаления");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Узел родитель");

                entity.Property(e => e.ShowReview)
                    .HasColumnName("show_review")
                    .HasComment("Отображать поле ввода отзыва");

                entity.Property(e => e.Summary)
                    .HasColumnType("character varying")
                    .HasColumnName("summary")
                    .HasComment("Описание");

                entity.Property(e => e.Topic)
                    .HasMaxLength(150)
                    .HasColumnName("topic")
                    .HasComment("Тема");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.VisibilityTypeId)
                    .HasColumnName("visibility_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип видимости");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_news_fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoNews)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.VisibilityType)
                    .WithMany(p => p.RoNews)
                    .HasForeignKey(d => d.VisibilityTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_visibility_type");

                entity.HasMany(d => d.Tags)
                    .WithMany(p => p.News)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoNewsTag",
                        l => l.HasOne<RoTag>().WithMany().HasForeignKey("TagId").HasConstraintName("fk_tag"),
                        r => r.HasOne<RoNews>().WithMany().HasForeignKey("NewsId").HasConstraintName("fk_news"),
                        j =>
                        {
                            j.HasKey("NewsId", "TagId").HasName("pk_news_tag");

                            j.ToTable("ro_news_tag").HasComment("Таблица тегов новостей");

                            j.HasIndex(new[] { "NewsId" }, "news_tag_news_id_idx");

                            j.HasIndex(new[] { "TagId" }, "news_tag_tag_id_idx");

                            j.IndexerProperty<int>("NewsId").HasColumnName("news_id").HasComment("Новость");

                            j.IndexerProperty<int>("TagId").HasColumnName("tag_id").HasComment("Тег");
                        });
            });

            modelBuilder.Entity<RoNewsBrowsing>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.NewsId })
                    .HasName("pk_news_browsing_user_id_news_id");

                entity.ToTable("ro_news_browsing");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Новость");

                entity.Property(e => e.BrowseTime)
                    .HasColumnName("browse_time")
                    .HasComment("Время просмотра");

                entity.Property(e => e.LikeTime)
                    .HasColumnName("like_time")
                    .HasComment("Время установки флага like");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.RoNewsBrowsings)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_ro_news_browsing_news_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoNewsBrowsings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_ro_news_browsing_user_id");
            });

            modelBuilder.Entity<RoNewsFile>(entity =>
            {
                entity.HasKey(e => new { e.NewsId, e.FileId })
                    .HasName("pk_ro_news_file_news_id_file_id");

                entity.ToTable("ro_news_file");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Новость");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.RoNewsFiles)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_ro_news_file_new_id");
            });

            modelBuilder.Entity<RoNewsLastVisit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_news_last_visit");

                entity.HasIndex(e => e.UserId, "ro_news_last_visit_user_id_key")
                    .IsUnique();

                entity.Property(e => e.LastVisitDate)
                    .HasPrecision(0)
                    .HasColumnName("last_visit_date")
                    .HasComment("Дата последнего посещения вкладки новостей");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");
            });

            modelBuilder.Entity<RoNewsReview>(entity =>
            {
                entity.HasKey(e => e.NewsReviewId)
                    .HasName("ro_news_review_pkey");

                entity.ToTable("ro_news_reviews");

                entity.HasComment("Таблица с отзывами к новостям");

                entity.Property(e => e.NewsReviewId)
                    .HasColumnName("news_review_id")
                    .HasDefaultValueSql("nextval('ro_news_reviews_news_review_id_seq1'::regclass)")
                    .HasComment("идентификатор отзыва новости");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("новость");

                entity.Property(e => e.ReviewText)
                    .HasColumnType("character varying")
                    .HasColumnName("review_text")
                    .HasComment("текст отзыва");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("пользователь");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.RoNewsReviews)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_news");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoNewsReviews)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_news_user");
            });

            modelBuilder.Entity<RoNewsSetting>(entity =>
            {
                entity.HasKey(e => new { e.SettingId, e.NewsId })
                    .HasName("pk_ro_news_setting_news_id_setting_id");

                entity.ToTable("ro_news_setting");

                entity.HasComment("Таблица настроек новости");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Новость");

                entity.Property(e => e.SettingValue)
                    .HasMaxLength(100)
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.RoNewsSettings)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_ro_news_setting_news_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoNewsSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_ro_news_setting_setting_id");
            });

            modelBuilder.Entity<RoNewsVisibility>(entity =>
            {
                entity.HasKey(e => e.NewsVisibilityId)
                    .HasName("pk_news_visibility");

                entity.ToTable("ro_news_visibility");

                entity.HasComment("Таблица видимости для новостей");

                entity.HasIndex(e => e.AgentId, "news_visibility_agent_id_idx");

                entity.HasIndex(e => e.NewsId, "news_visibility_new_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "news_visibility_product_type_id_idx");

                entity.HasIndex(e => e.RegionId, "news_visibility_region_id_idx");

                entity.HasIndex(e => e.RoleId, "news_visibility_role_id_idx");

                entity.HasIndex(e => new { e.NewsId, e.AgentId }, "sk_news_visibility_agent")
                    .IsUnique();

                entity.HasIndex(e => new { e.NewsId, e.ProductTypeId }, "sk_news_visibility_product_type")
                    .IsUnique();

                entity.HasIndex(e => new { e.NewsId, e.RegionId }, "sk_news_visibility_region")
                    .IsUnique();

                entity.HasIndex(e => new { e.NewsId, e.RoleId }, "sk_news_visibility_role")
                    .IsUnique();

                entity.Property(e => e.NewsVisibilityId)
                    .HasColumnName("news_visibility_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.AgentLevelId)
                    .HasColumnName("agent_level_id")
                    .HasComment("Уровень агента");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Новость");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.RoleId)
                    .HasColumnName("role_id")
                    .HasComment("Роль");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoNewsVisibilities)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.AgentLevel)
                    .WithMany(p => p.RoNewsVisibilities)
                    .HasForeignKey(d => d.AgentLevelId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_news_visibility_agent_level_id");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.RoNewsVisibilities)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_news");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoNewsVisibilities)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoNewsVisibilities)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoNewsVisibilities)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_role");
            });

            modelBuilder.Entity<RoNotificationTemplate>(entity =>
            {
                entity.HasKey(e => e.Guid)
                    .HasName("pk_notification_template");

                entity.ToTable("ro_notification_template");

                entity.HasIndex(e => e.FileId, "notification_template_file_id_idx");

                entity.HasIndex(e => e.ProductId, "notification_template_product_id_idx");

                entity.HasIndex(e => e.StateId, "notification_template_state_id_idx");

                entity.Property(e => e.Guid)
                    .ValueGeneratedNever()
                    .HasColumnName("guid")
                    .HasComment("Гуид шаблона");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл результатов выборки");

                entity.Property(e => e.Mail)
                    .HasColumnType("character varying")
                    .HasColumnName("mail")
                    .HasComment("Почта");

                entity.Property(e => e.Name)
                    .HasColumnType("character varying")
                    .HasColumnName("name")
                    .HasComment("Имя шаблона");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Абонент");

                entity.Property(e => e.Query)
                    .HasColumnType("character varying")
                    .HasColumnName("query")
                    .HasComment("Запрос на выборку");

                entity.Property(e => e.StateId)
                    .HasColumnName("state_id")
                    .HasComment("Статус");

                entity.Property(e => e.Trigger)
                    .HasColumnName("trigger")
                    .HasComment("Время исполнения");

                entity.Property(e => e.TriggerTime)
                    .HasPrecision(0)
                    .HasColumnName("trigger_time")
                    .HasComment("Ближайшее время срабатывания");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Время обновления результата");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoNotificationTemplates)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.RoNotificationTemplates)
                    .HasForeignKey(d => d.StateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_state");
            });

            modelBuilder.Entity<RoNotificationTemplateRequest>(entity =>
            {
                entity.ToTable("ro_notification_template_request");

                entity.HasComment("Запросы шаблонов уведомлений");

                entity.HasIndex(e => e.FileId, "notification_template_request_file_id_idx");

                entity.HasIndex(e => e.ProductId, "notification_template_request_product_id_idx");

                entity.HasIndex(e => e.TypeId, "notification_template_request_type_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время приема запроса");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Окончание действия шаблона");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл запроса");

                entity.Property(e => e.Guid)
                    .HasColumnName("guid")
                    .HasComment("Гуид шаблона");

                entity.Property(e => e.Mail)
                    .HasColumnType("character varying")
                    .HasColumnName("mail")
                    .HasComment("Почта");

                entity.Property(e => e.Name)
                    .HasColumnType("character varying")
                    .HasColumnName("name")
                    .HasComment("Имя шаблона");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.Query)
                    .HasColumnType("character varying")
                    .HasColumnName("query")
                    .HasComment("Запрос на выборку");

                entity.Property(e => e.Trigger)
                    .HasColumnName("trigger")
                    .HasComment("Временной триггер");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип запроса");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoNotificationTemplateRequests)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoNotificationTemplateRequests)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RoNotificationTemplateRequestType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("pk_notification_template_request_type");

                entity.ToTable("ro_notification_template_request_type");

                entity.HasComment("Типы запросов шаблонов уведомлений");

                entity.Property(e => e.TypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("type_id")
                    .HasComment("Тип запроса шаблона");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<RoNotificationTemplateState>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("pk_notification_template_state");

                entity.ToTable("ro_notification_template_state");

                entity.HasComment("Состояния шаблонов уведомлений");

                entity.Property(e => e.StateId)
                    .ValueGeneratedNever()
                    .HasColumnName("state_id")
                    .HasComment("Идентификатор состояния");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<RoNumber>(entity =>
            {
                entity.HasKey(e => e.NumberId)
                    .HasName("pk_number");

                entity.ToTable("ro_number");

                entity.HasComment("Таблица номеров счетов");

                entity.Property(e => e.NumberId)
                    .ValueGeneratedNever()
                    .HasColumnName("number_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.NumberValue)
                    .HasColumnName("number_value")
                    .HasComment("Номер");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoNumbers)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_number");
            });

            modelBuilder.Entity<RoObject>(entity =>
            {
                entity.HasKey(e => e.ObjectId)
                    .HasName("pk_object");

                entity.ToTable("ro_object");

                entity.HasComment("Таблица объектов");

                entity.HasIndex(e => e.ValueTypeId, "object_object_type_id_idx");

                entity.HasIndex(e => e.ValueTypeId, "object_value_type_id_idx");

                entity.HasIndex(e => new { e.ObjectTypeId, e.ObjectValue, e.ValueTypeId }, "sk_object")
                    .IsUnique();

                entity.Property(e => e.ObjectId)
                    .HasColumnName("object_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(150)
                    .HasColumnName("object_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ObjectTypeId)
                    .HasColumnName("object_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.ObjectValue)
                    .HasMaxLength(36)
                    .HasColumnName("object_value")
                    .HasComment("Значение");

                entity.Property(e => e.ValueTypeId)
                    .HasColumnName("value_type_id")
                    .HasComment("Тип значения");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.RoObjects)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_object_type");

                entity.HasOne(d => d.ValueType)
                    .WithMany(p => p.RoObjects)
                    .HasForeignKey(d => d.ValueTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_value_type");
            });

            modelBuilder.Entity<RoObjectType>(entity =>
            {
                entity.HasKey(e => e.ObjectTypeId)
                    .HasName("pk_object_type");

                entity.ToTable("ro_object_type");

                entity.HasComment("Таблица типов объектов");

                entity.HasIndex(e => e.ObjectTypeName, "sk_object_type")
                    .IsUnique();

                entity.Property(e => e.ObjectTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("object_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ObjectTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("object_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoOfdDevice>(entity =>
            {
                entity.HasKey(e => e.OfdDeviceId)
                    .HasName("ro_ofd_device_pkey");

                entity.ToTable("ro_ofd_device");

                entity.HasComment("Данные по аппаратуре ОФД");

                entity.HasIndex(e => e.AgentId, "ro_ofd_device_agent_id_idx");

                entity.HasIndex(e => e.AstralKktId, "ro_ofd_device_astral_kkt_id_idx");

                entity.HasIndex(e => e.OfdDeviceTypeId, "ro_ofd_device_ofd_device_type_id_idx");

                entity.HasIndex(e => e.ParentId, "ro_ofd_device_parent_id_idx");

                entity.HasIndex(e => e.UserId, "ro_ofd_device_user_id_idx");

                entity.HasIndex(e => e.ValidityUnitId, "ro_ofd_device_validaty_unit_id_idx");

                entity.Property(e => e.OfdDeviceId)
                    .HasColumnName("ofd_device_id")
                    .HasComment("Идентификатор аппаратуры ОФД");

                entity.Property(e => e.AgentDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("agent_date")
                    .HasComment("Дата получения партнером");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Идентификатор партнера");

                entity.Property(e => e.AstralKktDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("astral_kkt_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.AstralKktId)
                    .HasColumnName("astral_kkt_id")
                    .HasComment("Идентификатор Астрал-ККТ");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.LastChangeDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("last_change_date")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.OfdDeviceTypeId)
                    .HasColumnName("ofd_device_type_id")
                    .HasComment("Тип аппаратуры");

                entity.Property(e => e.ParentDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("parent_date")
                    .HasComment("Дата получения центром продаж");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Идентификатор центра продаж");

                entity.Property(e => e.SerialNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("serial_number")
                    .HasComment("Заводской номер");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.Property(e => e.ValidityLength)
                    .HasColumnName("validity_length")
                    .HasComment("Продолжительность периода действия кода активации");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Единица измерения периода действия кода активации");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoOfdDeviceAgents)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_agent_id");

                entity.HasOne(d => d.AstralKkt)
                    .WithMany(p => p.RoOfdDeviceAstralKkts)
                    .HasForeignKey(d => d.AstralKktId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_astral_kkt_id");

                entity.HasOne(d => d.OfdDeviceType)
                    .WithMany(p => p.RoOfdDevices)
                    .HasForeignKey(d => d.OfdDeviceTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_ofd_device_type_id");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.RoOfdDeviceParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_parent_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoOfdDevices)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_user_id");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.RoOfdDevices)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_validity_unit_id");
            });

            modelBuilder.Entity<RoOfdDeviceType>(entity =>
            {
                entity.HasKey(e => e.OfdDeviceTypeId)
                    .HasName("ro_ofd_device_type_pkey");

                entity.ToTable("ro_ofd_device_type");

                entity.Property(e => e.OfdDeviceTypeId).HasColumnName("ofd_device_type_id");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(250)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<RoOfdDiscount>(entity =>
            {
                entity.HasKey(e => e.OfdDiscountId)
                    .HasName("ro_ofd_discount_pkey");

                entity.ToTable("ro_ofd_discount");

                entity.HasIndex(e => e.CommentId, "idx_ro_ofd_discount_comment_id");

                entity.HasIndex(e => e.DiscountId, "idx_ro_ofd_discount_discount_id");

                entity.Property(e => e.OfdDiscountId)
                    .HasColumnName("ofd_discount_id")
                    .HasComment("Ид.");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Ид. коментария");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Ид. скидки");

                entity.Property(e => e.UseLimit)
                    .HasColumnName("use_limit")
                    .HasComment("Лимит использования");

                entity.HasOne(d => d.Comment)
                    .WithMany(p => p.RoOfdDiscounts)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_ofd_discount_comment_id");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.RoOfdDiscounts)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_ro_ofd_discount_discount_id");
            });

            modelBuilder.Entity<RoOfdPin>(entity =>
            {
                entity.HasKey(e => e.PinId)
                    .HasName("ro_ofd_pin_pkey");

                entity.ToTable("ro_ofd_pin");

                entity.HasIndex(e => e.AgentId, "idx_ofd_pin_agent_id");

                entity.HasIndex(e => e.Inn, "idx_ofd_pin_inn");

                entity.HasIndex(e => e.ParentId, "idx_ofd_pin_parent_id");

                entity.HasIndex(e => e.PinFull, "idx_ofd_pin_pin_full")
                    .IsUnique();

                entity.HasIndex(e => new { e.PrefixId, e.Pin }, "idx_ofd_pin_prefix_id_pin")
                    .IsUnique();

                entity.HasIndex(e => e.BillId, "idx_ro_ofd_pin_bill_id");

                entity.HasIndex(e => e.ContractTariffId, "idx_ro_ofd_pin_contract_tariff_id");

                entity.HasIndex(e => e.Pin, "idx_ro_ofd_pin_pin");

                entity.HasIndex(e => e.OfdDeviceId, "ro_ofd_pin_ofd_device_id_idx");

                entity.Property(e => e.PinId)
                    .HasColumnName("pin_id")
                    .HasComment("Ид.");

                entity.Property(e => e.ActivationTime)
                    .HasPrecision(0)
                    .HasColumnName("activation_time")
                    .HasComment("Время активации");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Партнёр");

                entity.Property(e => e.AgentPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("agent_price")
                    .HasComment("Цена для партнёра");

                entity.Property(e => e.Article)
                    .HasMaxLength(50)
                    .HasColumnName("article")
                    .HasComment("Номенклатура");

                entity.Property(e => e.BillId)
                    .HasColumnName("bill_id")
                    .HasComment("Счёт");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Комментарий");

                entity.Property(e => e.ConfigJson)
                    .HasColumnType("character varying")
                    .HasColumnName("config_json")
                    .HasComment("Настройки");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasComment("Время создания");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.IsPrivate)
                    .IsRequired()
                    .HasColumnName("is_private")
                    .HasDefaultValueSql("true")
                    .HasComment("Доступность кода активации");

                entity.Property(e => e.OfdDeviceId).HasColumnName("ofd_device_id");

                entity.Property(e => e.OfdDiscountId)
                    .HasColumnName("ofd_discount_id")
                    .HasComment("Ид. скидки");

                entity.Property(e => e.OfdPinTypeId)
                    .HasColumnName("ofd_pin_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип пин кода");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("ЦП");

                entity.Property(e => e.Pin)
                    .HasMaxLength(20)
                    .HasColumnName("pin")
                    .HasComment("Пин");

                entity.Property(e => e.PinFull)
                    .HasMaxLength(100)
                    .HasColumnName("pin_full")
                    .HasComment("Полное значение пин-кода");

                entity.Property(e => e.PinTemplateId)
                    .HasColumnName("pin_template_id")
                    .HasComment("Ид шаблона");

                entity.Property(e => e.PrefixId)
                    .HasColumnName("prefix_id")
                    .HasComment("Префикс");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.ScPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_price")
                    .HasComment("Цена для ЦП");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.Validity)
                    .HasColumnName("validity")
                    .HasComment("Срок действия тарифа");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Единица измерения срока действия тарифа");

                entity.Property(e => e.WaitingDays)
                    .HasColumnName("waiting_days")
                    .HasComment("Дни ожидания");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoOfdPinAgents)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_of_pin_agent_id");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.BillId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ro_ofd_pin_bill_id");

                entity.HasOne(d => d.Comment)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_ofd_pin_comment_id");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.ContractTariffId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_ofd_pin_contract_tariff_id");

                entity.HasOne(d => d.OfdDevice)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.OfdDeviceId)
                    .HasConstraintName("ro_ofd_pin_ofd_device_id_fkey");

                entity.HasOne(d => d.OfdDiscount)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.OfdDiscountId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_ofd_pin_discount_id");

                entity.HasOne(d => d.OfdPinType)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.OfdPinTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_ofd_pin_fk");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.RoOfdPinParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_pin_parent_id");

                entity.HasOne(d => d.PinTemplate)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.PinTemplateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ofd_pin_pin_template_id");

                entity.HasOne(d => d.Prefix)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.PrefixId)
                    .HasConstraintName("fk_ro_ofd_pin_prefix_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_ro_ofd_pin_step_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ro_ofd_pin_user_id");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.RoOfdPins)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_ofd_pin_unit_id");

                entity.HasMany(d => d.OfdPinTemplates)
                    .WithMany(p => p.OfdPins)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoOfdPinTemplateId",
                        l => l.HasOne<RoOfdPinTemplate>().WithMany().HasForeignKey("OfdPinTemplateId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("ro_ofd_pin_template_id_fk1"),
                        r => r.HasOne<RoOfdPin>().WithMany().HasForeignKey("OfdPinId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("ro_ofd_pin_template_id_fk"),
                        j =>
                        {
                            j.HasKey("OfdPinId", "OfdPinTemplateId").HasName("ro_ofd_pin_template_id_pkey");

                            j.ToTable("ro_ofd_pin_template_id");

                            j.IndexerProperty<int>("OfdPinId").HasColumnName("ofd_pin_id").HasComment("Ид. пин кода");

                            j.IndexerProperty<Guid>("OfdPinTemplateId").HasColumnName("ofd_pin_template_id").HasComment("Ид. шаблона");
                        });
            });

            modelBuilder.Entity<RoOfdPinSetting>(entity =>
            {
                entity.HasKey(e => new { e.SettingId, e.PinId })
                    .HasName("pk_ofd_pin_setting");

                entity.ToTable("ro_ofd_pin_setting");

                entity.HasIndex(e => e.PinId, "idx_ro_ofd_pin_setting_pin_id");

                entity.HasIndex(e => e.SettingId, "idx_ro_ofd_pin_setting_setting_id");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.PinId)
                    .HasColumnName("pin_id")
                    .HasComment("Пин ид.");

                entity.Property(e => e.SettingValue)
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Pin)
                    .WithMany(p => p.RoOfdPinSettings)
                    .HasForeignKey(d => d.PinId)
                    .HasConstraintName("fk_pin_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoOfdPinSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");
            });

            modelBuilder.Entity<RoOfdPinTemplate>(entity =>
            {
                entity.HasKey(e => e.OfdPinTemplateId)
                    .HasName("ro_ofd_pin_template_pkey");

                entity.ToTable("ro_ofd_pin_template");

                entity.HasIndex(e => e.SecretId, "idx_ofd_pin_template_secret_id");

                entity.HasIndex(e => new { e.Validity, e.ValidityUnitId }, "idx_ofd_pin_template_validity_validity_unit_id");

                entity.Property(e => e.OfdPinTemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("ofd_pin_template_id")
                    .HasComment("Ид");

                entity.Property(e => e.AgentPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("agent_price")
                    .HasComment("Цена для партнёра");

                entity.Property(e => e.Article)
                    .HasMaxLength(50)
                    .HasColumnName("article")
                    .HasComment("Номенклатура");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.Cost1c)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost_1c")
                    .HasComment("Цена для 1С");

                entity.Property(e => e.InitialTime)
                    .HasColumnName("initial_time")
                    .HasComment("Время начала действия");

                entity.Property(e => e.OfdPinTypeId)
                    .HasColumnName("ofd_pin_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип пин кода");

                entity.Property(e => e.OffTime)
                    .HasColumnName("off_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.SaleCenterId)
                    .HasColumnName("sale_center_id")
                    .HasComment("Ид. ЦП");

                entity.Property(e => e.ScPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_price")
                    .HasComment("Цена для ЦП");

                entity.Property(e => e.SecretId)
                    .HasMaxLength(50)
                    .HasColumnName("secret_id")
                    .HasComment("Читаемый код");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(200)
                    .HasColumnName("template_name")
                    .HasComment("Наименование");

                entity.Property(e => e.Validity)
                    .HasColumnName("validity")
                    .HasComment("Срок действия");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Единица измерения срока действия");

                entity.HasOne(d => d.OfdPinType)
                    .WithMany(p => p.RoOfdPinTemplates)
                    .HasForeignKey(d => d.OfdPinTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_pin_template_ofd_pin_type");

                entity.HasOne(d => d.SaleCenter)
                    .WithMany(p => p.RoOfdPinTemplates)
                    .HasForeignKey(d => d.SaleCenterId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ofd_pin_template_sale_center_id_agent_id");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.RoOfdPinTemplates)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_pin_template_validity_unit_id_unit_id");
            });

            modelBuilder.Entity<RoOfdPinTemplateLimit>(entity =>
            {
                entity.HasKey(e => new { e.OfdPinTemplateId, e.LimitId })
                    .HasName("pk_ofd_pin_template_limit_pin_template_id_limit_id");

                entity.ToTable("ro_ofd_pin_template_limit");

                entity.HasComment("Таблица ограничений использования шаблона");

                entity.Property(e => e.OfdPinTemplateId)
                    .HasColumnName("ofd_pin_template_id")
                    .HasComment("Ид. шаблона");

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("Ограничение");

                entity.Property(e => e.LimitValueInt)
                    .HasColumnName("limit_value_int")
                    .HasComment("Целочисленное значение");

                entity.HasOne(d => d.Limit)
                    .WithMany(p => p.RoOfdPinTemplateLimits)
                    .HasForeignKey(d => d.LimitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ro_ofd_pin_template_limit_limit_id");

                entity.HasOne(d => d.OfdPinTemplate)
                    .WithMany(p => p.RoOfdPinTemplateLimits)
                    .HasForeignKey(d => d.OfdPinTemplateId)
                    .HasConstraintName("fk_ofd_pin_template_limit_pin_template_id");
            });

            modelBuilder.Entity<RoOfdPinType>(entity =>
            {
                entity.HasKey(e => e.OfdPinTypeId)
                    .HasName("ro_ofd_pin_type_pkey");

                entity.ToTable("ro_ofd_pin_type");

                entity.Property(e => e.OfdPinTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ofd_pin_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.RoOfdPinTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("ro_ofd_pin_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoOfdPrefix>(entity =>
            {
                entity.HasKey(e => e.PrefixId)
                    .HasName("ro_ofd_prefix_pkey");

                entity.ToTable("ro_ofd_prefix");

                entity.HasIndex(e => e.AgentId, "idx_ofd_prefix_office_id");

                entity.HasIndex(e => e.Prefix, "idx_ofd_prefix_prefix")
                    .IsUnique();

                entity.Property(e => e.PrefixId)
                    .HasColumnName("prefix_id")
                    .HasComment("Ид.");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Ид. агента");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Время отключения");

                entity.Property(e => e.PinLength)
                    .HasColumnName("pin_length")
                    .HasDefaultValueSql("5")
                    .HasComment("Длина генерируемого кода");

                entity.Property(e => e.Prefix)
                    .HasColumnType("character varying")
                    .HasColumnName("prefix")
                    .HasComment("Префикс");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoOfdPrefixes)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_ro_ofd_prefix_agent_id");
            });

            modelBuilder.Entity<RoOfdProduct>(entity =>
            {
                entity.HasKey(e => e.OfdProductId)
                    .HasName("ro_ofd_product_pkey");

                entity.ToTable("ro_ofd_product");

                entity.HasComment("Данные по продукту офд из заявки");

                entity.HasIndex(e => e.ContractTariffEndDate, "ro_ofd_product_contract_tariff_end_date_idx");

                entity.HasIndex(e => e.ContractTariffId, "ro_ofd_product_contract_tariff_id_idx");

                entity.HasIndex(e => e.FiscalAcummEnddate, "ro_ofd_product_fiscal_acumm_enddate_idx");

                entity.HasIndex(e => e.ProductId, "ro_ofd_product_product_id_idx");

                entity.Property(e => e.OfdProductId)
                    .HasColumnName("ofd_product_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContractTariffEndDate)
                    .HasColumnName("contract_tariff_end_date")
                    .HasComment("Дата окончания действия лицензии");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.ContractTariffInitialDate)
                    .HasColumnName("contract_tariff_initial_date")
                    .HasComment("Дата начала действия лицензии");

                entity.Property(e => e.ContractTariffRegnum)
                    .HasMaxLength(100)
                    .HasColumnName("contract_tariff_regnum")
                    .HasComment("Регистрационный номер");

                entity.Property(e => e.ContractTariffStepId)
                    .HasColumnName("contract_tariff_step_id")
                    .HasComment("Состояние тарифа");

                entity.Property(e => e.FiscalAcummActivationDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("fiscal_acumm_activation_date")
                    .HasComment("Дата активации фиксального накопителя");

                entity.Property(e => e.FiscalAcummEnddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("fiscal_acumm_enddate")
                    .HasComment("Дата окончания фиксального накопителя");

                entity.Property(e => e.FiscalAcummModel)
                    .HasColumnType("character varying")
                    .HasColumnName("fiscal_acumm_model")
                    .HasComment("Модель фиксального накопителя");

                entity.Property(e => e.FiscalAcummNumber)
                    .HasMaxLength(25)
                    .HasColumnName("fiscal_acumm_number")
                    .HasComment("Заводской номер фиксального накопителя");

                entity.Property(e => e.FiscalAcummValidityPeriod)
                    .HasColumnName("fiscal_acumm_validity_period")
                    .HasComment("Срок действия фиксального накопителя");

                entity.Property(e => e.ModelKkt)
                    .HasColumnType("character varying")
                    .HasColumnName("model_kkt")
                    .HasComment("Модель ККТ");

                entity.Property(e => e.Pin)
                    .HasMaxLength(25)
                    .HasColumnName("pin")
                    .HasComment("Пин");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.RegistrationNumberKkt)
                    .HasMaxLength(25)
                    .HasColumnName("registration_number_kkt")
                    .HasComment("Регистрационный номер ККТ");

                entity.Property(e => e.SerialNumberKkt)
                    .HasMaxLength(25)
                    .HasColumnName("serial_number_kkt")
                    .HasComment("Заводской номер ККТ");

                entity.Property(e => e.TariffName)
                    .HasColumnType("character varying")
                    .HasColumnName("tariff_name")
                    .HasComment("Название тарифа");

                entity.Property(e => e.WalletGuid)
                    .HasColumnName("wallet_guid")
                    .HasComment("Идентификатор личного кабинета ОФД");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.RoOfdProducts)
                    .HasForeignKey(d => d.ContractTariffId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoOfdProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<RoOffice>(entity =>
            {
                entity.HasKey(e => e.OfficeId)
                    .HasName("pk_office");

                entity.ToTable("ro_office");

                entity.HasComment("Таблица офисов");

                entity.HasIndex(e => e.AgentId, "office_agent_id_idx");

                entity.HasIndex(e => e.CertTemplateId, "office_cert_template_id_idx");

                entity.HasIndex(e => e.CertificateId, "office_certificate_id_idx");

                entity.HasIndex(e => e.DefaultCaId, "office_default_ca_id_idx");

                entity.HasIndex(e => e.DefaultProviderId, "office_default_provider_id_idx");

                entity.HasIndex(e => e.DefaultSosId, "office_default_sos_id_idx");

                entity.HasIndex(e => e.OperatorIrucId, "office_operator_iruc_id_idx");

                entity.HasIndex(e => e.Ruid, "office_ruid");

                entity.HasIndex(e => e.OfficeGuid, "sk_office_guid")
                    .IsUnique();

                entity.HasIndex(e => new { e.AgentId, e.OfficeName }, "sk_office_name")
                    .IsUnique();

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата подключения");

                entity.Property(e => e.DefaultCaId)
                    .HasColumnName("default_ca_id")
                    .HasComment("ЦС");

                entity.Property(e => e.DefaultProviderId)
                    .HasColumnName("default_provider_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.DefaultSosId)
                    .HasColumnName("default_sos_id")
                    .HasComment("СОС");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OfficeGuid)
                    .HasColumnName("office_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name")
                    .HasComment("Наименование");

                entity.Property(e => e.OperatorIrucId)
                    .HasColumnName("operator_iruc_id")
                    .HasComment("Оператор ИРУЦ");

                entity.Property(e => e.Password)
                    .HasMaxLength(128)
                    .HasColumnName("password")
                    .HasComment("Пароль для работы с DSS");

                entity.Property(e => e.PfrSender)
                    .HasMaxLength(40)
                    .HasColumnName("pfr_sender")
                    .HasDefaultValueSql("'Тест'::character varying");

                entity.Property(e => e.PfrSystemSender)
                    .HasMaxLength(40)
                    .HasColumnName("pfr_system_sender")
                    .HasDefaultValueSql("'Тест'::character varying");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoOffices)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.RoOffices)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_cert_template_id");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoOffices)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.DefaultCa)
                    .WithMany(p => p.RoOffices)
                    .HasForeignKey(d => d.DefaultCaId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_default_ca");

                entity.HasOne(d => d.DefaultProvider)
                    .WithMany(p => p.RoOffices)
                    .HasForeignKey(d => d.DefaultProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_default_provider");

                entity.HasOne(d => d.DefaultSos)
                    .WithMany(p => p.RoOffices)
                    .HasForeignKey(d => d.DefaultSosId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_default_sos");

                entity.HasOne(d => d.OperatorIruc)
                    .WithMany(p => p.RoOffices)
                    .HasForeignKey(d => d.OperatorIrucId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_operator_iruc");

                entity.HasOne(d => d.Ru)
                    .WithMany(p => p.RoOffices)
                    .HasForeignKey(d => d.Ruid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ruid");

                entity.HasMany(d => d.Schemes)
                    .WithMany(p => p.Offices)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoOfficeScheme",
                        l => l.HasOne<RoAgentScheme>().WithMany().HasForeignKey("SchemeId").HasConstraintName("fk_scheme"),
                        r => r.HasOne<RoOffice>().WithMany().HasForeignKey("OfficeId").HasConstraintName("fk_office"),
                        j =>
                        {
                            j.HasKey("OfficeId", "SchemeId").HasName("pk_office_scheme");

                            j.ToTable("ro_office_scheme").HasComment("Таблица схем партнера для офиса");

                            j.HasIndex(new[] { "OfficeId" }, "office_scheme_office_id_idx");

                            j.HasIndex(new[] { "SchemeId" }, "office_scheme_scheme_id_idx");

                            j.IndexerProperty<int>("OfficeId").HasColumnName("office_id").HasComment("Офис");

                            j.IndexerProperty<int>("SchemeId").HasColumnName("scheme_id").HasComment("Схема партнера");
                        });

                entity.HasMany(d => d.Users)
                    .WithMany(p => p.Offices)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoOfficeUser",
                        l => l.HasOne<RoUser>().WithMany().HasForeignKey("UserId").HasConstraintName("fk_office_user_user"),
                        r => r.HasOne<RoOffice>().WithMany().HasForeignKey("OfficeId").HasConstraintName("fk_office"),
                        j =>
                        {
                            j.HasKey("OfficeId", "UserId").HasName("pk_office_user");

                            j.ToTable("ro_office_user").HasComment("Таблица связи пользователей с офисами");

                            j.HasIndex(new[] { "OfficeId" }, "office_user_office_id_idx");

                            j.HasIndex(new[] { "UserId" }, "office_user_user_id_idx");

                            j.IndexerProperty<int>("OfficeId").HasColumnName("office_id").HasComment("Офис");

                            j.IndexerProperty<int>("UserId").HasColumnName("user_id").HasComment("Пользователь");
                        });
            });

            modelBuilder.Entity<RoOfficeCertificate>(entity =>
            {
                entity.HasKey(e => new { e.OfficeId, e.CertificateId })
                    .HasName("pk_office_certificate");

                entity.ToTable("ro_office_certificate");

                entity.HasComment("Таблица сертификатов офиса");

                entity.HasIndex(e => e.CertificateId, "office_certificate_certificate_id_idx");

                entity.HasIndex(e => e.OfficeId, "office_certificate_office_id_idx");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoOfficeCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoOfficeCertificates)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<RoOfficeSetting>(entity =>
            {
                entity.HasKey(e => new { e.OfficeId, e.SettingId })
                    .HasName("pk_office_setting");

                entity.ToTable("ro_office_setting");

                entity.HasComment("Таблица настроек офисов");

                entity.HasIndex(e => e.OfficeId, "office_setting_office_id_idx");

                entity.HasIndex(e => e.SettingId, "office_setting_setting_id_idx");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.InitialTime)
                    .HasColumnName("initial_time")
                    .HasComment("Время начала действия");

                entity.Property(e => e.SettingValue)
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoOfficeSettings)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoOfficeSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");
            });

            modelBuilder.Entity<RoOfficeTeam>(entity =>
            {
                entity.HasKey(e => e.OfficeTeamId)
                    .HasName("ro_office_team_pkey");

                entity.ToTable("ro_office_team");

                entity.HasComment("Команды");

                entity.Property(e => e.OfficeTeamId)
                    .HasColumnName("office_team_id")
                    .HasComment("Идентификатор команды");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис команды");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoOfficeTeams)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<RoOfficeTeamPerson>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("ro_office_team_person_pkey");

                entity.ToTable("ro_office_team_person");

                entity.HasComment("Участники команды");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Идентификатор участника");

                entity.Property(e => e.OfficeTeamId)
                    .HasColumnName("office_team_id")
                    .HasComment("Команда");

                entity.Property(e => e.PersonName)
                    .HasColumnType("character varying")
                    .HasColumnName("person_name")
                    .HasComment("Фамилия участника");

                entity.HasOne(d => d.OfficeTeam)
                    .WithMany(p => p.RoOfficeTeamPeople)
                    .HasForeignKey(d => d.OfficeTeamId)
                    .HasConstraintName("fk_office_team");
            });

            modelBuilder.Entity<RoOkopf>(entity =>
            {
                entity.HasKey(e => e.OkopfId)
                    .HasName("pk_okopf");

                entity.ToTable("ro_okopf");

                entity.HasComment("Таблица ОКОПФ");

                entity.HasIndex(e => e.Budget, "okopf_budget_idx");

                entity.HasIndex(e => e.Code99, "okopf_code99_idx");

                entity.HasIndex(e => e.StepId, "okopf_step_id_idx");

                entity.HasIndex(e => e.Code2012, "sk_okopf_code2012")
                    .IsUnique();

                entity.Property(e => e.OkopfId)
                    .ValueGeneratedNever()
                    .HasColumnName("okopf_id")
                    .HasComment("Код");

                entity.Property(e => e.Budget)
                    .HasColumnName("budget")
                    .HasComment("Бюджетное учреждение");

                entity.Property(e => e.Code2012)
                    .HasMaxLength(5)
                    .HasColumnName("code2012")
                    .HasComment("Код ОК 028-2012");

                entity.Property(e => e.Code99)
                    .HasMaxLength(2)
                    .HasColumnName("code99")
                    .HasComment("Код ОК 028-99");

                entity.Property(e => e.OkopfName)
                    .HasMaxLength(150)
                    .HasColumnName("okopf_name")
                    .HasComment("Наименование");

                entity.Property(e => e.OkopfShortName)
                    .HasMaxLength(10)
                    .HasColumnName("okopf_short_name");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoOkopfs)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoOneSAbonentContractTariffView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_one_s_abonent_contract_tariff_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");
            });

            modelBuilder.Entity<RoOneSAbonentContractTariffViewEx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_one_s_abonent_contract_tariff_view_ex");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Prolongated).HasColumnName("prolongated");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");
            });

            modelBuilder.Entity<RoOperation>(entity =>
            {
                entity.HasKey(e => e.OperationId)
                    .HasName("pk_operation");

                entity.ToTable("ro_operation");

                entity.HasComment("Таблица операций");

                entity.HasIndex(e => e.OperationName, "sk_operation_name")
                    .IsUnique();

                entity.Property(e => e.OperationId)
                    .ValueGeneratedNever()
                    .HasColumnName("operation_id")
                    .HasComment("Код");

                entity.Property(e => e.OperationName)
                    .HasMaxLength(100)
                    .HasColumnName("operation_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoOperationLog>(entity =>
            {
                entity.HasKey(e => e.OperationLogId)
                    .HasName("pk_operation_log");

                entity.ToTable("ro_operation_log");

                entity.HasComment("Таблица лога операций");

                entity.HasIndex(e => e.ApplicationId, "operation_log_application_id_idx");

                entity.HasIndex(e => e.OperationId, "operation_log_operation_id_idx");

                entity.HasIndex(e => e.UserId, "operation_log_user_id_idx");

                entity.Property(e => e.OperationLogId)
                    .HasColumnName("operation_log_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasComment("Операция");

                entity.Property(e => e.ProductGuid)
                    .HasColumnName("product_guid")
                    .HasComment("ГУИД продукта");

                entity.Property(e => e.RunTime)
                    .HasPrecision(0)
                    .HasColumnName("run_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время выполнения");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.RoOperationLogs)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.RoOperationLogs)
                    .HasForeignKey(d => d.OperationId)
                    .HasConstraintName("fk_operation");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoOperationLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoOperatorIruc>(entity =>
            {
                entity.HasKey(e => e.OperatorIrucId)
                    .HasName("pk_operator_iruc");

                entity.ToTable("ro_operator_iruc");

                entity.HasComment("Таблица операторов ИРУЦ");

                entity.HasIndex(e => e.AgentId, "operator_iruc_agent_id_idx");

                entity.HasIndex(e => e.CertificateId, "operator_iruc_certificate_id_idx");

                entity.HasIndex(e => e.DucId, "operator_iruc_duc_id_idx");

                entity.HasIndex(e => e.SosId, "operator_iruc_sos_id_idx");

                entity.HasIndex(e => e.OperatorIrucName, "sk_operator_iruc_name")
                    .IsUnique();

                entity.Property(e => e.OperatorIrucId)
                    .HasColumnName("operator_iruc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.DucId)
                    .HasColumnName("duc_id")
                    .HasComment("ДУЦ");

                entity.Property(e => e.IrucLogin)
                    .HasMaxLength(15)
                    .HasColumnName("iruc_login")
                    .HasComment("Логин");

                entity.Property(e => e.IrucPassword)
                    .HasMaxLength(15)
                    .HasColumnName("iruc_password")
                    .HasComment("Пароль");

                entity.Property(e => e.OperatorIrucName)
                    .HasMaxLength(100)
                    .HasColumnName("operator_iruc_name")
                    .HasComment("Наименование");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("СОС");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoOperatorIrucs)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoOperatorIrucs)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Duc)
                    .WithMany(p => p.RoOperatorIrucs)
                    .HasForeignKey(d => d.DucId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_duc");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.RoOperatorIrucs)
                    .HasForeignKey(d => d.SosId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_sos");
            });

            modelBuilder.Entity<RoOrder>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("ro_order_pkey");

                entity.ToTable("ro_order");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasComment("Ид");

                entity.Property(e => e.AddrId)
                    .HasColumnName("addr_id")
                    .HasComment("Адрес доставки");

                entity.Property(e => e.BillId)
                    .HasColumnName("bill_id")
                    .HasComment("Счёт");

                entity.Property(e => e.DispatchTime)
                    .HasPrecision(0)
                    .HasColumnName("dispatch_time")
                    .HasComment("Дата отгрузки");

                entity.Property(e => e.DispatchUser)
                    .HasColumnName("dispatch_user")
                    .HasComment("Отгрузивший заказ");

                entity.Property(e => e.Email)
                    .HasColumnType("character varying")
                    .HasColumnName("email");

                entity.Property(e => e.Name)
                    .HasColumnType("character varying")
                    .HasColumnName("name")
                    .HasComment("ФИО");

                entity.Property(e => e.Phone)
                    .HasColumnType("character varying")
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.SumReward)
                    .HasPrecision(10, 2)
                    .HasColumnName("sum_reward")
                    .HasComment("Вознаграждение");

                entity.HasOne(d => d.Addr)
                    .WithMany(p => p.RoOrders)
                    .HasForeignKey(d => d.AddrId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ro_order_addr_id");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.RoOrders)
                    .HasForeignKey(d => d.BillId)
                    .HasConstraintName("fk_ro_order_bill_id");

                entity.HasOne(d => d.DispatchUserNavigation)
                    .WithMany(p => p.RoOrders)
                    .HasForeignKey(d => d.DispatchUser)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_order_fk");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoOrders)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_ro_order_step_id");
            });

            modelBuilder.Entity<RoOrgUnit>(entity =>
            {
                entity.HasKey(e => e.OrgUnitId)
                    .HasName("pk_org_unit");

                entity.ToTable("ro_org_unit");

                entity.HasComment("Таблица подразделений");

                entity.HasIndex(e => e.OrgUnitName, "sk_org_unit_name")
                    .IsUnique();

                entity.Property(e => e.OrgUnitId)
                    .HasColumnName("org_unit_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasComment("Флаг отображения");

                entity.Property(e => e.OrgUnitName)
                    .HasMaxLength(355)
                    .HasColumnName("org_unit_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoPassportDataType>(entity =>
            {
                entity.HasKey(e => e.PassportDataTypeId)
                    .HasName("pk_passport_data_type");

                entity.ToTable("ro_passport_data_type");

                entity.HasComment("Таблица типов данных паспорта");

                entity.HasIndex(e => e.PassportDataTypeName, "sk_passport_data_type_name")
                    .IsUnique();

                entity.Property(e => e.PassportDataTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("passport_data_type_id")
                    .HasComment("Код");

                entity.Property(e => e.PassportDataTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("passport_data_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoPassportType>(entity =>
            {
                entity.HasKey(e => e.PassportTypeId)
                    .HasName("pk_passport_type");

                entity.ToTable("ro_passport_type");

                entity.HasComment("Таблица типов документов удостоверяющих личность");

                entity.HasIndex(e => e.PassportTypeCode, "sk_passport_type_code")
                    .IsUnique();

                entity.HasIndex(e => e.PassportTypeName, "sk_passport_type_name")
                    .IsUnique();

                entity.Property(e => e.PassportTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("passport_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PassportTypeCode)
                    .HasMaxLength(2)
                    .HasColumnName("passport_type_code")
                    .IsFixedLength()
                    .HasComment("Код");

                entity.Property(e => e.PassportTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("passport_type_name")
                    .HasComment("Наименование");

                entity.Property(e => e.PassportTypeNote)
                    .HasColumnType("character varying")
                    .HasColumnName("passport_type_note")
                    .HasComment("Примечание");
            });

            modelBuilder.Entity<RoPermission>(entity =>
            {
                entity.HasKey(e => e.PermissionId)
                    .HasName("pk_permission");

                entity.ToTable("ro_permission");

                entity.HasComment("Таблица разрешений для ключа");

                entity.HasIndex(e => e.TypeId, "permission_type_id_idx");

                entity.Property(e => e.PermissionId)
                    .ValueGeneratedNever()
                    .HasColumnName("permission_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PermissionName)
                    .HasMaxLength(128)
                    .HasColumnName("permission_name")
                    .HasComment("Наименование");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoPermissions)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_permission_type");
            });

            modelBuilder.Entity<RoPermissionType>(entity =>
            {
                entity.HasKey(e => e.PermissionTypeId)
                    .HasName("pk_permission_type");

                entity.ToTable("ro_permission_type");

                entity.HasComment("Таблица типов разрешений");

                entity.HasIndex(e => e.PermissionTypeName, "sk_permission_type_name")
                    .IsUnique();

                entity.Property(e => e.PermissionTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("permission_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PermissionTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("permission_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoPerson>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("pk_person");

                entity.ToTable("ro_person");

                entity.HasComment("Таблица физических лиц");

                entity.HasIndex(e => e.CountryId, "person_country_id_idx");

                entity.HasIndex(e => e.GenderId, "person_gender_id_idx");

                entity.HasIndex(e => e.OfficeId, "person_office_id_idx");

                entity.HasIndex(e => e.PassportTypeId, "person_passport_type_id_idx");

                entity.HasIndex(e => e.UserId, "person_user_id_idx");

                entity.HasIndex(e => new { e.PassportTypeId, e.PassportSeries, e.PassportNumber }, "sk_passport")
                    .IsUnique();

                entity.HasIndex(e => e.Snils, "sk_snils")
                    .IsUnique();

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.BirthDate)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(150)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.CountryId)
                    .HasMaxLength(3)
                    .HasColumnName("country_id")
                    .HasComment("Гражданство");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .HasColumnName("first_name")
                    .HasComment("Имя");

                entity.Property(e => e.GenderId)
                    .HasColumnName("gender_id")
                    .HasComment("Пол");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(24)
                    .HasColumnName("home_phone")
                    .HasComment("Домашний телефон");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН физического лица");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .HasColumnName("last_name")
                    .HasComment("Фамилия");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PasportDate)
                    .HasColumnName("pasport_date")
                    .HasComment("Когда выдан документ");

                entity.Property(e => e.PassportAddon)
                    .HasMaxLength(200)
                    .HasColumnName("passport_addon")
                    .HasComment("Кем выдан документ");

                entity.Property(e => e.PassportEndDate)
                    .HasColumnName("passport_end_date")
                    .HasComment("Дата окончания срока действия паспорта");

                entity.Property(e => e.PassportNumber)
                    .HasMaxLength(25)
                    .HasColumnName("passport_number")
                    .HasComment("Номер документа");

                entity.Property(e => e.PassportSeries)
                    .HasMaxLength(25)
                    .HasColumnName("passport_series")
                    .HasComment("Серия документа");

                entity.Property(e => e.PassportTypeId)
                    .HasColumnName("passport_type_id")
                    .HasComment("Тип документа");

                entity.Property(e => e.PassportUnit)
                    .HasMaxLength(7)
                    .HasColumnName("passport_unit")
                    .HasComment("Код подразделения, выдавшего паспорт");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество");

                entity.Property(e => e.Pseudonym)
                    .HasMaxLength(64)
                    .HasColumnName("pseudonym")
                    .HasComment("Псевдоним");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.RoPeople)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_country");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.RoPeople)
                    .HasForeignKey(d => d.GenderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_gender");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoPeople)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.PassportType)
                    .WithMany(p => p.RoPeople)
                    .HasForeignKey(d => d.PassportTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPeople)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoPersonDoc>(entity =>
            {
                entity.HasKey(e => e.PersonDocId)
                    .HasName("pk_person_doc");

                entity.ToTable("ro_person_doc");

                entity.HasComment("Таблица документов физических лиц");

                entity.HasIndex(e => e.DocId, "person_doc_doc_id_idx");

                entity.HasIndex(e => e.PersonId, "person_doc_person_id_idx");

                entity.HasIndex(e => new { e.PersonId, e.DocId }, "sk_person_doc")
                    .IsUnique();

                entity.Property(e => e.PersonDocId)
                    .HasColumnName("person_doc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Документ");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Продукт");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.RoPersonDocs)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("fk_doc");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.RoPersonDocs)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("fk_person");
            });

            modelBuilder.Entity<RoPfrLayoutScheme>(entity =>
            {
                entity.HasKey(e => new { e.RegionId, e.PfrSchemeTypeId })
                    .HasName("pk_pfr_layout_scheme");

                entity.ToTable("ro_pfr_layout_scheme");

                entity.HasComment("Таблица параметров документов для отправки в ПФР");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.PfrSchemeTypeId)
                    .HasColumnName("pfr_scheme_type_id")
                    .HasComment("Идентификатор типа документа");

                entity.Property(e => e.AttachLimit)
                    .HasColumnName("attach_limit")
                    .HasComment("Максимально возможный суммарный размер вложения (в мб)");

                entity.Property(e => e.AttachLimitFile)
                    .HasColumnName("attach_limit_file")
                    .HasComment("Максимально возможный размер каждого вложения (в мб)");

                entity.Property(e => e.AttachMask)
                    .HasMaxLength(100)
                    .HasColumnName("attach_mask")
                    .HasComment("Формат файлов, которые можно прикрепить к создаваемому документу");

                entity.Property(e => e.AttachZip)
                    .HasColumnName("attach_zip")
                    .HasComment("Возможность зиповать вложения");

                entity.Property(e => e.FileMaskId).HasColumnName("file_mask_id");

                entity.Property(e => e.FullSnils)
                    .HasColumnName("full_snils")
                    .HasComment("Проверка КС СНИЛС");

                entity.Property(e => e.LayoutType)
                    .HasColumnName("layout_type")
                    .HasComment("Отображение направлений в комбобоксе \"Код УПФР по месту назначения пенсии\"");

                entity.Property(e => e.Letter)
                    .HasColumnName("letter")
                    .HasComment("Выбор направлений МПД, для отправки писем");

                entity.Property(e => e.Seniority)
                    .HasColumnName("seniority")
                    .HasComment("Маска имени файла архива макетов ПД");

                entity.Property(e => e.SubjectMaskId).HasColumnName("subject_mask_id");

                entity.HasOne(d => d.FileMask)
                    .WithMany(p => p.RoPfrLayoutSchemes)
                    .HasForeignKey(d => d.FileMaskId)
                    .HasConstraintName("fk_file_mask_id");

                entity.HasOne(d => d.PfrSchemeType)
                    .WithMany(p => p.RoPfrLayoutSchemes)
                    .HasForeignKey(d => d.PfrSchemeTypeId)
                    .HasConstraintName("fk_pfr_scheme_type_id");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoPfrLayoutSchemes)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.SubjectMask)
                    .WithMany(p => p.RoPfrLayoutSchemes)
                    .HasForeignKey(d => d.SubjectMaskId)
                    .HasConstraintName("fk_subject_mask_id");
            });

            modelBuilder.Entity<RoPfrProvider>(entity =>
            {
                entity.HasKey(e => e.PfrProviderId)
                    .HasName("pk_pfr_provider");

                entity.ToTable("ro_pfr_provider");

                entity.HasComment("Таблица провайдеров ПФР");

                entity.HasIndex(e => e.CertificateId, "pfr_provider_certificate_id_idx");

                entity.HasIndex(e => new { e.PfrProviderName, e.PfrProviderSystem }, "sk_pfr_provider")
                    .IsUnique();

                entity.Property(e => e.PfrProviderId)
                    .HasColumnName("pfr_provider_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.PfrProviderName)
                    .HasMaxLength(50)
                    .HasColumnName("pfr_provider_name")
                    .HasComment("Наименование");

                entity.Property(e => e.PfrProviderSystem)
                    .HasMaxLength(50)
                    .HasColumnName("pfr_provider_system")
                    .HasComment("Система");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoPfrProviders)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");
            });

            modelBuilder.Entity<RoPfrSchemeFileMask>(entity =>
            {
                entity.HasKey(e => e.FileMaskId)
                    .HasName("pk_pfr_scheme_file_mask");

                entity.ToTable("ro_pfr_scheme_file_mask");

                entity.HasComment("Таблица масок файлов для ПФР");

                entity.Property(e => e.FileMaskId)
                    .ValueGeneratedNever()
                    .HasColumnName("file_mask_id")
                    .HasComment("ИД маски");

                entity.Property(e => e.FileMask)
                    .HasMaxLength(255)
                    .HasColumnName("file_mask")
                    .HasComment("Маска");
            });

            modelBuilder.Entity<RoPfrSchemeSubjectMask>(entity =>
            {
                entity.HasKey(e => e.SubjectMaskId)
                    .HasName("pk_pfr_scheme_subject_mask");

                entity.ToTable("ro_pfr_scheme_subject_mask");

                entity.HasComment("Таблица масок темы для ПФР");

                entity.Property(e => e.SubjectMaskId)
                    .ValueGeneratedNever()
                    .HasColumnName("subject_mask_id")
                    .HasComment("ИД маски");

                entity.Property(e => e.SubjectMask)
                    .HasMaxLength(255)
                    .HasColumnName("subject_mask")
                    .HasComment("Маска");
            });

            modelBuilder.Entity<RoPfrSchemeType>(entity =>
            {
                entity.HasKey(e => e.PfrSchemeTypeId)
                    .HasName("pk_pfr_scheme_type");

                entity.ToTable("ro_pfr_scheme_type");

                entity.HasComment("Таблица типов документов для отправки в ПФР");

                entity.Property(e => e.PfrSchemeTypeId)
                    .HasColumnName("pfr_scheme_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.LetterCategory)
                    .HasMaxLength(50)
                    .HasColumnName("letter_category")
                    .HasComment("Категория Письма");

                entity.Property(e => e.PfrSchemeTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("pfr_scheme_type_name")
                    .HasComment("Название");
            });

            modelBuilder.Entity<RoPlan>(entity =>
            {
                entity.HasKey(e => e.PlanId)
                    .HasName("ro_plan_pkey");

                entity.ToTable("ro_plan");

                entity.HasComment("План подключений абонентов");

                entity.HasIndex(e => e.PlanName, "ro_plan_plan_name_key")
                    .IsUnique();

                entity.Property(e => e.PlanId)
                    .HasColumnName("plan_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PlanName)
                    .HasColumnType("character varying")
                    .HasColumnName("plan_name")
                    .HasComment("Наименование");

                entity.HasMany(d => d.Schemes)
                    .WithMany(p => p.Plans)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoPlanScheme",
                        l => l.HasOne<RoAgentScheme>().WithMany().HasForeignKey("SchemeId").HasConstraintName("ro_plan_scheme_fk1"),
                        r => r.HasOne<RoPlan>().WithMany().HasForeignKey("PlanId").HasConstraintName("ro_plan_scheme_fk"),
                        j =>
                        {
                            j.HasKey("PlanId", "SchemeId").HasName("pk_plan_scheme");

                            j.ToTable("ro_plan_scheme");

                            j.IndexerProperty<int>("PlanId").HasColumnName("plan_id").HasComment("Ид. плана подключений");

                            j.IndexerProperty<int>("SchemeId").HasColumnName("scheme_id").HasComment("Ид. схемы");
                        });
            });

            modelBuilder.Entity<RoPlanDetail>(entity =>
            {
                entity.HasKey(e => new { e.PlanId, e.Year, e.Month, e.MinValue })
                    .HasName("pk_plan_detail");

                entity.ToTable("ro_plan_detail");

                entity.HasComment("Описание плана подключений");

                entity.HasIndex(e => e.PlanId, "idx_plan_id");

                entity.Property(e => e.PlanId)
                    .HasColumnName("plan_id")
                    .HasComment("Идентификатор плана");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasComment("Год");

                entity.Property(e => e.Month)
                    .HasColumnName("month")
                    .HasComment("Месяц");

                entity.Property(e => e.MinValue)
                    .HasColumnName("min_value")
                    .HasComment("Минимальное значение");

                entity.Property(e => e.MaxValue)
                    .HasColumnName("max_value")
                    .HasComment("Максимальное значение");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("% вознаграждения");

                entity.HasOne(d => d.Plan)
                    .WithMany(p => p.RoPlanDetails)
                    .HasForeignKey(d => d.PlanId)
                    .HasConstraintName("ro_plan_detail_fk");
            });

            modelBuilder.Entity<RoPlugin>(entity =>
            {
                entity.HasKey(e => e.PluginId)
                    .HasName("pk_plugin");

                entity.ToTable("ro_plugin");

                entity.HasComment("Таблица версий БД");

                entity.HasIndex(e => new { e.DefaultTariffId, e.PluginId }, "plugin_default_tariff_id_plugin_id_idx");

                entity.HasIndex(e => e.ProtocolId, "plugin_protocol_id_idx");

                entity.HasIndex(e => e.PluginGuid, "sk_plugin_guid")
                    .IsUnique();

                entity.HasIndex(e => e.PluginName, "sk_plugin_name")
                    .IsUnique();

                entity.Property(e => e.PluginId)
                    .ValueGeneratedNever()
                    .HasColumnName("plugin_id")
                    .HasComment("Код");

                entity.Property(e => e.Basic)
                    .HasColumnName("basic")
                    .HasDefaultValueSql("false")
                    .HasComment("Основной");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DefaultTariffId)
                    .HasColumnName("default_tariff_id")
                    .HasComment("Тариф по умолчанию");

                entity.Property(e => e.PluginGuid)
                    .HasColumnName("plugin_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.PluginName)
                    .HasMaxLength(100)
                    .HasColumnName("plugin_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RoPlugins)
                    .HasForeignKey(d => d.ProtocolId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.RoPluginTariff)
                    .WithMany(p => p.RoPlugins)
                    .HasForeignKey(d => new { d.DefaultTariffId, d.PluginId })
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_plugin_tariff");
            });

            modelBuilder.Entity<RoPluginTariff>(entity =>
            {
                entity.HasKey(e => new { e.TariffId, e.PluginId })
                    .HasName("pk_plugin_tariff");

                entity.ToTable("ro_plugin_tariff");

                entity.HasComment("Таблица тарифов для плагинов");

                entity.HasIndex(e => e.PluginId, "plugin_tariff_plugin_id_idx");

                entity.HasIndex(e => e.ProtocolId, "plugin_tariff_protocol_id_idx");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Код");

                entity.Property(e => e.PluginId)
                    .HasColumnName("plugin_id")
                    .HasComment("Плагин");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.TariffName)
                    .HasMaxLength(100)
                    .HasColumnName("tariff_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.Plugin)
                    .WithMany(p => p.RoPluginTariffs)
                    .HasForeignKey(d => d.PluginId)
                    .HasConstraintName("fk_plugin");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RoPluginTariffs)
                    .HasForeignKey(d => d.ProtocolId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_protocol");
            });

            modelBuilder.Entity<RoPoint>(entity =>
            {
                entity.HasKey(e => e.PointId)
                    .HasName("pk_point");

                entity.ToTable("ro_point");

                entity.HasComment("Таблица точек");

                entity.HasIndex(e => e.AddressId, "point_address_id_idx");

                entity.HasIndex(e => e.AgentId, "point_agent_id_idx");

                entity.HasIndex(e => e.StepId, "point_step_id_idx");

                entity.HasIndex(e => e.PointGuid, "sk_point_guid")
                    .IsUnique();

                entity.Property(e => e.PointId)
                    .HasColumnName("point_id")
                    .HasDefaultValueSql("nextval('ro_transfer_point_transfer_point_id_seq'::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AddressId)
                    .HasColumnName("address_id")
                    .HasComment("Адрес");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Latitude)
                    .HasPrecision(9, 6)
                    .HasColumnName("latitude")
                    .HasComment("Широта");

                entity.Property(e => e.Longitude)
                    .HasPrecision(9, 6)
                    .HasColumnName("longitude")
                    .HasComment("Долгота");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PointGuid)
                    .HasColumnName("point_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.PointName)
                    .HasMaxLength(100)
                    .HasColumnName("point_name")
                    .HasComment("Наименование");

                entity.Property(e => e.Schedule)
                    .HasColumnType("character varying")
                    .HasColumnName("schedule")
                    .HasComment("График работы");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.RoPoints)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_address");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoPoints)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPoints)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoPointStep>(entity =>
            {
                entity.HasKey(e => new { e.PointId, e.StepId, e.LogTime })
                    .HasName("pk_point_step");

                entity.ToTable("ro_point_step");

                entity.HasComment("Таблица состояний точек");

                entity.HasIndex(e => e.PointId, "point_step_point_id_idx");

                entity.HasIndex(e => e.StepId, "point_step_step_id_idx");

                entity.Property(e => e.PointId)
                    .HasColumnName("point_id")
                    .HasComment("Точка");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Point)
                    .WithMany(p => p.RoPointSteps)
                    .HasForeignKey(d => d.PointId)
                    .HasConstraintName("fk_point");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPointSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoPointUse>(entity =>
            {
                entity.HasKey(e => e.PointUseId)
                    .HasName("pk_point_use");

                entity.ToTable("ro_point_use");

                entity.HasComment("Применение точек");

                entity.HasIndex(e => e.PointId, "point_use_point_id_idx");

                entity.HasIndex(e => e.TypeId, "point_use_type_id_idx");

                entity.HasIndex(e => new { e.PointId, e.TypeId }, "sk_point_use")
                    .IsUnique();

                entity.Property(e => e.PointUseId)
                    .HasColumnName("point_use_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PointId)
                    .HasColumnName("point_id")
                    .HasComment("Точка");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.HasOne(d => d.Point)
                    .WithMany(p => p.RoPointUses)
                    .HasForeignKey(d => d.PointId)
                    .HasConstraintName("fk_point");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoPointUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RoPointUseType>(entity =>
            {
                entity.HasKey(e => e.UseTypeId)
                    .HasName("pk_point_use_type");

                entity.ToTable("ro_point_use_type");

                entity.HasComment("Тип применения точки");

                entity.Property(e => e.UseTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("use_type_id")
                    .HasComment("Код");

                entity.Property(e => e.UseTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("use_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoPointZone>(entity =>
            {
                entity.HasKey(e => e.PointZoneId)
                    .HasName("pk_point_zone");

                entity.ToTable("ro_point_zone");

                entity.HasComment("Таблица зон обслуживания точек");

                entity.HasIndex(e => e.PointId, "point_zone_point_id_idx");

                entity.HasIndex(e => e.RegionId, "point_zone_region_id_idx");

                entity.Property(e => e.PointZoneId)
                    .HasColumnName("point_zone_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PointId)
                    .HasColumnName("point_id")
                    .HasComment("Точка");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.HasOne(d => d.Point)
                    .WithMany(p => p.RoPointZones)
                    .HasForeignKey(d => d.PointId)
                    .HasConstraintName("fk_point");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoPointZones)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("fk_region");
            });

            modelBuilder.Entity<RoPortalAccount>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.PortalTypeId })
                    .HasName("pk_portal_account");

                entity.ToTable("ro_portal_account");

                entity.HasComment("Таблица данных по личному кабинету");

                entity.HasIndex(e => e.Login, "portal_account_login_idx");

                entity.HasIndex(e => e.PortalTypeId, "portal_account_portal_type_id_idx");

                entity.HasIndex(e => e.ProductId, "portal_account_product_id_idx");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.PortalTypeId)
                    .HasColumnName("portal_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип личного кабинета");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(40)
                    .HasColumnName("account_id")
                    .HasComment("Идентификатор записи на портале");

                entity.Property(e => e.Login)
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.HasOne(d => d.PortalType)
                    .WithMany(p => p.RoPortalAccounts)
                    .HasForeignKey(d => d.PortalTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_portal_type");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoPortalAccounts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<RoPortalType>(entity =>
            {
                entity.HasKey(e => e.PortalTypeId)
                    .HasName("pk_portal_type");

                entity.ToTable("ro_portal_type");

                entity.HasComment("Таблица типов личных кабинетов");

                entity.HasIndex(e => e.PortalTypeName, "sk_portal_type_name")
                    .IsUnique();

                entity.Property(e => e.PortalTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("portal_type_id")
                    .HasComment("Код");

                entity.Property(e => e.PortalTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("portal_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoPost>(entity =>
            {
                entity.HasKey(e => e.PostId)
                    .HasName("pk_post");

                entity.ToTable("ro_post");

                entity.HasComment("Таблица должностей");

                entity.HasIndex(e => e.PostName, "sk_post_name")
                    .IsUnique();

                entity.Property(e => e.PostId)
                    .HasColumnName("post_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasComment("Флаг отображения");

                entity.Property(e => e.GenitiveName)
                    .HasMaxLength(256)
                    .HasColumnName("genitive_name")
                    .HasComment("Наименование в родительном падеже");

                entity.Property(e => e.PostName)
                    .HasMaxLength(355)
                    .HasColumnName("post_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoPotentialAbonent>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentId)
                    .HasName("pk_potential_client");

                entity.ToTable("ro_potential_abonent");

                entity.HasComment("Таблица потенциальных клиентов");

                entity.HasIndex(e => e.AbonentTypeId, "potential_abonent_abonent_type_id_idx");

                entity.HasIndex(e => e.OfficeId, "potential_abonent_office_id_idx");

                entity.HasIndex(e => e.UserId, "potential_abonent_user_id_idx");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Тип абонента");

                entity.Property(e => e.CityName)
                    .HasMaxLength(200)
                    .HasColumnName("city_name")
                    .HasComment("Город");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DetachedUnitsCount)
                    .HasColumnName("detached_units_count")
                    .HasComment("Количество обособленных предприятий");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("email");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.IsRead)
                    .HasColumnName("is_read")
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг, указывающий на то, был ли прочитан потенциальный абонент");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Name)
                    .HasColumnType("character varying")
                    .HasColumnName("name")
                    .HasComment("Наименование");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офиc");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.Phone)
                    .HasColumnType("character varying")
                    .HasColumnName("phone")
                    .HasComment("Контакты");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RoPotentialAbonents)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type_id");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoPotentialAbonents)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoPotentialAbonents)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPotentialAbonents)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPotentialAbonents)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoPotentialAbonentCall>(entity =>
            {
                entity.HasKey(e => e.CallId)
                    .HasName("pk_call");

                entity.ToTable("ro_potential_abonent_call");

                entity.HasComment("Таблица звонков");

                entity.HasIndex(e => e.PotentialAbonentId, "call_potential_abonent_id_idx");

                entity.HasIndex(e => e.StepId, "call_step_id_idx");

                entity.HasIndex(e => e.StepReasonId, "call_step_reason_id_idx");

                entity.HasIndex(e => e.UserId, "call_user_id_idx");

                entity.Property(e => e.CallId)
                    .HasColumnName("call_id")
                    .HasDefaultValueSql("nextval('ro_call_call_id_seq'::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CallTime)
                    .HasPrecision(0)
                    .HasColumnName("call_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время звонка");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.PlannedCallTime)
                    .HasPrecision(0)
                    .HasColumnName("planned_call_time")
                    .HasComment("Время следующего звонка");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Потенциальный абонент");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.Property(e => e.StepReasonId)
                    .HasColumnName("step_reason_id")
                    .HasComment("Причина состояния");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPotentialAbonentCalls)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StepReason)
                    .WithMany(p => p.RoPotentialAbonentCalls)
                    .HasForeignKey(d => d.StepReasonId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step_reason");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPotentialAbonentCalls)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoPotentialAbonentCallState>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("ro_potential_abonent_call_state_pkey");

                entity.ToTable("ro_potential_abonent_call_state");

                entity.Property(e => e.StateId).HasColumnName("state_id");

                entity.Property(e => e.StateName)
                    .HasMaxLength(50)
                    .HasColumnName("state_name");
            });

            modelBuilder.Entity<RoPotentialAbonentComment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("ro_potential_abonent_comment_pkey");

                entity.ToTable("ro_potential_abonent_comment");

                entity.HasComment("Таблица с сообщениями");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Идентификатор комментария");

                entity.Property(e => e.CommentText)
                    .HasColumnType("character varying")
                    .HasColumnName("comment_text")
                    .HasComment("Текст сообщения");

                entity.Property(e => e.CommentTypeId)
                    .HasColumnName("comment_type_id")
                    .HasComment("Тип сообщения");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasComment("Дата создания");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор лида");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.CommentType)
                    .WithMany(p => p.RoPotentialAbonentComments)
                    .HasForeignKey(d => d.CommentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_potential_abonent_comment_fk_comment_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPotentialAbonentComments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_potential_abonent_comment_fk_users");
            });

            modelBuilder.Entity<RoPotentialAbonentCommentType>(entity =>
            {
                entity.HasKey(e => e.CommentTypeId)
                    .HasName("ro_potential_abonent_comment_type_pkey");

                entity.ToTable("ro_potential_abonent_comment_type");

                entity.HasComment("Таблица типов сообщений");

                entity.HasIndex(e => e.CommentName, "ro_potential_abonent_comment_type_comment_name_key")
                    .IsUnique();

                entity.Property(e => e.CommentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("comment_type_id")
                    .HasComment("Идентификатор типа сообщения");

                entity.Property(e => e.CommentName)
                    .HasColumnType("character varying")
                    .HasColumnName("comment_name")
                    .HasComment("Наименование типа сообщения");
            });

            modelBuilder.Entity<RoPotentialAbonentContactCatalog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_potential_abonent_contact_catalog");

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(100)
                    .HasColumnName("contact_person")
                    .HasComment("Контактное лицо");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("E-mail");

                entity.Property(e => e.Email2)
                    .HasMaxLength(100)
                    .HasColumnName("email2")
                    .HasComment("дополнительный e-mail");

                entity.Property(e => e.Inn)
                    .HasMaxLength(15)
                    .HasColumnName("inn")
                    .HasComment("инн");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(15)
                    .HasColumnName("kpp")
                    .HasComment("кпп");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .HasColumnName("name")
                    .HasComment("Наименование абонента");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .HasColumnName("phone")
                    .HasComment("телефон");
            });

            modelBuilder.Entity<RoPotentialAbonentEgai>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentEgaisId)
                    .HasName("pk_potential_abonent_egais");

                entity.ToTable("ro_potential_abonent_egais");

                entity.HasComment("Информация об обособленных подразеделниях для ЕГАИС");

                entity.Property(e => e.PotentialAbonentEgaisId)
                    .HasColumnName("potential_abonent_egais_id")
                    .HasComment("Идентификатор обособленного подразеделния");

                entity.Property(e => e.Adress)
                    .HasMaxLength(250)
                    .HasColumnName("adress")
                    .HasComment("Адрес обособленного подразеделния");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания действия лицензии");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasComment("Дата выдачи лицензии");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasComment("КПП обособленного подразеделния");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор потенциального абонента");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(3)
                    .HasColumnName("region_code")
                    .HasComment("Код субъекта РФ обособленного подразеделния");

                entity.HasOne(d => d.PotentialAbonent)
                    .WithMany(p => p.RoPotentialAbonentEgais)
                    .HasForeignKey(d => d.PotentialAbonentId)
                    .HasConstraintName("fk_potential_abonent_egais_potential_abonent");
            });

            modelBuilder.Entity<RoPotentialAbonentPerson>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("ro_potential_abonent_person_pkey");

                entity.ToTable("ro_potential_abonent_person");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Идентификатор конкретного индивида");

                entity.Property(e => e.PersonAddress)
                    .HasMaxLength(1000)
                    .HasColumnName("person_address")
                    .HasComment("Адрес");

                entity.Property(e => e.PersonEmail)
                    .HasMaxLength(50)
                    .HasColumnName("person_email");

                entity.Property(e => e.PersonName)
                    .HasMaxLength(80)
                    .HasColumnName("person_name")
                    .HasComment("Имя контактного лица");

                entity.Property(e => e.PersonPhone)
                    .HasMaxLength(50)
                    .HasColumnName("person_phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PersonPost)
                    .HasColumnType("character varying")
                    .HasColumnName("person_post")
                    .HasComment("Должность");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор");
            });

            modelBuilder.Entity<RoPotentialAbonentProductType>(entity =>
            {
                entity.HasKey(e => e.ProductTypeId)
                    .HasName("ro_potential_abonent_products_pkey");

                entity.ToTable("ro_potential_abonent_product_type");

                entity.HasComment("Таблица типов продуктов");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasDefaultValueSql("nextval('ro_potential_abonent_products_product_id_seq'::regclass)")
                    .HasComment("ID типа продукта");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("product_type_name")
                    .HasComment("Наименование типа продукта");
            });

            modelBuilder.Entity<RoPotentialAbonentProvider>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentId)
                    .HasName("ro_potential_abonent_provider_pkey");

                entity.ToTable("ro_potential_abonent_provider");

                entity.HasComment("Таблица для поставщиков");

                entity.Property(e => e.PotentialAbonentId)
                    .ValueGeneratedNever()
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор лида");

                entity.Property(e => e.MaxSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("max_sum")
                    .HasComment("Максимальная сумма аукциона");

                entity.Property(e => e.SumCountAuctions)
                    .HasColumnName("sum_count_auctions")
                    .HasComment("Общее количество участий");

                entity.Property(e => e.SumCountContract)
                    .HasColumnName("sum_count_contract")
                    .HasComment("Общее количество контрагентов");

                entity.Property(e => e.SumCountWin)
                    .HasColumnName("sum_count_win")
                    .HasComment("Общее количество побед");
            });

            modelBuilder.Entity<RoPotentialAbonentRegNum>(entity =>
            {
                entity.HasKey(e => e.RegId)
                    .HasName("ro_potential_abonent_reg_num_pkey");

                entity.ToTable("ro_potential_abonent_reg_num");

                entity.Property(e => e.RegId).HasColumnName("reg_id");

                entity.Property(e => e.PotentialAbonentId).HasColumnName("potential_abonent_id");

                entity.Property(e => e.RegNum)
                    .HasMaxLength(20)
                    .HasColumnName("reg_num");
            });

            modelBuilder.Entity<RoPotentialAbonentRejectionReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId)
                    .HasName("ro_potential_abonent_rejection_reason_pkey");

                entity.ToTable("ro_potential_abonent_rejection_reason");

                entity.Property(e => e.ReasonId).HasColumnName("reason_id");

                entity.Property(e => e.ReasonName)
                    .HasMaxLength(30)
                    .HasColumnName("reason_name");
            });

            modelBuilder.Entity<RoPotentialAbonentRt>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentId)
                    .HasName("ro_potential_abonent_rts_pkey");

                entity.ToTable("ro_potential_abonent_rts");

                entity.HasComment("Таблица с даными о победителях РТС");

                entity.HasIndex(e => e.PurchaseNumber, "ro_potential_abonent_rts_purchase_number_key")
                    .IsUnique();

                entity.Property(e => e.PotentialAbonentId)
                    .ValueGeneratedNever()
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор потенциального клиента");

                entity.Property(e => e.DealReward)
                    .HasPrecision(15, 2)
                    .HasColumnName("deal_reward")
                    .HasComment("Вознаграждение");

                entity.Property(e => e.DealSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("deal_sum")
                    .HasComment("Сумма сделки");

                entity.Property(e => e.GuarantyBeginDate)
                    .HasColumnName("guaranty_begin_date")
                    .HasComment("Начало срока действия банковской гарантии");

                entity.Property(e => e.GuarantyEndDate)
                    .HasColumnName("guaranty_end_date")
                    .HasComment("Конец срока действия банковской гарантии");

                entity.Property(e => e.PlaceAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("place_address")
                    .HasComment("Адрес площадки");

                entity.Property(e => e.PlaceName)
                    .HasColumnType("character varying")
                    .HasColumnName("place_name")
                    .HasComment("Площадка");

                entity.Property(e => e.ProtocolDate)
                    .HasColumnName("protocol_date")
                    .HasComment("Дата протокола о подведении итогов");

                entity.Property(e => e.PurchaseNumber)
                    .HasMaxLength(19)
                    .HasColumnName("purchase_number")
                    .HasComment("Номер закупки");

                entity.Property(e => e.PurchaseTypeId)
                    .HasColumnName("purchase_type_id")
                    .HasComment("Тип закупки");

                entity.HasOne(d => d.PurchaseType)
                    .WithMany(p => p.RoPotentialAbonentRts)
                    .HasForeignKey(d => d.PurchaseTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_potential_abonent_rtc_purchase_type");
            });

            modelBuilder.Entity<RoPotentialAbonentStep>(entity =>
            {
                entity.HasKey(e => new { e.PotentialAbonentId, e.StepId, e.LogTime })
                    .HasName("pk_potential_abonent_step");

                entity.ToTable("ro_potential_abonent_step");

                entity.HasComment("Таблица состояний потенциальных абонентов");

                entity.HasIndex(e => e.PotentialAbonentId, "potential_abonent_step_potential_abonent_id_idx");

                entity.HasIndex(e => e.StepId, "potential_abonent_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "potential_abonent_step_user_id_idx");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Потенциальный абонент");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPotentialAbonentSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPotentialAbonentSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoPotentialAbonentStepType>(entity =>
            {
                entity.HasKey(e => e.StepId)
                    .HasName("pk_step_potential_abonent");

                entity.ToTable("ro_potential_abonent_step_type");

                entity.HasComment("Таблица состояний для модуля \"Потенциальные абоненты\"");

                entity.HasIndex(e => e.StepName, "sk_step_name_potential_abonent")
                    .IsUnique();

                entity.Property(e => e.StepId)
                    .ValueGeneratedNever()
                    .HasColumnName("step_id")
                    .HasComment("Код");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.StepName)
                    .HasMaxLength(100)
                    .HasColumnName("step_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoPotentialAbonentStepTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<RoPotentialAbonentTariff>(entity =>
            {
                entity.HasKey(e => e.TariffId)
                    .HasName("ro_potential_abonent_tariff_pkey");

                entity.ToTable("ro_potential_abonent_tariff");

                entity.HasComment("Таблица тарифов 1С-ЭТП");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("ID тарифа");

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.TariffName)
                    .HasColumnType("character varying")
                    .HasColumnName("tariff_name")
                    .HasComment("Наименование тарифа");

                entity.Property(e => e.TariffTypeId)
                    .HasColumnName("tariff_type_id")
                    .HasComment("ID типа тарифа");

                entity.HasOne(d => d.TariffType)
                    .WithMany(p => p.RoPotentialAbonentTariffs)
                    .HasForeignKey(d => d.TariffTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_potential_abonent_tariff_fk");
            });

            modelBuilder.Entity<RoPotentialAbonentTariffAbonent>(entity =>
            {
                entity.HasKey(e => new { e.PotentialAbonentId, e.TariffId })
                    .HasName("ro_potential_abonent_tariff_abonent_pkey");

                entity.ToTable("ro_potential_abonent_tariff_abonent");

                entity.HasComment("Таблица для связи потенциального абонента и тарифа многие ко многим");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("ID потенциального абонента");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("ID тарифа");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasComment("Количество");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoPotentialAbonentTariffAbonents)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("ro_potential_abonent_tariff_abonent_fk1");
            });

            modelBuilder.Entity<RoPotentialAbonentTariffType>(entity =>
            {
                entity.HasKey(e => e.TariffTypeId)
                    .HasName("potential_abonent_tariff_type_pkey");

                entity.ToTable("ro_potential_abonent_tariff_type");

                entity.HasComment("Таблица для типов тарифов");

                entity.Property(e => e.TariffTypeId)
                    .HasColumnName("tariff_type_id")
                    .HasComment("ID типа тарифа");

                entity.Property(e => e.TariffTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("tariff_type_name")
                    .HasComment("Наименование типа тарифа");
            });

            modelBuilder.Entity<RoPotentialAbonentTradingPlatform>(entity =>
            {
                entity.HasKey(e => e.AbonentPlatformId)
                    .HasName("pk_abonent_platform");

                entity.ToTable("ro_potential_abonent_trading_platform");

                entity.Property(e => e.AbonentPlatformId)
                    .HasColumnName("abonent_platform_id")
                    .HasDefaultValueSql("nextval('ro_potential_abonent_trading_platform_id_seq'::regclass)")
                    .HasComment("Идентификатор торговой площадки");

                entity.Property(e => e.EndDate)
                    .HasPrecision(0)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания сертификата");

                entity.Property(e => e.InitialDate)
                    .HasPrecision(0)
                    .HasColumnName("initial_date")
                    .HasComment("Дата начала сертификата");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор потенциального абонента");

                entity.Property(e => e.TradingPlatformTypeId)
                    .HasColumnName("trading_platform_type_id")
                    .HasComment("Идентификатор типа торговой площадки");

                entity.HasOne(d => d.TradingPlatformType)
                    .WithMany(p => p.RoPotentialAbonentTradingPlatforms)
                    .HasForeignKey(d => d.TradingPlatformTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_trading_platform_type");
            });

            modelBuilder.Entity<RoPotentialAbonentTradingPlatformType>(entity =>
            {
                entity.HasKey(e => e.TradingPlatformTypeId)
                    .HasName("pk_trading_platform_type");

                entity.ToTable("ro_potential_abonent_trading_platform_type");

                entity.Property(e => e.TradingPlatformTypeId)
                    .HasColumnName("trading_platform_type_id")
                    .HasDefaultValueSql("nextval('ro_potential_abonent_trading_platform_type_id_seq'::regclass)")
                    .HasComment("Идентификатор типа торговой площадки");

                entity.Property(e => e.TradingPlatformName)
                    .HasMaxLength(100)
                    .HasColumnName("trading_platform_name")
                    .HasComment("Наименование торговой площадки");
            });

            modelBuilder.Entity<RoPotentialAbonentUcb>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentId)
                    .HasName("ro_potential_abonent_ucb_pkey");

                entity.ToTable("ro_potential_abonent_ucb");

                entity.HasComment("Таблица с данными для ЮКБ");

                entity.Property(e => e.PotentialAbonentId)
                    .ValueGeneratedNever()
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор лида");

                entity.Property(e => e.CertNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("cert_number")
                    .HasComment("Номер сертификата ЮКБ");

                entity.Property(e => e.UcbTransferDate)
                    .HasColumnName("ucb_transfer_date")
                    .HasComment("Дата передачи в ЮКБ");

                entity.Property(e => e.UcbUserId)
                    .HasColumnName("ucb_user_id")
                    .HasComment("Менеджер ЮКБ");

                entity.HasOne(d => d.PotentialAbonent)
                    .WithOne(p => p.RoPotentialAbonentUcb)
                    .HasForeignKey<RoPotentialAbonentUcb>(d => d.PotentialAbonentId)
                    .HasConstraintName("ro_potential_abonent_ucb_fk");

                entity.HasOne(d => d.UcbUser)
                    .WithMany(p => p.RoPotentialAbonentUcbs)
                    .HasForeignKey(d => d.UcbUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_potential_abonent_ucb_fk_users");
            });

            modelBuilder.Entity<RoPotentialAbonentUserRegion>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RegionId })
                    .HasName("ro_paur_pk");

                entity.ToTable("ro_potential_abonent_user_region");

                entity.HasComment("Таблица регионов пользователей для потенциальных клиентов");

                entity.HasIndex(e => e.RegionId, "paur_region_id_idx");

                entity.HasIndex(e => e.UserId, "paur_user_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoPotentialAbonentUserRegions)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("ro_paur_region_fkey");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPotentialAbonentUserRegions)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("ro_paur_user_fkey");
            });

            modelBuilder.Entity<RoPotentialAbonentWorkflow>(entity =>
            {
                entity.HasKey(e => e.WorkflowGuid)
                    .HasName("pk_potential_abonent_workflow");

                entity.ToTable("ro_potential_abonent_workflow");

                entity.HasComment("Таблица документооборотов для потенциальных клиентов");

                entity.HasIndex(e => e.PotentialAbonentId, "potential_abonent_workflow_potential_abonent_id_idx");

                entity.HasIndex(e => e.RegBankRequestId, "potential_abonent_workflow_reg_bank_request_id_idx");

                entity.HasIndex(e => e.WorkflowTypeId, "potential_abonent_workflow_workflow_type_id_idx");

                entity.Property(e => e.WorkflowGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("workflow_guid")
                    .HasComment("GUID документооборота");

                entity.Property(e => e.CompletedTime)
                    .HasPrecision(0)
                    .HasColumnName("completed_time")
                    .HasComment("Дата завершения");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Потенциальный абонент");

                entity.Property(e => e.RegBankRequestId)
                    .HasColumnName("reg_bank_request_id")
                    .HasComment("Заявление на БГ");

                entity.Property(e => e.StartedTime)
                    .HasPrecision(0)
                    .HasColumnName("started_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата начала");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип документооборота");

                entity.HasOne(d => d.RegBankRequest)
                    .WithMany(p => p.RoPotentialAbonentWorkflows)
                    .HasForeignKey(d => d.RegBankRequestId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_reg_bank_request");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.RoPotentialAbonentWorkflows)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<RoPrice>(entity =>
            {
                entity.HasKey(e => e.PriceId)
                    .HasName("pk_price");

                entity.ToTable("ro_price");

                entity.HasComment("Таблица прайсов");

                entity.HasIndex(e => e.PriceGroupId, "price_price_group_id_idx");

                entity.HasIndex(e => e.Article, "sk_price_article")
                    .IsUnique();

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Article)
                    .HasMaxLength(40)
                    .HasColumnName("article")
                    .HasComment("Артикул");

                entity.Property(e => e.PriceGroupId)
                    .HasColumnName("price_group_id")
                    .HasComment("Группа");

                entity.Property(e => e.PriceName)
                    .HasMaxLength(100)
                    .HasColumnName("price_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.PriceGroup)
                    .WithMany(p => p.RoPrices)
                    .HasForeignKey(d => d.PriceGroupId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_price_group");
            });

            modelBuilder.Entity<RoPriceDiscount>(entity =>
            {
                entity.HasKey(e => new { e.PriceId, e.DiscountId })
                    .HasName("pk_price_discount");

                entity.ToTable("ro_price_discount");

                entity.HasComment("Таблица скидок прайса");

                entity.HasIndex(e => e.DiscountId, "price_discount_discount_id_idx");

                entity.HasIndex(e => e.PriceId, "price_discount_price_id_idx");

                entity.HasIndex(e => e.StepId, "price_discount_step_id_idx");

                entity.HasIndex(e => e.UserId, "price_discount_user_id_idx");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время начала");

                entity.Property(e => e.RegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("registered_name")
                    .HasComment("Наименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.RoPriceDiscounts)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.Price)
                    .WithMany(p => p.RoPriceDiscounts)
                    .HasForeignKey(d => d.PriceId)
                    .HasConstraintName("fk_price");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPriceDiscounts)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPriceDiscounts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoPriceDiscountStep>(entity =>
            {
                entity.HasKey(e => new { e.PriceId, e.DiscountId, e.StepId, e.LogTime })
                    .HasName("pk_price_discount_step");

                entity.ToTable("ro_price_discount_step");

                entity.HasComment("Таблица состояний скидок прайсов");

                entity.HasIndex(e => e.DiscountId, "price_discount_step_discount_id_idx");

                entity.HasIndex(e => new { e.PriceId, e.DiscountId }, "price_discount_step_price_id_discount_id_idx");

                entity.HasIndex(e => e.PriceId, "price_discount_step_price_id_idx");

                entity.HasIndex(e => e.StepId, "price_discount_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "price_discount_step_user_id_idx");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.RoPriceDiscountSteps)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.Price)
                    .WithMany(p => p.RoPriceDiscountSteps)
                    .HasForeignKey(d => d.PriceId)
                    .HasConstraintName("fk_price");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPriceDiscountSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPriceDiscountSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.RoPriceDiscount)
                    .WithMany(p => p.RoPriceDiscountSteps)
                    .HasForeignKey(d => new { d.PriceId, d.DiscountId })
                    .HasConstraintName("fk_price_discount");
            });

            modelBuilder.Entity<RoPriceGroup>(entity =>
            {
                entity.HasKey(e => e.PriceGroupId)
                    .HasName("pk_price_group");

                entity.ToTable("ro_price_group");

                entity.HasComment("Таблица групп прайсов");

                entity.HasIndex(e => e.PriceGroupName, "sk_price_group_name")
                    .IsUnique();

                entity.Property(e => e.PriceGroupId)
                    .HasColumnName("price_group_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PriceGroupName)
                    .HasMaxLength(100)
                    .HasColumnName("price_group_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoPriceScheme>(entity =>
            {
                entity.HasKey(e => new { e.RegionId, e.TariffZoneId, e.ProductTypeId })
                    .HasName("pk_price_scheme");

                entity.ToTable("ro_price_scheme");

                entity.HasComment("Таблица ценовых схем");

                entity.HasIndex(e => e.CompetenceCenterId, "price_scheme_competence_center_id_idx");

                entity.HasIndex(e => e.LeadOfficeId, "price_scheme_lead_office_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "price_scheme_product_type_idx");

                entity.HasIndex(e => e.RegionId, "price_scheme_region_id_idx");

                entity.HasIndex(e => e.TariffZoneId, "price_scheme_tariff_zone_id_idx");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.TariffZoneId)
                    .HasColumnName("tariff_zone_id")
                    .HasComment("Тарифная зона");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.CompetenceCenterId)
                    .HasColumnName("competence_center_id")
                    .HasComment("Центр компетенции");

                entity.Property(e => e.LeadOfficeId)
                    .HasColumnName("lead_office_id")
                    .HasComment("Ведущий партнер");

                entity.HasOne(d => d.CompetenceCenter)
                    .WithMany(p => p.RoPriceSchemeCompetenceCenters)
                    .HasForeignKey(d => d.CompetenceCenterId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_competence_center");

                entity.HasOne(d => d.LeadOffice)
                    .WithMany(p => p.RoPriceSchemeLeadOffices)
                    .HasForeignKey(d => d.LeadOfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_lead_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoPriceSchemes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoPriceSchemes)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.TariffZone)
                    .WithMany(p => p.RoPriceSchemes)
                    .HasForeignKey(d => d.TariffZoneId)
                    .HasConstraintName("fk_tariff_zone");
            });

            modelBuilder.Entity<RoPriceSection>(entity =>
            {
                entity.HasKey(e => e.SectionId)
                    .HasName("pk_price_section");

                entity.ToTable("ro_price_section");

                entity.HasComment("Таблица секций прайсов");

                entity.HasIndex(e => e.ParentSectionId, "price_section_parent_section_id_idx");

                entity.HasIndex(e => e.PriceId, "price_section_price_id_idx");

                entity.HasIndex(e => new { e.SectionName, e.ParentSectionId }, "sk_price_section")
                    .IsUnique();

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ParentSectionId)
                    .HasColumnName("parent_section_id")
                    .HasComment("Родительская секция");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.SectionName)
                    .HasMaxLength(200)
                    .HasColumnName("section_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.ParentSection)
                    .WithMany(p => p.InverseParentSection)
                    .HasForeignKey(d => d.ParentSectionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_parent_section");

                entity.HasOne(d => d.Price)
                    .WithMany(p => p.RoPriceSections)
                    .HasForeignKey(d => d.PriceId)
                    .HasConstraintName("fk_price");
            });

            modelBuilder.Entity<RoPriceTariff>(entity =>
            {
                entity.HasKey(e => new { e.SectionId, e.TariffId })
                    .HasName("pk_price_tariff");

                entity.ToTable("ro_price_tariff");

                entity.HasComment("Таблица услуг прайсов");

                entity.HasIndex(e => e.SectionId, "price_tariff_section_id_idx");

                entity.HasIndex(e => e.StepId, "price_tariff_step_id_idx");

                entity.HasIndex(e => e.TariffId, "price_tariff_tariff_id_idx");

                entity.HasIndex(e => e.UserId, "price_tariff_user_id_idx");

                entity.HasIndex(e => e.PriceTariffId, "sk_price_tariff_id")
                    .IsUnique();

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.Article)
                    .HasMaxLength(50)
                    .HasColumnName("article")
                    .HasComment("Артикул");

                entity.Property(e => e.Displayed)
                    .IsRequired()
                    .HasColumnName("displayed")
                    .HasDefaultValueSql("true")
                    .HasComment("Показывать");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания");

                entity.Property(e => e.MarketingName)
                    .HasMaxLength(200)
                    .HasColumnName("marketing_name")
                    .HasComment("Маркетинговое название");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note");

                entity.Property(e => e.PriceTariffId)
                    .HasColumnName("price_tariff_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Идентификатор позиции в прайсе");

                entity.Property(e => e.RegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("registered_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ShortNote)
                    .HasMaxLength(255)
                    .HasColumnName("short_note")
                    .HasComment("Краткое описание тарифа");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.RoPriceTariffs)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPriceTariffs)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoPriceTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPriceTariffs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoPriceTariffStep>(entity =>
            {
                entity.HasKey(e => new { e.SectionId, e.TariffId, e.StepId, e.LogTime })
                    .HasName("pk_price_tariff_step");

                entity.ToTable("ro_price_tariff_step");

                entity.HasComment("Таблица состояний услуг прайсов");

                entity.HasIndex(e => e.SectionId, "price_tariff_step_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "price_tariff_step_section_id_tariff_id_idx");

                entity.HasIndex(e => e.StepId, "price_tariff_step_step_id_idx");

                entity.HasIndex(e => e.TariffId, "price_tariff_step_tariff_id_idx");

                entity.HasIndex(e => e.UserId, "price_tariff_step_user_id_idx");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.RoPriceTariffSteps)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoPriceTariffSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoPriceTariffSteps)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoPriceTariffSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.RoPriceTariff)
                    .WithMany(p => p.RoPriceTariffSteps)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<RoPriceTrend>(entity =>
            {
                entity.HasKey(e => new { e.SectionId, e.TariffId, e.InitialTime })
                    .HasName("pk_price_trend");

                entity.ToTable("ro_price_trend");

                entity.HasComment("История цен");

                entity.HasIndex(e => e.SectionId, "price_trend_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "price_trend_section_id_tariff_id_idx");

                entity.HasIndex(e => e.TariffId, "price_trend_tariff_id_idx");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время начала");

                entity.Property(e => e.Cost)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost")
                    .HasComment("Затраты");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.RoPriceTrends)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoPriceTrends)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.RoPriceTariff)
                    .WithMany(p => p.RoPriceTrends)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<RoProcessingMode>(entity =>
            {
                entity.HasKey(e => e.ModeId)
                    .HasName("pk_mode");

                entity.ToTable("ro_processing_mode");

                entity.HasComment("Таблица режимов обработки");

                entity.HasIndex(e => e.ModeName, "sk_mode_name")
                    .IsUnique();

                entity.Property(e => e.ModeId)
                    .ValueGeneratedNever()
                    .HasColumnName("mode_id")
                    .HasComment("Код");

                entity.Property(e => e.ModeName)
                    .HasMaxLength(100)
                    .HasColumnName("mode_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoProcessingProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ApplicationId })
                    .HasName("pk_processing_product");

                entity.ToTable("ro_processing_product");

                entity.HasComment("Таблица продуктов в обработке");

                entity.HasIndex(e => e.ApplicationId, "processing_product_application_id_idx");

                entity.HasIndex(e => e.ModeId, "processing_product_mode_id_idx");

                entity.HasIndex(e => e.ProductId, "processing_product_product_id_idx");

                entity.HasIndex(e => e.UserId, "processing_product_user_id_idx");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.BlockTime)
                    .HasPrecision(0)
                    .HasColumnName("block_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время блокировки");

                entity.Property(e => e.ModeId)
                    .HasColumnName("mode_id")
                    .HasDefaultValueSql("3")
                    .HasComment("Режим");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.RoProcessingProducts)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Mode)
                    .WithMany(p => p.RoProcessingProducts)
                    .HasForeignKey(d => d.ModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_mode");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoProcessingProducts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoProduct>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("pk_product");

                entity.ToTable("ro_product");

                entity.HasComment("Таблица продуктов");

                entity.HasIndex(e => e.AbonentId, "product_abonent_id_idx");

                entity.HasIndex(e => e.AbonentLocationAddressId, "product_abonent_location_address_id_idx");

                entity.HasIndex(e => e.AbonentPostalAddressId, "product_abonent_postal_address_id_idx");

                entity.HasIndex(e => e.AbonentShortName, "product_abonent_short_name_idx");

                entity.HasIndex(e => e.AccrRepresentId, "product_accr_represent_id_idx");

                entity.HasIndex(e => e.CategoryId, "product_category_id_idx");

                entity.HasIndex(e => e.ContractId, "product_contract_id_idx");

                entity.HasIndex(e => e.LicFileId, "product_lic_file_id_idx");

                entity.HasIndex(e => e.OfficeId, "product_office_id_idx");

                entity.HasIndex(e => e.PacketId, "product_packet_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "product_product_type_id_idx");

                entity.HasIndex(e => e.ProxyAgentId, "product_proxy_agent_id_idx");

                entity.HasIndex(e => e.RegFileId, "product_reg_file_id_idx");

                entity.HasIndex(e => e.SafeId, "product_safe_id_idx");

                entity.HasIndex(e => e.StepId, "product_step_id_idx");

                entity.HasIndex(e => e.StorageTypeId, "product_storage_type_id_idx");

                entity.HasIndex(e => e.UserId, "product_user_id_idx");

                entity.HasIndex(e => new { e.AbonentId, e.ProductId }, "sk_product")
                    .IsUnique();

                entity.HasIndex(e => e.ProductGuid, "sk_product_guid")
                    .IsUnique();

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentEmail)
                    .HasMaxLength(100)
                    .HasColumnName("abonent_email")
                    .HasComment("Эл. почта");

                entity.Property(e => e.AbonentFullName)
                    .HasColumnType("character varying")
                    .HasColumnName("abonent_full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.AbonentKpFss)
                    .HasMaxLength(4)
                    .HasColumnName("abonent_kp_fss")
                    .HasComment("Код подразделения ФСС");

                entity.Property(e => e.AbonentLocationAddressId)
                    .HasColumnName("abonent_location_address_id")
                    .HasComment("Фактический адрес");

                entity.Property(e => e.AbonentPostalAddressId)
                    .HasColumnName("abonent_postal_address_id")
                    .HasComment("Юридический адрес");

                entity.Property(e => e.AbonentRnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("abonent_rns_fss")
                    .HasComment("Рег. номер ФСС");

                entity.Property(e => e.AbonentRnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("abonent_rns_pfr")
                    .HasComment("Рег. номер ПФР");

                entity.Property(e => e.AbonentShortName)
                    .HasMaxLength(500)
                    .HasColumnName("abonent_short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Идентификатор типа абонента этого продукта");

                entity.Property(e => e.AccrRepresent)
                    .HasColumnName("accr_represent")
                    .HasComment("Зависимый");

                entity.Property(e => e.AccrRepresentId)
                    .HasColumnName("accr_represent_id")
                    .HasComment("УП");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasComment("Категория");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Договор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DateFixed)
                    .HasColumnName("date_fixed")
                    .HasComment("Дата окончания");

                entity.Property(e => e.FirstRate)
                    .HasColumnName("first_rate")
                    .HasComment("Крупнейший");

                entity.Property(e => e.HardCodeSos)
                    .HasColumnName("hard_code_sos")
                    .HasComment("Привязка к СОС");

                entity.Property(e => e.IsIts)
                    .HasColumnName("is_its")
                    .HasComment("Флаг ИТС");

                entity.Property(e => e.IsPartial)
                    .HasColumnName("is_partial")
                    .HasComment("Частичный рег-файл");

                entity.Property(e => e.LazyUpdate)
                    .HasColumnName("lazy_update")
                    .HasComment("Отложенное обновление");

                entity.Property(e => e.LicFileId)
                    .HasColumnName("lic_file_id")
                    .HasComment("Файл лицензии");

                entity.Property(e => e.MailLogin)
                    .HasMaxLength(50)
                    .HasColumnName("mail_login")
                    .HasComment("Почтовый логин");

                entity.Property(e => e.MailPassword)
                    .HasMaxLength(50)
                    .HasColumnName("mail_password")
                    .HasComment("Почтовый пароль");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный телефон");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Okpo)
                    .HasMaxLength(14)
                    .HasColumnName("okpo")
                    .HasComment("ОКПО");

                entity.Property(e => e.PacketId)
                    .HasColumnName("packet_id")
                    .HasComment("Пакет обновления");

                entity.Property(e => e.ProductGuid)
                    .HasColumnName("product_guid")
                    .HasComment("Наименование");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version")
                    .HasComment("Версия программы (конфигурации)");

                entity.Property(e => e.ProxyAgentId)
                    .HasColumnName("proxy_agent_id")
                    .HasComment("УП");

                entity.Property(e => e.Pseudonym)
                    .HasMaxLength(100)
                    .HasColumnName("pseudonym")
                    .HasComment("Псевдоним");

                entity.Property(e => e.RegFileId)
                    .HasColumnName("reg_file_id")
                    .HasComment("Рег-файл");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number")
                    .HasComment("Рег. номер продукта");

                entity.Property(e => e.SafeId)
                    .HasColumnName("safe_id")
                    .HasComment("Конфиденциальные данные");

                entity.Property(e => e.SmsConfirmation)
                    .HasColumnName("sms_confirmation")
                    .HasComment("СМС подтверждение");

                entity.Property(e => e.StPfr)
                    .HasColumnName("st_pfr")
                    .HasComment("Тип РНС ПФР");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.Property(e => e.TaxSystemId)
                    .HasColumnName("tax_system_id")
                    .HasComment("Идентификатор системы налогообложения");

                entity.Property(e => e.TransferPointId)
                    .HasColumnName("transfer_point_id")
                    .HasComment("Точка выдачи");

                entity.Property(e => e.UpdateDate)
                    .HasPrecision(0)
                    .HasColumnName("update_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления рег-пакета");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoProductAbonents)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.AbonentLocationAddress)
                    .WithMany(p => p.RoProductAbonentLocationAddresses)
                    .HasForeignKey(d => d.AbonentLocationAddressId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_abonent_location_address");

                entity.HasOne(d => d.AbonentPostalAddress)
                    .WithMany(p => p.RoProductAbonentPostalAddresses)
                    .HasForeignKey(d => d.AbonentPostalAddressId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_postal_address");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_abonent_type_id");

                entity.HasOne(d => d.AccrRepresentNavigation)
                    .WithMany(p => p.RoProductAccrRepresentNavigations)
                    .HasForeignKey(d => d.AccrRepresentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_accr_represent");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_category");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_contract");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.ProxyAgent)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.ProxyAgentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_proxy_agent");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_storage_type");

                entity.HasOne(d => d.TaxSystem)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.TaxSystemId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tax_system");

                entity.HasOne(d => d.TransferPoint)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.TransferPointId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_transfer_point");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoProducts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoProductChecking>(entity =>
            {
                entity.HasKey(e => e.CheckingId)
                    .HasName("pk_product_checking");

                entity.ToTable("ro_product_checking");

                entity.HasComment("Таблица проверок для продуктов");

                entity.HasIndex(e => e.TaskId, "idx_ro_product_checking_task_id");

                entity.HasIndex(e => e.CheckingTypeId, "product_checking_checking_type_id_idx");

                entity.HasIndex(e => e.ContentId, "product_checking_content_id_idx");

                entity.HasIndex(e => e.ProductId, "product_checking_product_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "product_checking_product_person_id_idx");

                entity.HasIndex(e => e.StepId, "product_checking_step_id_idx");

                entity.HasIndex(e => new { e.StepId, e.CheckingTypeId }, "product_checking_step_id_type_id");

                entity.HasIndex(e => new { e.ProductId, e.ProductPersonId, e.CheckingTypeId }, "sk_product_checking")
                    .IsUnique();

                entity.Property(e => e.CheckingId)
                    .HasColumnName("checking_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CheckingTime)
                    .HasPrecision(0)
                    .HasColumnName("checking_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата проверки");

                entity.Property(e => e.CheckingTypeId)
                    .HasColumnName("checking_type_id")
                    .HasComment("Тип проверки");

                entity.Property(e => e.ContentId)
                    .HasColumnName("content_id")
                    .HasComment("Содержание проверки");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.CheckingType)
                    .WithMany(p => p.RoProductCheckings)
                    .HasForeignKey(d => d.CheckingTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_checking_type");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.RoProductCheckings)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_content");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoProductCheckings)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RoProductCheckings)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoProductCheckings)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoProductCheckings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoProductCheckingStep>(entity =>
            {
                entity.HasKey(e => new { e.CheckingId, e.StepId, e.LogTime })
                    .HasName("pk_product_checking_step");

                entity.ToTable("ro_product_checking_step");

                entity.HasComment("Таблица состояний проверок по продуктам");

                entity.HasIndex(e => e.CheckingId, "product_checking_step_checking_id_idx");

                entity.HasIndex(e => e.LogTime, "product_checking_step_log_time_idx");

                entity.HasIndex(e => e.StepId, "product_checking_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "product_checking_step_user_id_idx");

                entity.Property(e => e.CheckingId)
                    .HasColumnName("checking_id")
                    .HasComment("Проверка");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Checking)
                    .WithMany(p => p.RoProductCheckingSteps)
                    .HasForeignKey(d => d.CheckingId)
                    .HasConstraintName("fk_checking");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoProductCheckingSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoProductCheckingSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoProductContractTariff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_product_contract_tariff");

                entity.Property(e => e.AbonentEmail)
                    .HasMaxLength(100)
                    .HasColumnName("abonent_email");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.Cost)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.IsPrimary).HasColumnName("is_primary");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.PStepId).HasColumnName("p_step_id");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version");

                entity.Property(e => e.RegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("registration_date");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number");

                entity.Property(e => e.SectionId).HasColumnName("section_id");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.Sum)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.UserUin)
                    .HasMaxLength(255)
                    .HasColumnName("user_uin");

                entity.Property(e => e.WaitingDays).HasColumnName("waiting_days");
            });

            modelBuilder.Entity<RoProductContractTariffView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_product_contract_tariff_view");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<RoProductDoc>(entity =>
            {
                entity.HasKey(e => e.ProductDocId)
                    .HasName("pk_product_doc");

                entity.ToTable("ro_product_doc");

                entity.HasComment("Таблица документов продуктов");

                entity.HasIndex(e => e.AbonentId, "product_doc_abonent_id_idx");

                entity.HasIndex(e => new { e.DocId, e.AbonentId }, "product_doc_doc_id_abonent_id_idx");

                entity.HasIndex(e => e.KeyId, "product_doc_key_id_idx");

                entity.HasIndex(e => new { e.ProductId, e.AbonentId }, "product_doc_product_id_abonent_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "product_doc_product_person_id_idx");

                entity.HasIndex(e => new { e.DocId, e.ProductId, e.ProductPersonId, e.KeyId }, "sk_product_doc")
                    .IsUnique();

                entity.Property(e => e.ProductDocId)
                    .HasColumnName("product_doc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Документ");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Владелец ключа");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoProductDocs)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.RoProductDocs)
                    .HasForeignKey(d => d.KeyId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_key");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RoProductDocs)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.RoDoc)
                    .WithMany(p => p.RoProductDocs)
                    .HasPrincipalKey(p => new { p.DocId, p.AbonentId })
                    .HasForeignKey(d => new { d.DocId, d.AbonentId })
                    .HasConstraintName("fk_doc");
            });

            modelBuilder.Entity<RoProductNetNode>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.GateGuid })
                    .HasName("pk_product_net_node");

                entity.ToTable("ro_product_net_node");

                entity.HasComment("Таблица сетевых узло продуктов");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.GateGuid)
                    .HasColumnName("gate_guid")
                    .HasComment("Шлюз Астрал Онлайн");

                entity.Property(e => e.NetNodeName)
                    .HasColumnType("character varying")
                    .HasColumnName("net_node_name")
                    .HasComment("Сетевой узел");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5");

                entity.HasOne(d => d.GateGu)
                    .WithMany(p => p.RoProductNetNodes)
                    .HasForeignKey(d => d.GateGuid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_gate");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoProductNetNodes)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoProductNetNodes)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step_id");
            });

            modelBuilder.Entity<RoProductNetNodeStep>(entity =>
            {
                entity.HasKey(e => e.ProductNetNodeStepId)
                    .HasName("pk_product_net_node_step");

                entity.ToTable("ro_product_net_node_step");

                entity.HasComment("Таблица логов изменений статусов гейтов продуктов");

                entity.Property(e => e.ProductNetNodeStepId)
                    .HasColumnName("product_net_node_step_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.LogTime)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время смены шага");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoProductNetNodeSteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step_id");

                entity.HasOne(d => d.RoProductNetNode)
                    .WithMany(p => p.RoProductNetNodeSteps)
                    .HasForeignKey(d => new { d.ProductId, d.GateId })
                    .HasConstraintName("fk_product_net_node_id");
            });

            modelBuilder.Entity<RoProductNotice>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("pk_product_notice");

                entity.ToTable("ro_product_notice");

                entity.HasComment("Таблица периодов времени уведомлений для абонентов");

                entity.Property(e => e.ProductId)
                    .ValueGeneratedNever()
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.BeginTime)
                    .HasColumnName("begin_time")
                    .HasComment("Время начала уведомлений");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasComment("Время завершения уведомлений");

                entity.Property(e => e.TimeOffset)
                    .HasColumnName("time_offset")
                    .HasComment("Смещение времени");

                entity.HasOne(d => d.Product)
                    .WithOne(p => p.RoProductNotice)
                    .HasForeignKey<RoProductNotice>(d => d.ProductId)
                    .HasConstraintName("fk_product_notice");
            });

            modelBuilder.Entity<RoProductPassportChecking>(entity =>
            {
                entity.HasKey(e => e.PassportCheckingId)
                    .HasName("pk_product_passport_checking");

                entity.ToTable("ro_product_passport_checking");

                entity.HasComment("Таблица проверки данных паспорта для продуктов");

                entity.HasIndex(e => e.PassportDataTypeId, "product_passport_checking_passport_data_type_id_idx");

                entity.HasIndex(e => e.ProductCheckingId, "product_passport_checking_product_checking_id_idx");

                entity.Property(e => e.PassportCheckingId)
                    .HasColumnName("passport_checking_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IsEquals)
                    .HasColumnName("is_equals")
                    .HasComment("Данные совпадают");

                entity.Property(e => e.PassportDataFromProduct)
                    .HasMaxLength(200)
                    .HasColumnName("passport_data_from_product")
                    .HasComment("Данные паспорта из продукта");

                entity.Property(e => e.PassportDataFromScan)
                    .HasMaxLength(200)
                    .HasColumnName("passport_data_from_scan")
                    .HasComment("Данные паспорта со скана");

                entity.Property(e => e.PassportDataTypeId)
                    .HasColumnName("passport_data_type_id")
                    .HasComment("Тип данных паспорта");

                entity.Property(e => e.ProductCheckingId)
                    .HasColumnName("product_checking_id")
                    .HasComment("Проверка скана паспорта");

                entity.HasOne(d => d.PassportDataType)
                    .WithMany(p => p.RoProductPassportCheckings)
                    .HasForeignKey(d => d.PassportDataTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_data_type");

                entity.HasOne(d => d.ProductChecking)
                    .WithMany(p => p.RoProductPassportCheckings)
                    .HasForeignKey(d => d.ProductCheckingId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_checking");
            });

            modelBuilder.Entity<RoProductPerson>(entity =>
            {
                entity.HasKey(e => e.ProductPersonId)
                    .HasName("pk_product_person");

                entity.ToTable("ro_product_person");

                entity.HasComment("Таблица сотрудников продукта");

                entity.HasIndex(e => e.AbonentPersonId, "product_person_abonent_person_id_idx");

                entity.HasIndex(e => e.DssUserId, "product_person_dss_user_id_idx");

                entity.HasIndex(e => e.KeyId, "product_person_key_id_idx");

                entity.HasIndex(e => e.ProductId, "product_person_product_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "product_person_product_type_id_idx");

                entity.HasIndex(e => e.RegFileTypeId, "product_person_reg_file_type_id_idx");

                entity.HasIndex(e => e.ReserveKeyId, "product_person_reserve_key_id_idx");

                entity.HasIndex(e => e.SignQualificationId, "product_person_sign_qualification_id_idx");

                entity.HasIndex(e => e.StepId, "product_person_step_id_idx");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentPersonId)
                    .HasColumnName("abonent_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DssUserId)
                    .HasColumnName("dss_user_id")
                    .HasComment("Идентификатор пользователя DSS в БД");

                entity.Property(e => e.Encrypt)
                    .HasColumnName("encrypt")
                    .HasComment("Шифровальщик");

                entity.Property(e => e.IonOnline)
                    .HasColumnName("ion_online")
                    .HasComment("Онлайн");

                entity.Property(e => e.IsAdministrator)
                    .HasColumnName("is_administrator")
                    .HasComment("Сотрудник имеет роль Администратор");

                entity.Property(e => e.IsTrusted)
                    .HasColumnName("is_trusted")
                    .HasComment("Это доверенное лицо");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProductPersonGuid)
                    .HasColumnName("product_person_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("ГУИД владельца ЭЦП");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.RegFileTypeId)
                    .HasColumnName("reg_file_type_id")
                    .HasComment("Тип рег-файла");

                entity.Property(e => e.ReserveKeyId)
                    .HasColumnName("reserve_key_id")
                    .HasComment("Резервный ключ");

                entity.Property(e => e.SignQualificationId)
                    .HasColumnName("sign_qualification_id")
                    .HasComment("Квалификация подписи");

                entity.Property(e => e.Signer)
                    .HasColumnName("signer")
                    .HasComment("Подписант");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.AbonentPerson)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.AbonentPersonId)
                    .HasConstraintName("fk_abonent_person");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.DssUserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss_user_id");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.RoProductPersonKeys)
                    .HasForeignKey(d => d.KeyId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_key");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.RegFileType)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.RegFileTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_reg_file_type");

                entity.HasOne(d => d.ReserveKey)
                    .WithMany(p => p.RoProductPersonReserveKeys)
                    .HasForeignKey(d => d.ReserveKeyId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_reserve_key");

                entity.HasOne(d => d.SignQualification)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.SignQualificationId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_sign_qualification");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_storage_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoProductPeople)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Ekus)
                    .WithMany(p => p.ProductPeople)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoProductPersonEku",
                        l => l.HasOne<RoEku>().WithMany().HasForeignKey("EkuId").HasConstraintName("fk_eku"),
                        r => r.HasOne<RoProductPerson>().WithMany().HasForeignKey("ProductPersonId").HasConstraintName("fk_product_person"),
                        j =>
                        {
                            j.HasKey("ProductPersonId", "EkuId").HasName("pk_product_person_eku");

                            j.ToTable("ro_product_person_eku").HasComment("Таблица расширений сертификата сотрудника продукта");

                            j.HasIndex(new[] { "EkuId" }, "product_person_eku_eku_id_idx");

                            j.HasIndex(new[] { "ProductPersonId" }, "product_person_eku_product_person_id_idx");

                            j.IndexerProperty<int>("ProductPersonId").HasColumnName("product_person_id").HasComment("Сотрудник");

                            j.IndexerProperty<int>("EkuId").HasColumnName("eku_id").HasComment("Расширение");
                        });
            });

            modelBuilder.Entity<RoProductPersonKey>(entity =>
            {
                entity.HasKey(e => e.PersonKeyId)
                    .HasName("pk_product_person_key");

                entity.ToTable("ro_product_person_key");

                entity.HasComment("Таблица ключей сотрудников продукта");

                entity.HasIndex(e => e.KeyId, "product_person_key_key_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "product_person_key_product_person_id_idx");

                entity.HasIndex(e => new { e.ProductPersonId, e.KeyId }, "sk_product_person_key")
                    .IsUnique();

                entity.Property(e => e.PersonKeyId)
                    .HasColumnName("person_key_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DssUserId)
                    .HasColumnName("dss_user_id")
                    .HasComment("Пользователь DSS");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.Reserve)
                    .HasColumnName("reserve")
                    .HasComment("Флаг резервного ключа");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.RoProductPersonKeys)
                    .HasForeignKey(d => d.DssUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_dss_user_id");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.RoProductPersonKeysNavigation)
                    .HasForeignKey(d => d.KeyId)
                    .HasConstraintName("fk_key");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RoProductPersonKeys)
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.RoProductPersonKeys)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_storage_type_id");
            });

            modelBuilder.Entity<RoProductPersonRecipientType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_product_person_recipient_type");

                entity.Property(e => e.IsEncryptor).HasColumnName("is_encryptor");

                entity.Property(e => e.ProductPersonId).HasColumnName("product_person_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany()
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("ro_product_person_recipient_type_product_person_id_fkey");

                entity.HasOne(d => d.Protocol)
                    .WithMany()
                    .HasForeignKey(d => d.ProtocolId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_product_person_recipient_type_protocol_id_fkey");
            });

            modelBuilder.Entity<RoProductPersonStep>(entity =>
            {
                entity.HasKey(e => new { e.ProductPersonId, e.StepId, e.LogTime })
                    .HasName("pk_product_person_step");

                entity.ToTable("ro_product_person_step");

                entity.HasComment("Таблица состояний сотрудников продуктов");

                entity.HasIndex(e => e.ProductPersonId, "product_person_step_product_person_id_idx");

                entity.HasIndex(e => e.StepId, "product_person_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "product_person_step_user_id_idx");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RoProductPersonSteps)
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoProductPersonSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoProductPersonSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoProductSkrinInfo>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("pk_product_skrin_info");

                entity.ToTable("ro_product_skrin_info");

                entity.HasComment("Данные для доступа к astraladmin.skrin.ru");

                entity.Property(e => e.ProductId)
                    .ValueGeneratedNever()
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.Login)
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.HasOne(d => d.Product)
                    .WithOne(p => p.RoProductSkrinInfo)
                    .HasForeignKey<RoProductSkrinInfo>(d => d.ProductId)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<RoProductStep>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.StepId, e.LogTime })
                    .HasName("pk_product_step");

                entity.ToTable("ro_product_step");

                entity.HasComment("Таблица состояний продуктов");

                entity.HasIndex(e => e.ProductId, "product_step_product_id_idx");

                entity.HasIndex(e => e.StepId, "product_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "product_step_user_id_idx");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(6)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoProductSteps)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoProductSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoProductSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoProductTransferLog>(entity =>
            {
                entity.HasKey(e => e.ProductTransferId)
                    .HasName("pk_product_transfer_log");

                entity.ToTable("ro_product_transfer_log");

                entity.HasComment("Таблица логирования переноса продуктов");

                entity.HasIndex(e => e.OfficeId, "product_transfer_log_office_id_idx");

                entity.HasIndex(e => e.PreviousOfficeId, "product_transfer_log_previous_office_id_idx");

                entity.HasIndex(e => e.ProductId, "product_transfer_log_product_id_idx");

                entity.HasIndex(e => e.UserId, "product_transfer_log_user_id_idx");

                entity.Property(e => e.ProductTransferId)
                    .HasColumnName("product_transfer_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PreviousOfficeId)
                    .HasColumnName("previous_office_id")
                    .HasComment("Предыдущий офис");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoProductTransferLogOffices)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.PreviousOffice)
                    .WithMany(p => p.RoProductTransferLogPreviousOffices)
                    .HasForeignKey(d => d.PreviousOfficeId)
                    .HasConstraintName("fk_previous_office");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoProductTransferLogs)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoProductTransferLogs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoProductType>(entity =>
            {
                entity.HasKey(e => e.ProductTypeId)
                    .HasName("pk_product_type");

                entity.ToTable("ro_product_type");

                entity.HasComment("Таблица типов продуктов");

                entity.HasIndex(e => e.CodeName, "sk_code_name")
                    .IsUnique();

                entity.HasIndex(e => e.ProductTypeGuid, "sk_product_type_guid")
                    .IsUnique();

                entity.HasIndex(e => e.ProductTypeName, "sk_product_type_name")
                    .IsUnique();

                entity.Property(e => e.ProductTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("product_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CodeName)
                    .HasMaxLength(10)
                    .HasColumnName("code_name")
                    .HasComment("Кодовое имя");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ProductTypeGuid)
                    .HasColumnName("product_type_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoProductView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_product_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ActivationTime).HasColumnName("activation_time");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.CertEndTime)
                    .HasPrecision(0)
                    .HasColumnName("cert_end_time");

                entity.Property(e => e.CertTemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("cert_template_name");

                entity.Property(e => e.ContactPeople)
                    .HasColumnType("character varying")
                    .HasColumnName("contact_people");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .HasColumnName("first_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .HasColumnName("last_name");

                entity.Property(e => e.LicEndTime).HasColumnName("lic_end_time");

                entity.Property(e => e.LicenseTypeId).HasColumnName("license_type_id");

                entity.Property(e => e.LicenseTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("license_type_name");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TopAbon)
                    .HasMaxLength(500)
                    .HasColumnName("top_abon");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasColumnName("user_name");
            });

            modelBuilder.Entity<RoProductViewInConnect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_product_view_in_connect");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ActivationTime).HasColumnName("activation_time");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.CertEndTime)
                    .HasPrecision(0)
                    .HasColumnName("cert_end_time");

                entity.Property(e => e.CertTemplateName)
                    .HasMaxLength(100)
                    .HasColumnName("cert_template_name");

                entity.Property(e => e.ContactPeople)
                    .HasColumnType("character varying")
                    .HasColumnName("contact_people");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .HasColumnName("first_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .HasColumnName("last_name");

                entity.Property(e => e.LicEndTime).HasColumnName("lic_end_time");

                entity.Property(e => e.LicenseTypeId).HasColumnName("license_type_id");

                entity.Property(e => e.LicenseTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("license_type_name");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TopAbon)
                    .HasMaxLength(500)
                    .HasColumnName("top_abon");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasColumnName("user_name");
            });

            modelBuilder.Entity<RoProlongationShortDataSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_prolongation_short_data_summary");

                entity.Property(e => e.DisabledDispatchCount)
                    .HasColumnName("disabled_dispatch_count")
                    .HasComment("Отключена проверка отправок");

                entity.Property(e => e.Expired)
                    .HasColumnName("expired")
                    .HasComment("Просрочено");

                entity.Property(e => e.ExpiredInNextMonth)
                    .HasColumnName("expired_in_next_month")
                    .HasComment("Заканчивается в следующем месяце");

                entity.Property(e => e.ExpiredInThisMonth)
                    .HasColumnName("expired_in_this_month")
                    .HasComment("Заканчивается в этом месяце");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Идентификатор офиса");

                entity.Property(e => e.ProlongateImmediate)
                    .HasColumnName("prolongate_immediate")
                    .HasComment("Срочное продление");

                entity.Property(e => e.RiskGroup)
                    .HasColumnName("risk_group")
                    .HasComment("Группа риска");

                entity.Property(e => e.SummaryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("summary_id")
                    .HasComment("Идентификатор статистики по партенрам");

                entity.HasOne(d => d.Office)
                    .WithMany()
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_prolongation_short_data_summary_fk");
            });

            modelBuilder.Entity<RoProlongationShortDatum>(entity =>
            {
                entity.HasKey(e => e.ProlongationId)
                    .HasName("ro_prolongation_short_data_pkey");

                entity.ToTable("ro_prolongation_short_data");

                entity.HasComment("Таблица для вкладки \"Работа с продлениями\"");

                entity.HasIndex(e => e.CertificateInitialDate, "certificate_initial_date_idx");

                entity.HasIndex(e => e.AbonentId, "prolongation_short_data_abonent_id_idx");

                entity.HasIndex(e => e.CertificateEndDate, "prolongation_short_data_certificate_end_date_idx");

                entity.HasIndex(e => e.ContractId, "prolongation_short_data_contract_id_idx");

                entity.HasIndex(e => new { e.ContractId, e.ProductId }, "prolongation_short_data_contract_product_idx")
                    .IsUnique();

                entity.HasIndex(e => e.ProductId, "prolongation_short_data_product_idx");

                entity.HasIndex(e => e.TariffEndDate, "prolongation_short_data_tariff_end_date_idx");

                entity.HasIndex(e => e.TariffInitialDate, "tariff_initial_date_idx");

                entity.Property(e => e.ProlongationId)
                    .HasColumnName("prolongation_id")
                    .HasComment("Идентификатор продления");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Идентификатор абонента");

                entity.Property(e => e.CertificateEndDate)
                    .HasColumnName("certificate_end_date")
                    .HasComment("Дата окончания сертификата");

                entity.Property(e => e.CertificateInitialDate)
                    .HasColumnName("certificate_initial_date")
                    .HasComment("Дата начала сертификата");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Идентификатор договора");

                entity.Property(e => e.IgnoreDispatch)
                    .HasColumnName("ignore_dispatch")
                    .HasComment("Флаг определяет необходимость проверки наличия отправок абонента");

                entity.Property(e => e.NoDispatch)
                    .HasColumnName("no_dispatch")
                    .HasComment("Флаг определяет факт отсутствия отправок в ФНС/ПФР при наличии соответсвующих направлений");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.ReasonId)
                    .HasColumnName("reason_id")
                    .HasComment("Причина непродления абонента");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number")
                    .HasComment("Рег. номер продукта");

                entity.Property(e => e.TariffEndDate)
                    .HasColumnName("tariff_end_date")
                    .HasComment("Дата окончания тарифа");

                entity.Property(e => e.TariffInitialDate)
                    .HasColumnName("tariff_initial_date")
                    .HasComment("Дата начала тарифа");

                entity.Property(e => e.TotalSum)
                    .HasColumnName("total_sum")
                    .HasComment("Общая стоимость");

                entity.Property(e => e.TransferDate)
                    .HasColumnName("transfer_date")
                    .HasComment("Дата переноса");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoProlongationShortData)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("ro_prolongation_short_data_abonent_fk");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.RoProlongationShortData)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("ro_prolongation_short_data_contract_fk");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoProlongationShortData)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("ro_prolongation_short_data_product_fk");
            });

            modelBuilder.Entity<RoPromotionType>(entity =>
            {
                entity.HasKey(e => e.PromotionTypeId)
                    .HasName("pk_promotion_type");

                entity.ToTable("ro_promotion_type");

                entity.HasComment("Таблица с типами рекламных акций");

                entity.HasIndex(e => e.PromotionTypeName, "sk_promotion_type_name")
                    .IsUnique();

                entity.Property(e => e.PromotionTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("promotion_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PromotionTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("promotion_type_name")
                    .HasComment("Имя акции");
            });

            modelBuilder.Entity<RoPropDict>(entity =>
            {
                entity.HasKey(e => new { e.PropTypeId, e.PropValue })
                    .HasName("pk_prop_dict");

                entity.ToTable("ro_prop_dict");

                entity.HasComment("Таблица со словарем реквизитов");

                entity.HasIndex(e => e.PropTypeId, "prop_dict_prop_type_id_idx");

                entity.Property(e => e.PropTypeId)
                    .HasColumnName("prop_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.PropValue)
                    .HasColumnType("character varying")
                    .HasColumnName("prop_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.PropType)
                    .WithMany(p => p.RoPropDicts)
                    .HasForeignKey(d => d.PropTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_prop_type");
            });

            modelBuilder.Entity<RoPropType>(entity =>
            {
                entity.HasKey(e => e.PropTypeId)
                    .HasName("pk_prop_type");

                entity.ToTable("ro_prop_type");

                entity.HasComment("Таблица типов реквизитов");

                entity.HasIndex(e => e.PropTypeName, "sk_prop_type")
                    .IsUnique();

                entity.Property(e => e.PropTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("prop_type_id")
                    .HasComment("Код");

                entity.Property(e => e.PropTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("prop_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoProtectionClass>(entity =>
            {
                entity.HasKey(e => e.ProtectionClassId)
                    .HasName("pk_protection_class");

                entity.ToTable("ro_protection_class");

                entity.HasComment("Таблица классов защиты");

                entity.HasIndex(e => e.ProtectionClassName, "sk_protection_class_name")
                    .IsUnique();

                entity.Property(e => e.ProtectionClassId)
                    .ValueGeneratedNever()
                    .HasColumnName("protection_class_id")
                    .HasComment("Код");

                entity.Property(e => e.PolicyOid)
                    .HasMaxLength(50)
                    .HasColumnName("policy_oid")
                    .HasComment("Объектный идентификатор");

                entity.Property(e => e.ProtectionClassName)
                    .HasMaxLength(100)
                    .HasColumnName("protection_class_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoProtocol>(entity =>
            {
                entity.HasKey(e => e.ProtocolId)
                    .HasName("pk_protocol");

                entity.ToTable("ro_protocol");

                entity.HasComment("Таблица протоколов");

                entity.HasIndex(e => e.ProtocolName, "sk_protocol_name")
                    .IsUnique();

                entity.Property(e => e.ProtocolId)
                    .ValueGeneratedNever()
                    .HasColumnName("protocol_id")
                    .HasComment("Код");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.ProtocolAlias)
                    .HasMaxLength(40)
                    .HasColumnName("protocol_alias")
                    .HasComment("Псевдоним");

                entity.Property(e => e.ProtocolName)
                    .HasMaxLength(100)
                    .HasColumnName("protocol_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoProvider>(entity =>
            {
                entity.HasKey(e => e.ProviderId)
                    .HasName("pk_provider");

                entity.ToTable("ro_provider");

                entity.HasComment("Таблица криптопровайдеров");

                entity.HasIndex(e => e.ProviderName, "sk_provider_name")
                    .IsUnique();

                entity.Property(e => e.ProviderId)
                    .ValueGeneratedNever()
                    .HasColumnName("provider_id")
                    .HasComment("Код");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ProviderName)
                    .HasMaxLength(100)
                    .HasColumnName("provider_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ProviderType)
                    .HasColumnName("provider_type")
                    .HasComment("Тип");

                entity.Property(e => e.SignTool)
                    .HasColumnType("character varying")
                    .HasColumnName("sign_tool")
                    .HasComment("Средство ЭП");
            });

            modelBuilder.Entity<RoProxyAgent>(entity =>
            {
                entity.HasKey(e => e.ProxyAgentId)
                    .HasName("pk_proxy_agent");

                entity.ToTable("ro_proxy_agent");

                entity.HasComment("Таблица уполномоченных представителей");

                entity.HasIndex(e => e.AbonentId, "proxy_agent_abonent_id_idx");

                entity.HasIndex(e => e.OfficeId, "proxy_agent_office_id_idx");

                entity.HasIndex(e => e.ProductId, "proxy_agent_product_id_idx");

                entity.Property(e => e.ProxyAgentId)
                    .HasColumnName("proxy_agent_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Организация");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProxyAgentName)
                    .HasColumnType("character varying")
                    .HasColumnName("proxy_agent_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoProxyAgents)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoProxyAgents)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoProxyAgents)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<RoPurchaseType>(entity =>
            {
                entity.HasKey(e => e.PurchaseTypeId)
                    .HasName("ro_purchase_type_pkey");

                entity.ToTable("ro_purchase_type");

                entity.HasComment("Таблица типов закупок");

                entity.Property(e => e.PurchaseTypeId)
                    .HasColumnName("purchase_type_id")
                    .HasComment("Идентификатор типа закупки");

                entity.Property(e => e.PurchaseTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("purchase_type_name")
                    .HasComment("Наименование типа закупки");
            });

            modelBuilder.Entity<RoRa>(entity =>
            {
                entity.HasKey(e => e.RaId)
                    .HasName("pk_ra");

                entity.ToTable("ro_ra");

                entity.HasComment("Таблица центров регистрации");

                entity.HasIndex(e => e.CaId, "ra_ca_id_idx");

                entity.HasIndex(e => e.StepId, "ra_step_id_idx");

                entity.Property(e => e.RaId)
                    .HasColumnName("ra_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Центр сертификации");

                entity.Property(e => e.FileMask)
                    .HasMaxLength(100)
                    .HasColumnName("file_mask")
                    .HasComment("Маска имени файла c {id}");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .HasColumnName("host")
                    .HasComment("Адрес");

                entity.Property(e => e.LastSending)
                    .HasPrecision(0)
                    .HasColumnName("last_sending")
                    .HasComment("Время последней отправки");

                entity.Property(e => e.Port)
                    .HasColumnName("port")
                    .HasComment("Порт");

                entity.Property(e => e.RaName)
                    .HasMaxLength(200)
                    .HasColumnName("ra_name")
                    .HasComment("Наименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.Wmail)
                    .IsRequired()
                    .HasColumnName("wmail")
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг деловой почты");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoRas)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRas)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoRaStep>(entity =>
            {
                entity.HasKey(e => new { e.RaId, e.StepId, e.LogTime })
                    .HasName("pk_ra_step");

                entity.ToTable("ro_ra_step");

                entity.HasComment("Таблица состояний центров регистрации");

                entity.HasIndex(e => e.RaId, "ra_step_ra_id_idx");

                entity.HasIndex(e => e.StepId, "ra_step_step_id_idx");

                entity.Property(e => e.RaId)
                    .HasColumnName("ra_id")
                    .HasComment("Центр регистрации");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Ra)
                    .WithMany(p => p.RoRaSteps)
                    .HasForeignKey(d => d.RaId)
                    .HasConstraintName("fk_ra");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRaSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoRatingView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_rating_view");

                entity.Property(e => e.Abonentscount).HasColumnName("abonentscount");

                entity.Property(e => e.Partnerid).HasColumnName("partnerid");

                entity.Property(e => e.Partnername)
                    .HasColumnType("character varying")
                    .HasColumnName("partnername");
            });

            modelBuilder.Entity<RoRecipient>(entity =>
            {
                entity.HasKey(e => e.RecipientId)
                    .HasName("pk_recipient");

                entity.ToTable("ro_recipient");

                entity.HasComment("Таблица получателей");

                entity.HasIndex(e => e.CertificateId, "recipient_certificate_id_idx");

                entity.HasIndex(e => e.ProtocolId, "recipient_protocol_id_idx");

                entity.HasIndex(e => e.RecipientUpdaterId, "recipient_recipient_updater_id_idx");

                entity.HasIndex(e => e.RegionId, "recipient_region_id_idx");

                entity.HasIndex(e => e.VipnetNodeId, "recipient_vipnet_node_id_idx");

                entity.HasIndex(e => e.RecipientGuid, "sk_recipient_guid")
                    .IsUnique();

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.ChangeName)
                    .IsRequired()
                    .HasColumnName("change_name")
                    .HasDefaultValueSql("true")
                    .HasComment("Именение наименования");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.MailBox)
                    .HasMaxLength(50)
                    .HasColumnName("mail_box")
                    .HasComment("Эл. почта");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code")
                    .HasComment("Код");

                entity.Property(e => e.RecipientGuid)
                    .HasColumnName("recipient_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(150)
                    .HasColumnName("recipient_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RecipientUpdaterId)
                    .HasColumnName("recipient_updater_id")
                    .HasComment("Обновление");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");

                entity.Property(e => e.VipnetNodeId)
                    .HasMaxLength(9)
                    .HasColumnName("vipnet_node_id")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoRecipients)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RoRecipients)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.RecipientUpdater)
                    .WithMany(p => p.RoRecipients)
                    .HasForeignKey(d => d.RecipientUpdaterId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_recipient_updater");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoRecipients)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.VipnetNode)
                    .WithMany(p => p.RoRecipients)
                    .HasForeignKey(d => d.VipnetNodeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_vipnet_node");
            });

            modelBuilder.Entity<RoRecipientCertificate>(entity =>
            {
                entity.HasKey(e => new { e.RecipientId, e.CertificateId, e.LogTime })
                    .HasName("pk_recipient_certificate");

                entity.ToTable("ro_recipient_certificate");

                entity.HasComment("Таблица сертификатов получателей");

                entity.HasIndex(e => e.CertificateId, "recipient_certificate_certificate_id_idx");

                entity.HasIndex(e => e.RecipientId, "recipient_certificate_recipient_id_idx");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoRecipientCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoRecipientCertificates)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RoRecipientDuplicate>(entity =>
            {
                entity.HasKey(e => e.DuplicateGuid)
                    .HasName("pk_recipient_duplicate");

                entity.ToTable("ro_recipient_duplicate");

                entity.HasComment("Таблица дублированных получателей");

                entity.HasIndex(e => e.RecipientId, "recipient_duplicate_recipient_id_idx");

                entity.Property(e => e.DuplicateGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("duplicate_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoRecipientDuplicates)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RoRecipientUnit>(entity =>
            {
                entity.HasKey(e => new { e.RecipientId, e.Index })
                    .HasName("pk_recipient_unit");

                entity.ToTable("ro_recipient_unit");

                entity.HasComment("Таблица рабочих сертификатов получателей");

                entity.HasIndex(e => e.CertificateId, "recipient_unit_certificate_id_idx");

                entity.HasIndex(e => e.RecipientId, "recipient_unit_recipient_id_idx");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .HasColumnName("name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoRecipientUnits)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoRecipientUnits)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RoRecipientUnitUpdater>(entity =>
            {
                entity.HasKey(e => e.RecipientUnitUpdaterId)
                    .HasName("pk_recipient_unit_updater");

                entity.ToTable("ro_recipient_unit_updater");

                entity.HasComment("Таблица обновления рабочих сертификатов получателей");

                entity.HasIndex(e => e.CertId, "recipient_unit_updater_cert_id_idx");

                entity.HasIndex(e => e.RecipientUpdaterId, "recipient_unit_updater_recipient_updater_id_idx");

                entity.Property(e => e.RecipientUnitUpdaterId)
                    .HasColumnName("recipient_unit_updater_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.Index).HasColumnName("index");

                entity.Property(e => e.RecipientUpdaterId)
                    .HasColumnName("recipient_updater_id")
                    .HasComment("Получатель");

                entity.HasOne(d => d.RecipientUpdater)
                    .WithMany(p => p.RoRecipientUnitUpdaters)
                    .HasForeignKey(d => d.RecipientUpdaterId)
                    .HasConstraintName("fk_recipient_updater");
            });

            modelBuilder.Entity<RoRecipientUpdater>(entity =>
            {
                entity.HasKey(e => e.RecipientUpdaterId)
                    .HasName("pk_recipient_updater");

                entity.ToTable("ro_recipient_updater");

                entity.HasComment("Таблица обновления получателей");

                entity.HasIndex(e => e.CertId, "recipient_updater_cert_id_idx");

                entity.HasIndex(e => e.OfficeId, "recipient_updater_office_id_idx");

                entity.HasIndex(e => e.ProtocolId, "recipient_updater_protocol_id_idx");

                entity.HasIndex(e => e.RecipientId, "recipient_updater_recipient_id_idx");

                entity.HasIndex(e => e.RegionId, "recipient_updater_region_id_idx");

                entity.HasIndex(e => e.UserId, "recipient_updater_user_id_idx");

                entity.HasIndex(e => e.VipnetNodeId, "recipient_updater_vipnet_node_id_idx");

                entity.Property(e => e.RecipientUpdaterId)
                    .HasColumnName("recipient_updater_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplyDate)
                    .HasPrecision(0)
                    .HasColumnName("apply_date")
                    .HasComment("Дата применения");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.ConfirmDate)
                    .HasPrecision(0)
                    .HasColumnName("confirm_date")
                    .HasComment("Дата подтверждения");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.MailBox)
                    .HasMaxLength(50)
                    .HasColumnName("mail_box")
                    .HasComment("Эл. почта");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code")
                    .HasComment("Код");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(150)
                    .HasColumnName("recipient_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.TurnOff)
                    .HasColumnName("turn_off")
                    .HasComment("Флаг отключения");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.VipnetNodeId)
                    .HasMaxLength(9)
                    .HasColumnName("vipnet_node_id")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoRecipientUpdaters)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RoRecipientUpdaters)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoRecipientUpdaters)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoRecipientUpdaters)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRecipientUpdaters)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.VipnetNode)
                    .WithMany(p => p.RoRecipientUpdaters)
                    .HasForeignKey(d => d.VipnetNodeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_vipnet_node");
            });

            modelBuilder.Entity<RoReflex>(entity =>
            {
                entity.HasKey(e => e.ReflexId)
                    .HasName("pk_reflex");

                entity.ToTable("ro_reflex");

                entity.HasComment("Таблица отражений БД на серверах");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DatabaseName)
                    .HasMaxLength(50)
                    .HasColumnName("database_name")
                    .HasComment("Имя БД");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .HasColumnName("host")
                    .HasComment("Адрес");

                entity.Property(e => e.IsTest)
                    .HasColumnName("is_test")
                    .HasDefaultValueSql("false")
                    .HasComment("Тестовое");

                entity.Property(e => e.Password)
                    .HasMaxLength(40)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.Port)
                    .HasColumnName("port")
                    .HasDefaultValueSql("5432")
                    .HasComment("Порт");

                entity.Property(e => e.Username)
                    .HasMaxLength(20)
                    .HasColumnName("username")
                    .HasComment("Имя пользователя");
            });

            modelBuilder.Entity<RoReflexMessenger>(entity =>
            {
                entity.HasKey(e => new { e.ReflexId, e.ReflexTypeId, e.MessengerId })
                    .HasName("pk_reflex_messenger");

                entity.ToTable("ro_reflex_messenger");

                entity.HasComment("Таблица отражений для типа продукта");

                entity.HasIndex(e => e.MessengerId, "reflex_messenger_messenger_id_idx");

                entity.HasIndex(e => e.ReflexId, "reflex_messenger_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_messenger_reflex_type_idx");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Отражение");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип отражения");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoReflexMessengers)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.RoReflexMessengers)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.RoReflexMessengers)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");
            });

            modelBuilder.Entity<RoReflexProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ReflexId, e.ReflexTypeId })
                    .HasName("pk_reflex_product");

                entity.ToTable("ro_reflex_product");

                entity.HasComment("Таблица отражений для продукта");

                entity.HasIndex(e => e.ProductId, "reflex_product_product_id_idx");

                entity.HasIndex(e => e.ReflexId, "reflex_product_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_product_reflex_type_id_idx");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("База");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип базы");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoReflexProducts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.RoReflexProducts)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.RoReflexProducts)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");
            });

            modelBuilder.Entity<RoReflexProductType>(entity =>
            {
                entity.HasKey(e => new { e.ReflexId, e.ReflexTypeId, e.ProductTypeId })
                    .HasName("pk_reflex_product_type");

                entity.ToTable("ro_reflex_product_type");

                entity.HasComment("Таблица отражений для типа продукта");

                entity.HasIndex(e => e.ProductTypeId, "reflex_product_type_product_type_id_idx");

                entity.HasIndex(e => e.ReflexId, "reflex_product_type_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_product_type_reflex_type_idx");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Отражение");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип отражения");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoReflexProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.RoReflexProductTypes)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.RoReflexProductTypes)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");
            });

            modelBuilder.Entity<RoReflexRule>(entity =>
            {
                entity.HasKey(e => e.ReflexRuleId)
                    .HasName("pk_reflex_rule");

                entity.ToTable("ro_reflex_rule");

                entity.HasComment("Таблица правил отражений");

                entity.HasIndex(e => e.MessengerId, "reflex_rule_messenger_id_idx");

                entity.HasIndex(e => e.OfficeId, "reflex_rule_office_idx");

                entity.HasIndex(e => e.ProductTypeId, "reflex_rule_product_type_idx");

                entity.HasIndex(e => e.ReflexId, "reflex_rule_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_rule_reflex_type_idx");

                entity.HasIndex(e => e.StorageTypeId, "reflex_rule_storage_type_idx");

                entity.Property(e => e.ReflexRuleId)
                    .HasColumnName("reflex_rule_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Отражение");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип отражения");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.RoReflexRules)
                    .HasForeignKey(d => d.MessengerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoReflexRules)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoReflexRules)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.RoReflexRules)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.RoReflexRules)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.RoReflexRules)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_storage_type");
            });

            modelBuilder.Entity<RoReflexType>(entity =>
            {
                entity.HasKey(e => e.ReflexTypeId)
                    .HasName("pk_reflex_type");

                entity.ToTable("ro_reflex_type");

                entity.HasComment("Таблица типов отражений");

                entity.HasIndex(e => e.ReflexTypeName, "sk_reflex_type_name")
                    .IsUnique();

                entity.Property(e => e.ReflexTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("reflex_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ReflexTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("reflex_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoReflexTypeSystem>(entity =>
            {
                entity.HasKey(e => e.ReflexTypeSystemId)
                    .HasName("pk_reflex_type_system");

                entity.ToTable("ro_reflex_type_system");

                entity.HasComment("Таблица связи типов БД рефлекса с системами");

                entity.Property(e => e.ReflexTypeSystemId)
                    .HasColumnName("reflex_type_system_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип БД рефлекс");

                entity.Property(e => e.SystemId)
                    .HasColumnName("system_id")
                    .HasComment("Система");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.RoReflexTypeSystems)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type_id");

                entity.HasOne(d => d.System)
                    .WithMany(p => p.RoReflexTypeSystems)
                    .HasForeignKey(d => d.SystemId)
                    .HasConstraintName("fk_system_id");
            });

            modelBuilder.Entity<RoReflexUseType>(entity =>
            {
                entity.HasKey(e => new { e.ReflexId, e.ReflexTypeId, e.UseTypeId })
                    .HasName("pk_reflex_use_type");

                entity.ToTable("ro_reflex_use_type");

                entity.HasComment("Таблица отражений для типа применения");

                entity.HasIndex(e => e.ReflexId, "reflex_use_type_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_use_type_reflex_type_id_idx");

                entity.HasIndex(e => e.UseTypeId, "reflex_use_type_use_type_id_idx");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Отражение");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип отражения");

                entity.Property(e => e.UseTypeId)
                    .HasColumnName("use_type_id")
                    .HasComment("Тип применения");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.RoReflexUseTypes)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.RoReflexUseTypes)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");

                entity.HasOne(d => d.UseType)
                    .WithMany(p => p.RoReflexUseTypes)
                    .HasForeignKey(d => d.UseTypeId)
                    .HasConstraintName("fk_use_type");
            });

            modelBuilder.Entity<RoRefreshToken>(entity =>
            {
                entity.HasKey(e => e.RefreshTokenId)
                    .HasName("pk_refresh_token");

                entity.ToTable("ro_refresh_token");

                entity.HasComment("Таблица токенов обновления");

                entity.HasIndex(e => e.RefreshToken, "refresh_token_refresh_token_idx");

                entity.HasIndex(e => e.UserId, "refresh_token_user_id_idx");

                entity.Property(e => e.RefreshTokenId)
                    .HasColumnName("refresh_token_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ExpiresIn)
                    .HasPrecision(0)
                    .HasColumnName("expires_in")
                    .HasComment("Срок действия токена");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата блокировки");

                entity.Property(e => e.RefreshToken)
                    .HasMaxLength(44)
                    .HasColumnName("refresh_token")
                    .IsFixedLength()
                    .HasComment("Токен");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRefreshTokens)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoRegBankRequest>(entity =>
            {
                entity.HasKey(e => e.RegBankRequestId)
                    .HasName("pk_reg_bank_request");

                entity.ToTable("ro_reg_bank_request");

                entity.HasComment("Таблица регистрации запросов на получение банковской гарантии");

                entity.HasIndex(e => e.AbonentTypeId, "reg_bank_request_abonent_type_id_idx");

                entity.HasIndex(e => e.AddressId, "reg_bank_request_address_id_idx");

                entity.HasIndex(e => e.Inn, "reg_bank_request_inn_idx");

                entity.HasIndex(e => e.OfficeId, "reg_bank_request_office_id_idx");

                entity.HasIndex(e => e.RequestId, "reg_bank_request_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_bank_request_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_bank_request_user_id_idx");

                entity.HasIndex(e => e.WorkflowId, "reg_bank_request_workflow_id_idx");

                entity.HasIndex(e => e.WorkflowId, "sk_reg_bank_request_workflow")
                    .IsUnique();

                entity.Property(e => e.RegBankRequestId)
                    .HasColumnName("reg_bank_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Тип абонента");

                entity.Property(e => e.AddressId)
                    .HasColumnName("address_id")
                    .HasComment("Адрес");

                entity.Property(e => e.AuctionNumber)
                    .HasMaxLength(50)
                    .HasColumnName("auction_number")
                    .HasComment("Номер аукциона");

                entity.Property(e => e.BgEndDate)
                    .HasColumnName("bg_end_date")
                    .HasComment("Дата окончания");

                entity.Property(e => e.BgInitialDate)
                    .HasColumnName("bg_initial_date")
                    .HasComment("Дата начала");

                entity.Property(e => e.BgPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("bg_price")
                    .HasComment("Цена");

                entity.Property(e => e.BgRequestId)
                    .HasColumnName("bg_request_id")
                    .HasComment("Идентификатор заявления");

                entity.Property(e => e.BgSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("bg_sum")
                    .HasComment("Сумма");

                entity.Property(e => e.BgUrl)
                    .HasColumnType("character varying")
                    .HasColumnName("bg_url")
                    .HasComment("Адрес");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Адрес эл. почты");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(100)
                    .HasColumnName("program_version")
                    .HasComment("Вресия клиента");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Данные");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(255)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RoRegBankRequests)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.RoRegBankRequests)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_address");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoRegBankRequests)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRegBankRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegBankRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.Workflow)
                    .WithOne(p => p.RoRegBankRequest)
                    .HasForeignKey<RoRegBankRequest>(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");

                entity.HasMany(d => d.Docs)
                    .WithMany(p => p.RegBankRequests)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoRegBankRequestDoc",
                        l => l.HasOne<RoDoc>().WithMany().HasForeignKey("DocId").HasConstraintName("fk_doc"),
                        r => r.HasOne<RoRegBankRequest>().WithMany().HasForeignKey("RegBankRequestId").HasConstraintName("fk_reg_bank_request"),
                        j =>
                        {
                            j.HasKey("RegBankRequestId", "DocId").HasName("pk_reg_bank_request_doc");

                            j.ToTable("ro_reg_bank_request_doc").HasComment("Таблица приложений к заявлению на получение банковской гарантии");

                            j.HasIndex(new[] { "DocId" }, "reg_bank_request_doc_doc_id_idx");

                            j.HasIndex(new[] { "RegBankRequestId" }, "reg_bank_request_doc_reg_bank_request_id_idx");

                            j.IndexerProperty<int>("RegBankRequestId").HasColumnName("reg_bank_request_id").HasComment("Заявление");

                            j.IndexerProperty<int>("DocId").HasColumnName("doc_id").HasComment("Документ");
                        });
            });

            modelBuilder.Entity<RoRegBankRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.RegBankRequestId, e.StepId, e.LogTime })
                    .HasName("pk_reg_bank_request_step");

                entity.ToTable("ro_reg_bank_request_step");

                entity.HasComment("Таблица состояний регистраций запросов на получение банковской гарантии");

                entity.HasIndex(e => e.RegBankRequestId, "reg_bank_request_step_reg_bank_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_bank_request_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_bank_request_step_user_id_idx");

                entity.Property(e => e.RegBankRequestId)
                    .HasColumnName("reg_bank_request_id")
                    .HasComment("Запрос");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.RegBankRequest)
                    .WithMany(p => p.RoRegBankRequestSteps)
                    .HasForeignKey(d => d.RegBankRequestId)
                    .HasConstraintName("fk_reg_bank_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRegBankRequestSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegBankRequestSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoRegCertRequest>(entity =>
            {
                entity.HasKey(e => e.RegCertRequestId)
                    .HasName("pk_reg_cert_request");

                entity.ToTable("ro_reg_cert_request");

                entity.HasComment("Таблица регистрации запросов на сертификаты");

                entity.HasIndex(e => e.CaId, "reg_cert_request_ca_id_idx");

                entity.HasIndex(e => e.CertRequestId, "reg_cert_request_cert_request_id_idx");

                entity.HasIndex(e => e.CertTemplateId, "reg_cert_request_cert_template_id_idx");

                entity.HasIndex(e => e.CertificateId, "reg_cert_request_certificate_id_idx");

                entity.HasIndex(e => e.OfficeId, "reg_cert_request_office_id_idx");

                entity.HasIndex(e => e.RequestId, "reg_cert_request_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_cert_request_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_cert_request_user_id_idx");

                entity.HasIndex(e => e.WorkflowId, "reg_cert_request_workflow_id_idx");

                entity.HasIndex(e => e.CertRequestId, "sk_reg_cert_request")
                    .IsUnique();

                entity.HasIndex(e => e.CertificateId, "sk_reg_cert_request_certificate")
                    .IsUnique();

                entity.HasIndex(e => e.WorkflowId, "sk_reg_cert_request_workflow")
                    .IsUnique();

                entity.Property(e => e.RegCertRequestId)
                    .HasColumnName("reg_cert_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PackId)
                    .HasMaxLength(36)
                    .HasColumnName("pack_id")
                    .HasComment("Идентификатор пакета");

                entity.Property(e => e.PublicKey)
                    .HasMaxLength(128)
                    .HasColumnName("public_key")
                    .HasComment("Открытый ключ");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.SubjectKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id")
                    .HasComment("Идентификатор ключа субъекта");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoRegCertRequests)
                    .HasForeignKey(d => d.CaId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.RoRegCertRequests)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.Certificate)
                    .WithOne(p => p.RoRegCertRequest)
                    .HasForeignKey<RoRegCertRequest>(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoRegCertRequests)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRegCertRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegCertRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.Workflow)
                    .WithOne(p => p.RoRegCertRequest)
                    .HasForeignKey<RoRegCertRequest>(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RoRegCertRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.RegCertRequestId, e.StepId, e.LogTime })
                    .HasName("pk_reg_cert_request_step");

                entity.ToTable("ro_reg_cert_request_step");

                entity.HasComment("Таблица состояний регистраций запросов на сертификат");

                entity.HasIndex(e => e.RegCertRequestId, "reg_cert_request_reg_cert_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_cert_request_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_cert_request_step_user_id_idx");

                entity.Property(e => e.RegCertRequestId)
                    .HasColumnName("reg_cert_request_id")
                    .HasComment("Регистрация");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.RegCertRequest)
                    .WithMany(p => p.RoRegCertRequestSteps)
                    .HasForeignKey(d => d.RegCertRequestId)
                    .HasConstraintName("fk_reg_cert_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRegCertRequestSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegCertRequestSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoRegFileType>(entity =>
            {
                entity.HasKey(e => e.RegFileTypeId)
                    .HasName("pk_reg_file_type");

                entity.ToTable("ro_reg_file_type");

                entity.HasComment("Таблица типов рег-файлов");

                entity.HasIndex(e => e.RegFileTypeName, "sk_reg_file_type_name")
                    .IsUnique();

                entity.Property(e => e.RegFileTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("reg_file_type_id")
                    .HasComment("Код");

                entity.Property(e => e.RegFileTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("reg_file_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoRegRequest>(entity =>
            {
                entity.HasKey(e => e.RegRequestId)
                    .HasName("pk_reg_request");

                entity.ToTable("ro_reg_request");

                entity.HasComment("Таблица запросов на регистрацию");

                entity.HasIndex(e => e.AbonentGuid, "reg_request_abonent_guid_idx");

                entity.HasIndex(e => e.AbonentTypeId, "reg_request_abonent_type_id_idx");

                entity.HasIndex(e => e.CategoryId, "reg_request_category_id_idx");

                entity.HasIndex(e => e.CenterId, "reg_request_center_id_idx");

                entity.HasIndex(e => e.CompanyGroup2Id, "reg_request_company_group_id_idx");

                entity.HasIndex(e => e.CreationTime, "reg_request_creation_time_idx");

                entity.HasIndex(e => e.IdentPointId, "reg_request_ident_point_id_idx");

                entity.HasIndex(e => e.Inn, "reg_request_inn_idx");

                entity.HasIndex(e => e.LocationAddressId, "reg_request_location_address_id_idx");

                entity.HasIndex(e => e.CompanyGroupId, "reg_request_main_abonent_id_idx");

                entity.HasIndex(e => e.OfficeId, "reg_request_office_id_idx");

                entity.HasIndex(e => e.OkopfId, "reg_request_okopf_id_idx");

                entity.HasIndex(e => e.PostalAddressId, "reg_request_postal_address_id_idx");

                entity.HasIndex(e => e.ProductId, "reg_request_product_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "reg_request_product_type_id_idx");

                entity.HasIndex(e => e.ProxyAgentId, "reg_request_proxy_agent_id_idx");

                entity.HasIndex(e => e.RegRequestTypeId, "reg_request_reg_request_type_id_idx");

                entity.HasIndex(e => e.RegistrationNumberOld, "reg_request_registration_number_old_idx");

                entity.HasIndex(e => e.RequestId, "reg_request_request_id_idx");

                entity.HasIndex(e => e.ShortName, "reg_request_short_name_idx");

                entity.HasIndex(e => e.StepId, "reg_request_step_id_idx");

                entity.HasIndex(e => e.StorageTypeId, "reg_request_storage_type_id_idx");

                entity.HasIndex(e => e.TransferPointId, "reg_request_transfer_point_id_idx");

                entity.HasIndex(e => e.UserId, "reg_request_user_id_idx");

                entity.HasIndex(e => e.WorkflowId, "sk_reg_request")
                    .IsUnique();

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentGuid)
                    .HasColumnName("abonent_guid")
                    .HasComment("ГУИД абонента");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Тип абонента");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasComment("Категория");

                entity.Property(e => e.CenterId)
                    .HasColumnName("center_id")
                    .HasComment("Центр компетенции");

                entity.Property(e => e.CompanyGroup2Id)
                    .HasColumnName("company_group2_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Главный абонент");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл. адрес");

                entity.Property(e => e.EmplParentNo)
                    .HasMaxLength(5)
                    .HasColumnName("empl_parent_no")
                    .HasComment("Код подчиненности ФСС");

                entity.Property(e => e.FormatVersion)
                    .HasMaxLength(10)
                    .HasColumnName("format_version")
                    .HasComment("Версия формата");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.IdentPointId)
                    .HasColumnName("ident_point_id")
                    .HasComment("Точка идентификации");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.IsIts)
                    .HasColumnName("is_its")
                    .HasComment("Флаг ИТС");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss")
                    .HasComment("Код подразделения ФСС");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.LocationAddressId)
                    .HasColumnName("location_address_id")
                    .HasComment("Фактический адрес");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.OkopfId)
                    .HasColumnName("okopf_id")
                    .HasComment("ОКОПФ");

                entity.Property(e => e.Okpo)
                    .HasMaxLength(14)
                    .HasColumnName("okpo")
                    .HasComment("ОКПО");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PostalAddressId)
                    .HasColumnName("postal_address_id")
                    .HasComment("Почтовый адрес");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version")
                    .HasComment("Версия программы (конфигурации)");

                entity.Property(e => e.ProxyAgentId)
                    .HasColumnName("proxy_agent_id")
                    .HasComment("УП");

                entity.Property(e => e.RegRequestTypeId)
                    .HasColumnName("reg_request_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number")
                    .HasComment("Рег. номер продукта");

                entity.Property(e => e.RegistrationNumberOld)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number_old")
                    .HasComment("Рег номер продукта до перехода на опции");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss")
                    .HasComment("Рег. номер ФСС");

                entity.Property(e => e.RnsFssSub)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss_sub")
                    .HasComment("Рег. номер ФСС обособленного подразделения");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr")
                    .HasComment("Рег. номер ПФР");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.SmsConfirmation)
                    .HasColumnName("sms_confirmation")
                    .HasComment("СМС подтверждение");

                entity.Property(e => e.StPfr)
                    .HasColumnName("st_pfr")
                    .HasComment("ИП работодатель");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.Property(e => e.TransferPointId)
                    .HasColumnName("transfer_point_id")
                    .HasComment("Точка выдачи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_category");

                entity.HasOne(d => d.Center)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.CenterId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_center");

                entity.HasOne(d => d.CompanyGroup2)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.CompanyGroup2Id)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_company_group");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_main_abonent");

                entity.HasOne(d => d.IdentPoint)
                    .WithMany(p => p.RoRegRequestIdentPoints)
                    .HasForeignKey(d => d.IdentPointId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ident_point");

                entity.HasOne(d => d.LocationAddress)
                    .WithMany(p => p.RoRegRequestLocationAddresses)
                    .HasForeignKey(d => d.LocationAddressId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_location_address");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Okopf)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.OkopfId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_okopf");

                entity.HasOne(d => d.PostalAddress)
                    .WithMany(p => p.RoRegRequestPostalAddresses)
                    .HasForeignKey(d => d.PostalAddressId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_postal_address");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.ProxyAgent)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.ProxyAgentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_proxy_agent");

                entity.HasOne(d => d.RegRequestType)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.RegRequestTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_reg_request_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_storage_type");

                entity.HasOne(d => d.TransferPoint)
                    .WithMany(p => p.RoRegRequestTransferPoints)
                    .HasForeignKey(d => d.TransferPointId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_transfer_point");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.Workflow)
                    .WithOne(p => p.RoRegRequest)
                    .HasForeignKey<RoRegRequest>(d => d.WorkflowId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RoRegRequestAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("pk_reg_request_account");

                entity.ToTable("ro_reg_request_account");

                entity.HasComment("Таблица учетных записей заявления");

                entity.HasIndex(e => e.Login, "reg_request_account_login_idx");

                entity.HasIndex(e => e.PortalTypeId, "reg_request_account_portal_type_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_account_reg_request_id_idx");

                entity.HasIndex(e => new { e.RegRequestId, e.PortalTypeId }, "sk_reg_request_account")
                    .IsUnique();

                entity.Property(e => e.AccountId)
                    .HasColumnName("account_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Login)
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.PortalTypeId)
                    .HasColumnName("portal_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип учетной записи");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.HasOne(d => d.PortalType)
                    .WithMany(p => p.RoRegRequestAccounts)
                    .HasForeignKey(d => d.PortalTypeId)
                    .HasConstraintName("fk_portal_type");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestAccounts)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RoRegRequestChecking>(entity =>
            {
                entity.HasKey(e => e.CheckingId)
                    .HasName("pk_reg_request_checking");

                entity.ToTable("ro_reg_request_checking");

                entity.HasComment("Таблица проверок для заявлений");

                entity.HasIndex(e => e.TaskId, "idx_ro_reg_request_checking_task_id");

                entity.HasIndex(e => e.CheckingTypeId, "reg_request_checking_checking_type_id_idx");

                entity.HasIndex(e => e.ContentId, "reg_request_checking_content_id_idx");

                entity.HasIndex(e => e.MemberId, "reg_request_checking_member_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_checking_reg_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_request_checking_step_id_idx");

                entity.HasIndex(e => new { e.StepId, e.CheckingTypeId }, "reg_request_checking_step_id_type_id");

                entity.HasIndex(e => new { e.RegRequestId, e.MemberId, e.CheckingTypeId }, "sk_reg_request_checking")
                    .IsUnique();

                entity.Property(e => e.CheckingId)
                    .HasColumnName("checking_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CheckingTime)
                    .HasPrecision(0)
                    .HasColumnName("checking_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата проверки");

                entity.Property(e => e.CheckingTypeId)
                    .HasColumnName("checking_type_id")
                    .HasComment("Тип проверки");

                entity.Property(e => e.ContentId)
                    .HasColumnName("content_id")
                    .HasComment("Содержание проверки");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.CheckingType)
                    .WithMany(p => p.RoRegRequestCheckings)
                    .HasForeignKey(d => d.CheckingTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_checking_type");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.RoRegRequestCheckings)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_content");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RoRegRequestCheckings)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_member");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestCheckings)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRegRequestCheckings)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegRequestCheckings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoRegRequestCheckingStep>(entity =>
            {
                entity.HasKey(e => new { e.CheckingId, e.StepId, e.LogTime })
                    .HasName("pk_reg_request_checking_step");

                entity.ToTable("ro_reg_request_checking_step");

                entity.HasComment("Таблица состояний проверок по заявлениям");

                entity.HasIndex(e => e.CheckingId, "reg_request_checking_step_checking_id_idx");

                entity.HasIndex(e => e.StepId, "reg_request_checking_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_request_checking_step_user_id_idx");

                entity.Property(e => e.CheckingId)
                    .HasColumnName("checking_id")
                    .HasComment("Проверка");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Checking)
                    .WithMany(p => p.RoRegRequestCheckingSteps)
                    .HasForeignKey(d => d.CheckingId)
                    .HasConstraintName("fk_checking");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRegRequestCheckingSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegRequestCheckingSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoRegRequestComment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("ro_reg_request_comment_pkey");

                entity.ToTable("ro_reg_request_comment");

                entity.HasComment("Таблица с сообщениями");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Идентификатор комментария");

                entity.Property(e => e.CommentText)
                    .HasMaxLength(128)
                    .HasColumnName("comment_text")
                    .HasComment("Текст сообщения");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasComment("Дата создания");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Идентификатор лида");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestComments)
                    .HasForeignKey(d => d.RegRequestId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_reg_request_comment_fk_reg_requests");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegRequestComments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_reg_request_comment_fk_users");
            });

            modelBuilder.Entity<RoRegRequestConfirmedStep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_reg_request_confirmed_step");

                entity.HasIndex(e => e.RegRequestId, "idx_ro_reg_request_confirmed_reg_request_id")
                    .IsUnique();

                entity.Property(e => e.ConfirmationTime)
                    .HasPrecision(0)
                    .HasColumnName("confirmation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время подтверждения");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявка");

                entity.HasOne(d => d.RegRequest)
                    .WithOne()
                    .HasForeignKey<RoRegRequestConfirmedStep>(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request_id");
            });

            modelBuilder.Entity<RoRegRequestContact>(entity =>
            {
                entity.HasKey(e => e.ContactId)
                    .HasName("pk_reg_request_contact");

                entity.ToTable("ro_reg_request_contact");

                entity.HasComment("Контактные данные заявления");

                entity.HasIndex(e => e.RegRequestId, "reg_request_contact_reg_request_id_idx");

                entity.HasIndex(e => e.TypeId, "reg_request_contact_type_id_idx");

                entity.HasIndex(e => new { e.RegRequestId, e.TypeId, e.ContactValue }, "sk_reg_request_contact")
                    .IsUnique();

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContactValue)
                    .HasMaxLength(100)
                    .HasColumnName("contact_value")
                    .HasComment("Данные контакта");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestContacts)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoRegRequestContacts)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contact_type");
            });

            modelBuilder.Entity<RoRegRequestContactUse>(entity =>
            {
                entity.HasKey(e => new { e.ContactId, e.TypeId })
                    .HasName("pk_reg_request_contact_use");

                entity.ToTable("ro_reg_request_contact_use");

                entity.HasComment("Использование контактов заявления");

                entity.HasIndex(e => e.ContactId, "reg_request_contact_use_contact_id_idx");

                entity.HasIndex(e => e.TypeId, "reg_request_contact_use_type_id_idx");

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Контакт");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasDefaultValueSql("true")
                    .HasComment("Основной");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.RoRegRequestContactUses)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("fk_contact");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoRegRequestContactUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RoRegRequestDoc>(entity =>
            {
                entity.HasKey(e => new { e.RegRequestId, e.DocId })
                    .HasName("pk_reg_request_document");

                entity.ToTable("ro_reg_request_doc");

                entity.HasComment("Таблица документов заявлений");

                entity.HasIndex(e => e.DocId, "reg_request_doc_doc_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_doc_reg_request_id_idx");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Документ");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("ИД сотрудника");

                entity.Property(e => e.SourceId)
                    .HasColumnName("source_id")
                    .HasComment("Источник документа: 1 - заявление, 2 - продукт");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.RoRegRequestDocs)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("fk_doc");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RoRegRequestDocs)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_member_id");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestDocs)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RoRegRequestEgrulRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_reg_request_egrul_request");

                entity.Property(e => e.EgrulRequestId)
                    .HasMaxLength(32)
                    .HasColumnName("egrul_request_id")
                    .HasComment("Идентификатор запроса на выписку ЕГРЮЛ");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата получения документа");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Идентификатор заявки");
            });

            modelBuilder.Entity<RoRegRequestFeedback>(entity =>
            {
                entity.HasKey(e => e.FeedbackId)
                    .HasName("pk_reg_request_feedback");

                entity.ToTable("ro_reg_request_feedback");

                entity.HasComment("Таблица обратной связи по заявлениям");

                entity.HasIndex(e => e.RatingId, "reg_request_feedback_rating_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_feedback_reg_request_id_idx");

                entity.Property(e => e.FeedbackId)
                    .HasColumnName("feedback_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.RatingId)
                    .HasColumnName("rating_id")
                    .HasComment("Оценка");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.HasOne(d => d.Rating)
                    .WithMany(p => p.RoRegRequestFeedbacks)
                    .HasForeignKey(d => d.RatingId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_feedback_rating");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestFeedbacks)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RoRegRequestGate>(entity =>
            {
                entity.HasKey(e => e.RegRequestGateId)
                    .HasName("pk_reg_request_gate");

                entity.ToTable("ro_reg_request_gate");

                entity.HasComment("Таблица гейтов заявлений");

                entity.Property(e => e.RegRequestGateId).HasColumnName("reg_request_gate_id");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.RoRegRequestGates)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate_id");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestGates)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request_id");
            });

            modelBuilder.Entity<RoRegRequestMember>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("pk_reg_request_member");

                entity.ToTable("ro_reg_request_member");

                entity.HasComment("Таблица сотрудников запроса на регистрацию");

                entity.HasIndex(e => e.CaId, "reg_request_member_ca_id_idx");

                entity.HasIndex(e => e.CertId, "reg_request_member_cert_id_idx");

                entity.HasIndex(e => e.CertRequestId, "reg_request_member_cert_request_id_idx");

                entity.HasIndex(e => e.CertTemplateId, "reg_request_member_cert_template_id_idx");

                entity.HasIndex(e => e.CountryId, "reg_request_member_country_id_idx");

                entity.HasIndex(e => e.DssId, "reg_request_member_dss_id_idx");

                entity.HasIndex(e => e.DssLogin, "reg_request_member_dss_login_idx");

                entity.HasIndex(e => e.GenderId, "reg_request_member_gender_id_idx");

                entity.HasIndex(e => e.OrgUnitId, "reg_request_member_org_unit_id_idx");

                entity.HasIndex(e => e.PassportTypeId, "reg_request_member_passport_type_id_idx");

                entity.HasIndex(e => e.PostId, "reg_request_member_post_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "reg_request_member_product_person_id_idx");

                entity.HasIndex(e => e.ProviderId, "reg_request_member_provider_id_idx");

                entity.HasIndex(e => e.RegFileTypeId, "reg_request_member_reg_file_type_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_member_reg_request_id_idx");

                entity.HasIndex(e => e.SignQualificationId, "reg_request_member_sign_qualification_id_idx");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.BirthDate)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(150)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Ссылка на УЦ");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.ContainerName)
                    .HasMaxLength(50)
                    .HasColumnName("container_name")
                    .HasComment("Контейнер");

                entity.Property(e => e.CountryId)
                    .HasMaxLength(3)
                    .HasColumnName("country_id")
                    .HasComment("Гражданство");

                entity.Property(e => e.DssAuthModeId)
                    .HasColumnName("dss_auth_mode_id")
                    .HasComment("Режим аутентификации в DSS");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasComment("DSS");

                entity.Property(e => e.DssLogin)
                    .HasMaxLength(36)
                    .HasColumnName("dss_login")
                    .HasDefaultValueSql("NULL::character varying")
                    .HasComment("Логин DSS");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Encrypt)
                    .IsRequired()
                    .HasColumnName("encrypt")
                    .HasDefaultValueSql("true")
                    .HasComment("Шифровальщик");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(150)
                    .HasColumnName("first_name")
                    .HasComment("Имя");

                entity.Property(e => e.ForceQrcodeGeneration)
                    .HasColumnName("force_qrcode_generation")
                    .HasComment("Переобновление QR кода");

                entity.Property(e => e.ForceUpdate)
                    .HasColumnName("force_update")
                    .HasComment("Принудительная замена сертификата");

                entity.Property(e => e.GenderId)
                    .HasColumnName("gender_id")
                    .HasComment("Пол");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН физического лица");

                entity.Property(e => e.IonOnline)
                    .HasColumnName("ion_online")
                    .HasComment("Онлайн");

                entity.Property(e => e.IsAdministrator)
                    .HasColumnName("is_administrator")
                    .HasComment("Сотрудник имеет роль Администратор");

                entity.Property(e => e.IsTrusted)
                    .HasColumnName("is_trusted")
                    .HasComment("Это доверенное лицо");

                entity.Property(e => e.LastName)
                    .HasMaxLength(150)
                    .HasColumnName("last_name")
                    .HasComment("Фамилия");

                entity.Property(e => e.MemberGuid)
                    .HasColumnName("member_guid")
                    .HasComment("ГУИД сотрудника");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный телефон");

                entity.Property(e => e.OrgUnitId)
                    .HasColumnName("org_unit_id")
                    .HasComment("Подразделение");

                entity.Property(e => e.PasportDate)
                    .HasColumnName("pasport_date")
                    .HasComment("Когда выдан документ");

                entity.Property(e => e.PassportAddon)
                    .HasMaxLength(200)
                    .HasColumnName("passport_addon")
                    .HasComment("Кем выдан документ");

                entity.Property(e => e.PassportEndDate)
                    .HasColumnName("passport_end_date")
                    .HasComment("Дата окончания срока действия паспорта");

                entity.Property(e => e.PassportNumber)
                    .HasMaxLength(25)
                    .HasColumnName("passport_number")
                    .HasComment("Номер документа");

                entity.Property(e => e.PassportSeries)
                    .HasMaxLength(25)
                    .HasColumnName("passport_series")
                    .HasComment("Серия документа");

                entity.Property(e => e.PassportTypeId)
                    .HasColumnName("passport_type_id")
                    .HasComment("Тип документа");

                entity.Property(e => e.PassportUnit)
                    .HasMaxLength(7)
                    .HasColumnName("passport_unit")
                    .HasComment("Код подразделения, выдавшего паспорт");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество");

                entity.Property(e => e.PostId)
                    .HasColumnName("post_id")
                    .HasComment("Должность");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник продукта");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.RegFileTypeId)
                    .HasColumnName("reg_file_type_id")
                    .HasComment("Тип рег-файла");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Запрос");

                entity.Property(e => e.SignQualificationId)
                    .HasColumnName("sign_qualification_id")
                    .HasComment("Квалификация подписи");

                entity.Property(e => e.Signer)
                    .IsRequired()
                    .HasColumnName("signer")
                    .HasDefaultValueSql("true")
                    .HasComment("Подписант");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.Property(e => e.SubjectKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id")
                    .HasComment("Идентификатор ключа субъекта");

                entity.Property(e => e.TemplateId)
                    .HasColumnName("template_id")
                    .HasComment("Шаблон УЦ");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.CaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_country");

                entity.HasOne(d => d.DssAuthMode)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.DssAuthModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss_auth_mode");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.DssId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.GenderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_gender");

                entity.HasOne(d => d.OrgUnit)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.OrgUnitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_org_unit");

                entity.HasOne(d => d.PassportType)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.PassportTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_type");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_post");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_provider");

                entity.HasOne(d => d.RegFileType)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.RegFileTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_reg_file_type");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.SignQualification)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.SignQualificationId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_sign_qualification");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_storage_type");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.RoRegRequestMembers)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_template");

                entity.HasMany(d => d.Ekus)
                    .WithMany(p => p.RegRequestMembers)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoRegRequestMemberEku",
                        l => l.HasOne<RoEku>().WithMany().HasForeignKey("EkuId").HasConstraintName("fk_eku"),
                        r => r.HasOne<RoRegRequestMember>().WithMany().HasForeignKey("RegRequestMemberId").HasConstraintName("fk_reg_request_member"),
                        j =>
                        {
                            j.HasKey("RegRequestMemberId", "EkuId").HasName("pk_reg_request_member_eku");

                            j.ToTable("ro_reg_request_member_eku").HasComment("Таблица расширений сертификата сотрудника");

                            j.HasIndex(new[] { "EkuId" }, "reg_request_member_eku_eku_id_idx");

                            j.HasIndex(new[] { "RegRequestMemberId" }, "reg_request_member_eku_product_person_id_idx");

                            j.IndexerProperty<int>("RegRequestMemberId").HasColumnName("reg_request_member_id").HasComment("Сотрудник");

                            j.IndexerProperty<int>("EkuId").HasColumnName("eku_id").HasComment("Расширение");
                        });
            });

            modelBuilder.Entity<RoRegRequestMemberContact>(entity =>
            {
                entity.HasKey(e => e.ContactId)
                    .HasName("pk_reg_request_member_contact");

                entity.ToTable("ro_reg_request_member_contact");

                entity.HasComment("Контактные данные сотрудника");

                entity.HasIndex(e => e.RegRequestMemberId, "reg_request_member_contact_reg_request_member_id_idx");

                entity.HasIndex(e => e.TypeId, "reg_request_member_contact_type_id_idx");

                entity.HasIndex(e => new { e.RegRequestMemberId, e.TypeId, e.ContactValue }, "sk_reg_request_member_contact")
                    .IsUnique();

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContactValue)
                    .HasMaxLength(100)
                    .HasColumnName("contact_value")
                    .HasComment("Данные контакта");

                entity.Property(e => e.RegRequestMemberId)
                    .HasColumnName("reg_request_member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.RegRequestMember)
                    .WithMany(p => p.RoRegRequestMemberContacts)
                    .HasForeignKey(d => d.RegRequestMemberId)
                    .HasConstraintName("fk_reg_request_member");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoRegRequestMemberContacts)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contact_type");
            });

            modelBuilder.Entity<RoRegRequestMemberContactUse>(entity =>
            {
                entity.HasKey(e => new { e.ContactId, e.TypeId })
                    .HasName("pk_reg_request_member_contact_use");

                entity.ToTable("ro_reg_request_member_contact_use");

                entity.HasComment("Использование контактов сотрудников");

                entity.HasIndex(e => e.ContactId, "reg_request_member_contact_use_contact_id_idx");

                entity.HasIndex(e => e.TypeId, "reg_request_member_contact_use_type_id_idx");

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Контакт");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasDefaultValueSql("true")
                    .HasComment("Основной");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.RoRegRequestMemberContactUses)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("fk_contact");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RoRegRequestMemberContactUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RoRegRequestMemberRecipientType>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_reg_request_member_recipient_type");

                entity.Property(e => e.IsEncryptor).HasColumnName("is_encryptor");

                entity.Property(e => e.MemberId).HasColumnName("member_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.HasOne(d => d.Member)
                    .WithMany()
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("ro_reg_request_member_recipient_type_member_id_fkey");

                entity.HasOne(d => d.Protocol)
                    .WithMany()
                    .HasForeignKey(d => d.ProtocolId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_reg_request_member_recipient_type_protocol_id_fkey");
            });

            modelBuilder.Entity<RoRegRequestPassportChecking>(entity =>
            {
                entity.HasKey(e => e.PassportCheckingId)
                    .HasName("pk_reg_request_passport_checking");

                entity.ToTable("ro_reg_request_passport_checking");

                entity.HasComment("Таблица проверки данных паспорта для заявлений");

                entity.HasIndex(e => e.PassportDataTypeId, "reg_request_passport_checking_passport_data_type_id_idx");

                entity.HasIndex(e => e.RegRequestCheckingId, "reg_request_passport_checking_reg_request_checking_id_idx");

                entity.Property(e => e.PassportCheckingId)
                    .HasColumnName("passport_checking_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IsEquals)
                    .HasColumnName("is_equals")
                    .HasComment("Данные совпадают");

                entity.Property(e => e.PassportDataFromRequest)
                    .HasMaxLength(200)
                    .HasColumnName("passport_data_from_request")
                    .HasComment("Данные паспорта из заявки");

                entity.Property(e => e.PassportDataFromScan)
                    .HasMaxLength(200)
                    .HasColumnName("passport_data_from_scan")
                    .HasComment("Данные паспорта со скана");

                entity.Property(e => e.PassportDataTypeId)
                    .HasColumnName("passport_data_type_id")
                    .HasComment("Тип данных паспорта");

                entity.Property(e => e.RegRequestCheckingId)
                    .HasColumnName("reg_request_checking_id")
                    .HasComment("Проверка скана паспорта");

                entity.HasOne(d => d.PassportDataType)
                    .WithMany(p => p.RoRegRequestPassportCheckings)
                    .HasForeignKey(d => d.PassportDataTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_data_type");

                entity.HasOne(d => d.RegRequestChecking)
                    .WithMany(p => p.RoRegRequestPassportCheckings)
                    .HasForeignKey(d => d.RegRequestCheckingId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_reg_request_checking");
            });

            modelBuilder.Entity<RoRegRequestPlugin>(entity =>
            {
                entity.HasKey(e => e.RegRequestPluginId)
                    .HasName("pk_reg_request_plugin");

                entity.ToTable("ro_reg_request_plugin");

                entity.HasComment("Таблица плагинов заявлений на регистрацию");

                entity.HasIndex(e => new { e.TariffId, e.PluginId }, "reg_request_plugin_tariff_id_plugin_id_idx");

                entity.HasIndex(e => new { e.RegRequestId, e.PluginId }, "sk_reg_request_plugin")
                    .IsUnique();

                entity.Property(e => e.RegRequestPluginId)
                    .HasColumnName("reg_request_plugin_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PluginId).HasColumnName("plugin_id");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Плагин");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.HasOne(d => d.Plugin)
                    .WithMany(p => p.RoRegRequestPlugins)
                    .HasForeignKey(d => d.PluginId)
                    .HasConstraintName("fk_plugin");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestPlugins)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.RoPluginTariff)
                    .WithMany(p => p.RoRegRequestPlugins)
                    .HasForeignKey(d => new { d.TariffId, d.PluginId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_plugin_tariff");
            });

            modelBuilder.Entity<RoRegRequestRecipient>(entity =>
            {
                entity.HasKey(e => e.RecipientId)
                    .HasName("pk_reg_request_recipient");

                entity.ToTable("ro_reg_request_recipient");

                entity.HasComment("Таблица получателей запроса на регистрацию");

                entity.HasIndex(e => e.ProtocolId, "reg_request_recipient_protocol_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_recipient_reg_request_id_idx");

                entity.HasIndex(e => new { e.RegRequestId, e.ProtocolId, e.RecipientCode }, "sk_reg_request_recipient")
                    .IsUnique();

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер участка");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("Код");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Запрос");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RoRegRequestRecipients)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestRecipients)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RoRegRequestRoute>(entity =>
            {
                entity.HasKey(e => new { e.RecipientId, e.Kpp })
                    .HasName("pk_reg_request_route");

                entity.ToTable("ro_reg_request_route");

                entity.HasComment("Таблица маршрутов запроса на регистрацию");

                entity.HasIndex(e => e.RecipientId, "reg_request_route_recipient_id_idx");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .IsFixedLength()
                    .HasComment("КПП");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RoRegRequestRoutes)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RoRegRequestService>(entity =>
            {
                entity.HasKey(e => e.ServiceId)
                    .HasName("pk_reg_request_service");

                entity.ToTable("ro_reg_request_service");

                entity.HasComment("Таблица для описания доп. услуг, указанных в заявке.");

                entity.HasIndex(e => e.MemberId, "reg_request_service_member_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_service_reg_request_id_idx");

                entity.HasIndex(e => e.ServiceTypeId, "reg_request_service_service_type_id_idx");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("service_id")
                    .HasComment("Идентификатор услуги");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Ссылка на заявку");

                entity.Property(e => e.ServiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("service_number")
                    .HasComment("Номер услуги");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Ссылка на тип услуги");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RoRegRequestServices)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_member");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestServices)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.RoRegRequestServices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("fk_service_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegRequestServices)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<RoRegRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.RegRequestId, e.StepId, e.LogTime })
                    .HasName("pk_reg_request_step");

                entity.ToTable("ro_reg_request_step");

                entity.HasComment("Таблица состояний продуктов");

                entity.HasIndex(e => e.RegRequestId, "reg_request_step_reg_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_request_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_request_step_user_id_idx");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestSteps)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRegRequestSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegRequestSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoRegRequestStepProductView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_reg_request_step_product_view");

                entity.Property(e => e.AbonentGuid).HasColumnName("abonent_guid");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.ClStepType).HasColumnName("cl_step_type");

                entity.Property(e => e.CompanyGroupInn).HasColumnName("company_group_inn");

                entity.Property(e => e.CompanyGroupKpp).HasColumnName("company_group_kpp");

                entity.Property(e => e.CompanyGroupName).HasColumnName("company_group_name");

                entity.Property(e => e.CrStepType).HasColumnName("cr_step_type");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.FirstTeamPerson).HasColumnName("first_team_person");

                entity.Property(e => e.FormatVersion)
                    .HasMaxLength(10)
                    .HasColumnName("format_version");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.IrucStepType).HasColumnName("iruc_step_type");

                entity.Property(e => e.IsBonus).HasColumnName("is_bonus");

                entity.Property(e => e.IsIts).HasColumnName("is_its");

                entity.Property(e => e.IsSpecialCondition).HasColumnName("is_special_condition");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.PostalAddressId).HasColumnName("postal_address_id");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductStepId).HasColumnName("product_step_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.RegRequestTypeId).HasColumnName("reg_request_type_id");

                entity.Property(e => e.RegRequestTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("reg_request_type_name");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number");

                entity.Property(e => e.SecondTeamPerson).HasColumnName("second_team_person");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.SpecialConditionNumber).HasColumnName("special_condition_number");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.StepName)
                    .HasMaxLength(40)
                    .HasColumnName("step_name");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.WorkflowTypeId).HasColumnName("workflow_type_id");
            });

            modelBuilder.Entity<RoRegRequestSummaryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_reg_request_summary_view");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");
            });

            modelBuilder.Entity<RoRegRequestTariff>(entity =>
            {
                entity.HasKey(e => new { e.RegRequestId, e.TariffId })
                    .HasName("pk_reg_request_tariff");

                entity.ToTable("ro_reg_request_tariff");

                entity.HasComment("Таблица услуг заявлений");

                entity.HasIndex(e => e.RegRequestId, "reg_request_tariff_reg_request_id_idx");

                entity.HasIndex(e => e.SectionId, "reg_request_tariff_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "reg_request_tariff_section_id_tariff_id_idx");

                entity.HasIndex(e => e.TariffId, "reg_request_tariff_tariff_id_idx");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasDefaultValueSql("1")
                    .HasComment("Количество");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasComment("Дата начала");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestTariffs)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.RoRegRequestTariffs)
                    .HasForeignKey(d => d.SectionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoRegRequestTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.RoPriceTariff)
                    .WithMany(p => p.RoRegRequestTariffs)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<RoRegRequestTeam>(entity =>
            {
                entity.HasKey(e => e.RegRequestId)
                    .HasName("ro_reg_request_team_pkey");

                entity.ToTable("ro_reg_request_team");

                entity.HasComment("Заявки, одобренные командами");

                entity.Property(e => e.RegRequestId)
                    .ValueGeneratedNever()
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявка");

                entity.Property(e => e.OfficeTeamId)
                    .HasColumnName("office_team_id")
                    .HasComment("Команда");

                entity.HasOne(d => d.OfficeTeam)
                    .WithMany(p => p.RoRegRequestTeams)
                    .HasForeignKey(d => d.OfficeTeamId)
                    .HasConstraintName("fk_office_team");

                entity.HasOne(d => d.RegRequest)
                    .WithOne(p => p.RoRegRequestTeam)
                    .HasForeignKey<RoRegRequestTeam>(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RoRegRequestTransferLog>(entity =>
            {
                entity.HasKey(e => e.RegRequestTransferId)
                    .HasName("pk_reg_request_transfer_log");

                entity.ToTable("ro_reg_request_transfer_log");

                entity.HasComment("Таблица логирования переноса заявлений");

                entity.HasIndex(e => e.OfficeId, "reg_request_transfer_office_id_idx");

                entity.HasIndex(e => e.PreviousOfficeId, "reg_request_transfer_previous_office_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_transfer_reg_request_id_idx");

                entity.HasIndex(e => e.UserId, "reg_request_transfer_user_id_idx");

                entity.Property(e => e.RegRequestTransferId)
                    .HasColumnName("reg_request_transfer_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PreviousOfficeId)
                    .HasColumnName("previous_office_id")
                    .HasComment("Предыдущий офис");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoRegRequestTransferLogOffices)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.PreviousOffice)
                    .WithMany(p => p.RoRegRequestTransferLogPreviousOffices)
                    .HasForeignKey(d => d.PreviousOfficeId)
                    .HasConstraintName("fk_previous_office");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RoRegRequestTransferLogs)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoRegRequestTransferLogs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoRegRequestType>(entity =>
            {
                entity.HasKey(e => e.RegRequestTypeId)
                    .HasName("pk_reg_request_type");

                entity.ToTable("ro_reg_request_type");

                entity.HasComment("Таблица типов запросов на регистрацию");

                entity.HasIndex(e => e.RegRequestTypeName, "sk_reg_request_type_name")
                    .IsUnique();

                entity.Property(e => e.RegRequestTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("reg_request_type_id")
                    .HasComment("Код");

                entity.Property(e => e.RegRequestTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("reg_request_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoRegion>(entity =>
            {
                entity.HasKey(e => e.RegionId)
                    .HasName("pk_region");

                entity.ToTable("ro_region");

                entity.HasComment("Таблица регионов");

                entity.HasIndex(e => e.OfficeId, "region_office_id_idx");

                entity.HasIndex(e => e.RegionCode, "sk_region_code")
                    .IsUnique();

                entity.HasIndex(e => e.RegionName, "sk_region_name")
                    .IsUnique();

                entity.HasIndex(e => e.RegionPfrCode, "sk_region_pfr_code")
                    .IsUnique();

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Центр компетенции");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(3)
                    .HasColumnName("region_code")
                    .HasComment("Код ФНС");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RegionPfrCode)
                    .HasMaxLength(3)
                    .HasColumnName("region_pfr_code")
                    .HasComment("Код ПФР");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RoRegions)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<RoRegionStatistic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_region_statistic");

                entity.HasComment("Представление для статистики по регионам");

                entity.Property(e => e.Cf).HasColumnName("cf");

                entity.Property(e => e.CountFull).HasColumnName("count_full");

                entity.Property(e => e.CountWeek).HasColumnName("count_week");

                entity.Property(e => e.ItsCount).HasColumnName("its_count");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");

                entity.Property(e => e.Success).HasColumnName("success");
            });

            modelBuilder.Entity<RoRegionTimeZone>(entity =>
            {
                entity.HasKey(e => e.RegionId)
                    .HasName("pk_time_zone");

                entity.ToTable("ro_region_time_zone");

                entity.HasComment("Таблица временных зон регионов");

                entity.Property(e => e.RegionId)
                    .ValueGeneratedNever()
                    .HasColumnName("region_id")
                    .HasComment("Идентификатор региона");

                entity.Property(e => e.TimeOffset)
                    .HasColumnName("time_offset")
                    .HasComment("Смещение времени");

                entity.HasOne(d => d.Region)
                    .WithOne(p => p.RoRegionTimeZone)
                    .HasForeignKey<RoRegionTimeZone>(d => d.RegionId)
                    .HasConstraintName("fk_time_zone");
            });

            modelBuilder.Entity<RoRegionalAgent>(entity =>
            {
                entity.HasKey(e => new { e.AgentId, e.RegionId })
                    .HasName("ro_regional_agent_pkey");

                entity.ToTable("ro_regional_agent");

                entity.HasComment("Региональные дистрибьютеры 1С по схеме учета от 1С");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Дистрибьютор");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoRegionalAgents)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("ro_region_fk");
            });

            modelBuilder.Entity<RoRejectedRegRequest>(entity =>
            {
                entity.HasKey(e => e.RejectedRegRequestId)
                    .HasName("pk_rejected_reg_request");

                entity.ToTable("ro_rejected_reg_request");

                entity.HasComment("Таблица отклоненных заявлений");

                entity.HasIndex(e => e.Inn, "rejected_reg_request_inn_idx");

                entity.HasIndex(e => e.ProductTypeId, "rejected_reg_request_product_type_id_idx");

                entity.HasIndex(e => e.RegRequestTypeId, "rejected_reg_request_reg_request_type_id_idx");

                entity.HasIndex(e => e.RequestId, "rejected_reg_request_request_id_idx");

                entity.HasIndex(e => e.ShortName, "rejected_reg_request_short_name_idx");

                entity.HasIndex(e => e.StepId, "rejected_reg_request_step_id_idx");

                entity.HasIndex(e => e.WorkflowId, "sk_rejected_reg_request")
                    .IsUnique();

                entity.Property(e => e.RejectedRegRequestId)
                    .HasColumnName("rejected_reg_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasComment("КПП");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.ProductGuid)
                    .HasColumnName("product_guid")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.RegRequestTypeId)
                    .HasColumnName("reg_request_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.ShortName)
                    .HasColumnType("character varying")
                    .HasColumnName("short_name")
                    .HasComment("Нименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoRejectedRegRequests)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.RegRequestType)
                    .WithMany(p => p.RoRejectedRegRequests)
                    .HasForeignKey(d => d.RegRequestTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_reg_request_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRejectedRegRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Workflow)
                    .WithOne(p => p.RoRejectedRegRequest)
                    .HasForeignKey<RoRejectedRegRequest>(d => d.WorkflowId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RoReport>(entity =>
            {
                entity.HasKey(e => e.ReportId)
                    .HasName("ro_report_pkey");

                entity.ToTable("ro_report");

                entity.HasIndex(e => e.AgentId, "idx_ro_report_agent_id");

                entity.HasIndex(e => new { e.AgentId, e.ProductTypeId, e.Year, e.Month }, "idx_ro_report_agent_id_prod_type_id_year_month")
                    .IsUnique();

                entity.HasIndex(e => e.Month, "idx_ro_report_month");

                entity.HasIndex(e => e.ProductTypeId, "idx_ro_report_product_type_id");

                entity.HasIndex(e => e.StepId, "idx_ro_report_step_id");

                entity.HasIndex(e => e.UpdateTime, "idx_ro_report_update_time");

                entity.HasIndex(e => e.Year, "idx_ro_report_year");

                entity.Property(e => e.ReportId)
                    .HasColumnName("report_id")
                    .HasComment("Ид");

                entity.Property(e => e.ActiveCount)
                    .HasColumnName("active_count")
                    .HasComment("Кол. активных абонентов");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнёр");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasComment("Дата создания");

                entity.Property(e => e.IncCount)
                    .HasColumnName("inc_count")
                    .HasComment("Прирост за текущий период");

                entity.Property(e => e.LastYearLostCount)
                    .HasColumnName("last_year_lost_count")
                    .HasComment("Кол. непродлённых абонентов в прошлом году");

                entity.Property(e => e.LastYearLostInPeriod)
                    .HasColumnName("last_year_lost_in_period")
                    .HasComment("Отвал за период в прошлом году");

                entity.Property(e => e.LastYearToProlCount)
                    .HasColumnName("last_year_to_prol_count")
                    .HasComment("К продлению за год в прошлом году");

                entity.Property(e => e.LastYearToProlInPeriodCount)
                    .HasColumnName("last_year_to_prol_in_period_count")
                    .HasComment("К продлению за период в прошлом году");

                entity.Property(e => e.LostInPeriodCount)
                    .HasColumnName("lost_in_period_count")
                    .HasComment("Отвал за период");

                entity.Property(e => e.Month)
                    .HasColumnName("month")
                    .HasComment("Месяц");

                entity.Property(e => e.PrevMonthIncCount)
                    .HasColumnName("prev_month_inc_count")
                    .HasComment("Прирост в прошлом месяце");

                entity.Property(e => e.PrevMonthLost)
                    .HasColumnName("prev_month_lost")
                    .HasComment("Отвал в прошлом месяце");

                entity.Property(e => e.PrevMonthToProl)
                    .HasColumnName("prev_month_to_prol")
                    .HasComment("К продлению в прошлом месяце");

                entity.Property(e => e.PrevQuarterActiveCount)
                    .HasColumnName("prev_quarter_active_count")
                    .HasComment("Кол. активных абонентов в прошлом квартале");

                entity.Property(e => e.PrevQuarterIncCount)
                    .HasColumnName("prev_quarter_inc_count")
                    .HasComment("Прирост в предыдущем квартале");

                entity.Property(e => e.PrevQuarterLost)
                    .HasColumnName("prev_quarter_lost")
                    .HasComment("Отвал за прошлый квартал");

                entity.Property(e => e.PrevQuarterToProl)
                    .HasColumnName("prev_quarter_to_prol")
                    .HasComment("К продлению в прошлом квартале");

                entity.Property(e => e.PrevYearActiveCount)
                    .HasColumnName("prev_year_active_count")
                    .HasComment("Кол. активных в прошлом году");

                entity.Property(e => e.PrevYearEndActiveCount)
                    .HasColumnName("prev_year_end_active_count")
                    .HasComment("Кол. активных абонентов на конец прошлого года");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.QuarterIncCount)
                    .HasColumnName("quarter_inc_count")
                    .HasComment("Прирост за текущий квартал");

                entity.Property(e => e.QuarterLost)
                    .HasColumnName("quarter_lost")
                    .HasComment("Отвал в текущем квартале");

                entity.Property(e => e.QuarterToProl)
                    .HasColumnName("quarter_to_prol")
                    .HasComment("К продлению в текущем квартале");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.ToProlInPeriodCount)
                    .HasColumnName("to_prol_in_period_count")
                    .HasComment("К продлению за период");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasComment("Год");

                entity.Property(e => e.YearLostCount)
                    .HasColumnName("year_lost_count")
                    .HasComment("Кол. непродлённых абонентов за год");

                entity.Property(e => e.YearToProlCount)
                    .HasColumnName("year_to_prol_count")
                    .HasComment("Кол. к продлению за год");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoReports)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_ro_report_agent_id");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RoReports)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_ro_report_product_type_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoReports)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_ro_report_step_id");
            });

            modelBuilder.Entity<RoReportQuery>(entity =>
            {
                entity.HasKey(e => e.ReportQueryId)
                    .HasName("pk_ro_report_query");

                entity.ToTable("ro_report_query");

                entity.HasComment("Таблица запросов для отчетов");

                entity.Property(e => e.ReportQueryId)
                    .HasColumnName("report_query_id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.Comment)
                    .HasMaxLength(300)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.SqlQuery)
                    .HasColumnName("sql_query")
                    .HasComment("SQL-запрос");
            });

            modelBuilder.Entity<RoRequest1c>(entity =>
            {
                entity.HasKey(e => e.ProductGuid)
                    .HasName("product_guid_key");

                entity.ToTable("ro_request_1c");

                entity.Property(e => e.ProductGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("product_guid");

                entity.Property(e => e.AbonentName)
                    .HasColumnType("character varying")
                    .HasColumnName("abonent_name");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.FileName)
                    .HasColumnType("character varying")
                    .HasColumnName("file_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoRequest1cs)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_ro_step");
            });

            modelBuilder.Entity<RoRequestRegionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_request_region_view");

                entity.Property(e => e.CompetencyCenterId).HasColumnName("competency_center_id");

                entity.Property(e => e.CompetencyCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("competency_center_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.NormalizedPartnerId).HasColumnName("normalized_partner_id");

                entity.Property(e => e.NormalizedPartnerName)
                    .HasColumnType("character varying")
                    .HasColumnName("normalized_partner_name");

                entity.Property(e => e.PartnerId).HasColumnName("partner_id");

                entity.Property(e => e.PartnerName)
                    .HasMaxLength(200)
                    .HasColumnName("partner_name");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<RoRequestWithoutPartnerView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_request_without_partner_view");

                entity.Property(e => e.CompetencyCenterId).HasColumnName("competency_center_id");

                entity.Property(e => e.CompetencyCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("competency_center_name");

                entity.Property(e => e.CreationTime).HasColumnName("creation_time");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.NormalizedPartnerId).HasColumnName("normalized_partner_id");

                entity.Property(e => e.NormalizedPartnerName)
                    .HasColumnType("character varying")
                    .HasColumnName("normalized_partner_name");

                entity.Property(e => e.PartnerId).HasColumnName("partner_id");

                entity.Property(e => e.PartnerName)
                    .HasMaxLength(200)
                    .HasColumnName("partner_name");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<RoRevocationReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId)
                    .HasName("pk_revocation_reason");

                entity.ToTable("ro_revocation_reason");

                entity.HasComment("Причина отзыва");

                entity.HasIndex(e => e.ReasonDescription, "sk_revocation_reason")
                    .IsUnique();

                entity.Property(e => e.ReasonId)
                    .ValueGeneratedNever()
                    .HasColumnName("reason_id")
                    .HasComment("Код");

                entity.Property(e => e.ReasonDescription)
                    .HasMaxLength(64)
                    .HasColumnName("reason_description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<RoRewardOption>(entity =>
            {
                entity.HasKey(e => new { e.SchemeId, e.AttributeId })
                    .HasName("pk_reward_option");

                entity.ToTable("ro_reward_option");

                entity.HasComment("Таблица вознаграждений за опции");

                entity.HasIndex(e => e.AttributeId, "reward_option_attribute_id_idx");

                entity.HasIndex(e => e.SchemeId, "reward_option_scheme_id_idx");

                entity.Property(e => e.SchemeId)
                    .HasColumnName("scheme_id")
                    .HasComment("Схема");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Атрибут");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("Процент вознаграждения");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.RoRewardOptions)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("fk_attribute");

                entity.HasOne(d => d.Scheme)
                    .WithMany(p => p.RoRewardOptions)
                    .HasForeignKey(d => d.SchemeId)
                    .HasConstraintName("fk_scheme");
            });

            modelBuilder.Entity<RoRole>(entity =>
            {
                entity.HasKey(e => e.RoleId)
                    .HasName("pk_role");

                entity.ToTable("ro_role");

                entity.HasComment("Таблица ролей пользователей");

                entity.HasIndex(e => e.RoleGroupId, "role_module_role_group_id_idx");

                entity.HasIndex(e => e.RoleName, "sk_role_name")
                    .IsUnique();

                entity.Property(e => e.RoleId)
                    .ValueGeneratedNever()
                    .HasColumnName("role_id")
                    .HasComment("Код");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.RoleGroupId)
                    .HasColumnName("role_group_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Группа");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(150)
                    .HasColumnName("role_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RolePublicName)
                    .HasMaxLength(150)
                    .HasColumnName("role_public_name")
                    .HasComment("Публичное наименование роли");

                entity.HasOne(d => d.RoleGroup)
                    .WithMany(p => p.RoRoles)
                    .HasForeignKey(d => d.RoleGroupId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_role_group");

                entity.HasMany(d => d.AvailableRoles)
                    .WithMany(p => p.Roles)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoRoleScheme",
                        l => l.HasOne<RoRole>().WithMany().HasForeignKey("AvailableRoleId").HasConstraintName("ro_role_scheme_fk1"),
                        r => r.HasOne<RoRole>().WithMany().HasForeignKey("RoleId").HasConstraintName("ro_role_scheme_fk"),
                        j =>
                        {
                            j.HasKey("RoleId", "AvailableRoleId").HasName("pk_role_scheme");

                            j.ToTable("ro_role_scheme").HasComment("Таблица управления списком ролей доступных для настройки через интерфейс регистратора");

                            j.IndexerProperty<int>("RoleId").HasColumnName("role_id").HasComment("Родительская роль");

                            j.IndexerProperty<int>("AvailableRoleId").HasColumnName("available_role_id").HasComment("Доступная роль");
                        });

                entity.HasMany(d => d.Roles)
                    .WithMany(p => p.AvailableRoles)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoRoleScheme",
                        l => l.HasOne<RoRole>().WithMany().HasForeignKey("RoleId").HasConstraintName("ro_role_scheme_fk"),
                        r => r.HasOne<RoRole>().WithMany().HasForeignKey("AvailableRoleId").HasConstraintName("ro_role_scheme_fk1"),
                        j =>
                        {
                            j.HasKey("RoleId", "AvailableRoleId").HasName("pk_role_scheme");

                            j.ToTable("ro_role_scheme").HasComment("Таблица управления списком ролей доступных для настройки через интерфейс регистратора");

                            j.IndexerProperty<int>("RoleId").HasColumnName("role_id").HasComment("Родительская роль");

                            j.IndexerProperty<int>("AvailableRoleId").HasColumnName("available_role_id").HasComment("Доступная роль");
                        });
            });

            modelBuilder.Entity<RoRoleGroup>(entity =>
            {
                entity.HasKey(e => e.RoleGroupId)
                    .HasName("pk_role_group");

                entity.ToTable("ro_role_group");

                entity.HasComment("Таблица групп ролей");

                entity.HasIndex(e => e.RoleGroupName, "sk_role_group_name")
                    .IsUnique();

                entity.Property(e => e.RoleGroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("role_group_id")
                    .HasComment("Код");

                entity.Property(e => e.RoleGroupName)
                    .HasMaxLength(200)
                    .HasColumnName("role_group_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoRoleModule>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.ModuleId })
                    .HasName("pk_role_module");

                entity.ToTable("ro_role_module");

                entity.HasComment("Таблица связи ролей с модулями");

                entity.HasIndex(e => e.AccessLevelId, "role_module_access_level_id_idx");

                entity.HasIndex(e => e.ModuleId, "role_module_module_id_idx");

                entity.HasIndex(e => e.RoleId, "role_module_role_id_idx");

                entity.Property(e => e.RoleId)
                    .HasColumnName("role_id")
                    .HasComment("Роль");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasComment("Модуль");

                entity.Property(e => e.AccessLevelId)
                    .HasColumnName("access_level_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Уровень доступа");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.AccessLevel)
                    .WithMany(p => p.RoRoleModules)
                    .HasForeignKey(d => d.AccessLevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_access_level");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.RoRoleModules)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("fk_module");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoRoleModules)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("fk_role");
            });

            modelBuilder.Entity<RoRoutePfr>(entity =>
            {
                entity.HasKey(e => e.PfrCode)
                    .HasName("pk_pfr_code");

                entity.ToTable("ro_route_pfr");

                entity.HasComment("Таблица роутинга ПФР");

                entity.HasIndex(e => e.FileMaskId, "route_pfr_file_mask_id_idx");

                entity.HasIndex(e => e.RoutePfr, "route_pfr_route_pfr_idx");

                entity.Property(e => e.PfrCode)
                    .HasMaxLength(11)
                    .HasColumnName("pfr_code")
                    .HasComment("Код");

                entity.Property(e => e.FileMaskId)
                    .HasColumnName("file_mask_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Маска файла");

                entity.Property(e => e.LayoutPfr)
                    .HasMaxLength(11)
                    .HasColumnName("layout_pfr")
                    .HasComment("Код макета");

                entity.Property(e => e.RoutePfr)
                    .HasMaxLength(11)
                    .HasColumnName("route_pfr")
                    .HasComment("Код роутинга");

                entity.HasOne(d => d.FileMask)
                    .WithMany(p => p.RoRoutePfrs)
                    .HasForeignKey(d => d.FileMaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_file_mask");

                entity.HasOne(d => d.RoutePfrNavigation)
                    .WithMany(p => p.InverseRoutePfrNavigation)
                    .HasForeignKey(d => d.RoutePfr)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_route_pfr");
            });

            modelBuilder.Entity<RoSalecenterRegionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_salecenter_region_view");

                entity.Property(e => e.AllCount).HasColumnName("all_count");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.SaleCenterId).HasColumnName("sale_center_id");
            });

            modelBuilder.Entity<RoSberbankDocument>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("pk_sberbank_document");

                entity.ToTable("ro_sberbank_document");

                entity.HasComment("Таблица подписанных документов для Сбербанка");

                entity.HasIndex(e => e.SignId, "sberbank_document_sign_id_idx");

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DocGuid)
                    .HasColumnName("doc_guid")
                    .HasComment("Идентификатор документа");

                entity.Property(e => e.Hash)
                    .HasColumnName("hash")
                    .HasComment("Хеш от данных");

                entity.Property(e => e.SignId)
                    .HasColumnName("sign_id")
                    .HasComment("Файл подписи");
            });

            modelBuilder.Entity<RoSendedBill>(entity =>
            {
                entity.HasKey(e => e.BillId)
                    .HasName("pk_bill_id");

                entity.ToTable("ro_sended_bill");

                entity.HasComment("Выставленные счета");

                entity.HasIndex(e => e.BillNumber, "idx_sended_bill_bill_number");

                entity.HasIndex(e => e.WalletGuid, "idx_wallet_guid");

                entity.HasIndex(e => e.AbonentId, "sended_bill_abonent_id_idx");

                entity.HasIndex(e => e.DocumentId, "sended_bill_document_id_idx");

                entity.HasIndex(e => e.InvoiceReturnTypeId, "sended_bill_invoice_return_type_id_idx");

                entity.Property(e => e.BillId)
                    .HasColumnName("bill_id")
                    .HasComment("Ид счета");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentFromId)
                    .HasColumnName("agent_from_id")
                    .HasComment("Агент который выставляет счет");

                entity.Property(e => e.AgentToId)
                    .HasColumnName("agent_to_id")
                    .HasComment("Агент которому выставляется счет");

                entity.Property(e => e.BillDate)
                    .HasPrecision(0)
                    .HasColumnName("bill_date")
                    .HasComment("Дата счета");

                entity.Property(e => e.BillGuid).HasColumnName("bill_guid");

                entity.Property(e => e.BillNdsSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_nds_sum")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Сумма НДС");

                entity.Property(e => e.BillNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("bill_number")
                    .HasComment("Номер счета");

                entity.Property(e => e.BillPayedSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_payed_sum");

                entity.Property(e => e.BillTotalSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_total_sum")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Полная сумма счета (включая НДС)");

                entity.Property(e => e.BlockTime)
                    .HasPrecision(0)
                    .HasColumnName("block_time")
                    .HasComment("Дата блокировки");

                entity.Property(e => e.CancelTime)
                    .HasPrecision(0)
                    .HasColumnName("cancel_time")
                    .HasComment("Дата аннулирования счета");

                entity.Property(e => e.CreationDate)
                    .HasPrecision(0)
                    .HasColumnName("creation_date")
                    .HasComment("Дата создания заявки на счет");

                entity.Property(e => e.DocumentId)
                    .HasColumnName("document_id")
                    .HasComment("Счет");

                entity.Property(e => e.InvoiceReturnTypeId).HasColumnName("invoice_return_type_id");

                entity.Property(e => e.IsSent).HasColumnName("is_sent");

                entity.Property(e => e.Notice)
                    .HasColumnType("character varying")
                    .HasColumnName("notice")
                    .HasComment("Комментарий");

                entity.Property(e => e.PaidFor)
                    .HasColumnName("paid_for")
                    .HasComment("Оплачено или нет");

                entity.Property(e => e.WalletGuid)
                    .HasColumnName("wallet_guid")
                    .HasComment("Ид. кошелька");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.RoSendedBills)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.AgentFrom)
                    .WithMany(p => p.RoSendedBillAgentFroms)
                    .HasForeignKey(d => d.AgentFromId)
                    .HasConstraintName("fk_agent_from");

                entity.HasOne(d => d.AgentTo)
                    .WithMany(p => p.RoSendedBillAgentTos)
                    .HasForeignKey(d => d.AgentToId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_agent_to");

                entity.HasOne(d => d.InvoiceReturnType)
                    .WithMany(p => p.RoSendedBills)
                    .HasForeignKey(d => d.InvoiceReturnTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_invoice_return_type");
            });

            modelBuilder.Entity<RoServer>(entity =>
            {
                entity.HasKey(e => e.ServerId)
                    .HasName("pk_server");

                entity.ToTable("ro_server");

                entity.HasComment("Таблица серверов");

                entity.HasIndex(e => e.AgentId, "server_agent_id_idx");

                entity.HasIndex(e => e.DomainIn, "sk_domain_in")
                    .IsUnique();

                entity.HasIndex(e => e.DomainOut, "sk_domain_out")
                    .IsUnique();

                entity.HasIndex(e => e.ServerName, "sk_server_name")
                    .IsUnique();

                entity.Property(e => e.ServerId)
                    .HasColumnName("server_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DomainIn)
                    .HasMaxLength(100)
                    .HasColumnName("domain_in")
                    .HasComment("Входящий домен");

                entity.Property(e => e.DomainOut)
                    .HasMaxLength(100)
                    .HasColumnName("domain_out")
                    .HasComment("Исходящий домен");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.PublicServer)
                    .HasColumnName("public_server")
                    .HasComment("Публичный");

                entity.Property(e => e.ServerName)
                    .HasMaxLength(100)
                    .HasColumnName("server_name")
                    .HasComment("Наименование");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoServers)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");
            });

            modelBuilder.Entity<RoService>(entity =>
            {
                entity.HasKey(e => e.ServiceId)
                    .HasName("pk_product_service");

                entity.ToTable("ro_service");

                entity.HasComment("Таблица услуг");

                entity.HasIndex(e => e.ProductId, "service_product_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "service_product_person_id_idx");

                entity.HasIndex(e => e.ServiceTypeId, "service_service_type_id_idx");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("service_id")
                    .HasComment("Идентификатор услуги");

                entity.Property(e => e.DateAdded)
                    .HasColumnName("date_added")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Ссылка на продукт");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Владелец ЭП");

                entity.Property(e => e.ServiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("service_number")
                    .HasComment("Номер услуги");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Ссылка на тип услуги");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoServices)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RoServices)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.RoServices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("fk_service_type");
            });

            modelBuilder.Entity<RoServiceBalanceDetail>(entity =>
            {
                entity.HasKey(e => e.ServiceBalanceDetailId)
                    .HasName("pk_service_balance_detail");

                entity.ToTable("ro_service_balance_detail");

                entity.HasComment("Дополнительные услуги в сверке между партнером и Центром продаж");

                entity.Property(e => e.ServiceBalanceDetailId)
                    .HasColumnName("service_balance_detail_id")
                    .HasComment("Идентификатор дополнительной услуги в сверке");

                entity.Property(e => e.BalanceDetailId)
                    .HasColumnName("balance_detail_id")
                    .HasComment("Позиция в сверке");

                entity.Property(e => e.ServiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("service_number")
                    .HasComment("Номер услуги");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Тип услуги");

                entity.HasOne(d => d.BalanceDetail)
                    .WithMany(p => p.RoServiceBalanceDetails)
                    .HasForeignKey(d => d.BalanceDetailId)
                    .HasConstraintName("fk_balance_detail");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.RoServiceBalanceDetails)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_service_type");
            });

            modelBuilder.Entity<RoServiceMode>(entity =>
            {
                entity.HasKey(e => e.ServiceModeId)
                    .HasName("pk_service_mode");

                entity.ToTable("ro_service_mode");

                entity.HasComment("Таблица с режимами услуг");

                entity.Property(e => e.ServiceModeId)
                    .ValueGeneratedNever()
                    .HasColumnName("service_mode_id")
                    .HasComment("Код");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание режима");

                entity.Property(e => e.Name)
                    .HasMaxLength(25)
                    .HasColumnName("name")
                    .HasComment("Название");
            });

            modelBuilder.Entity<RoServiceType>(entity =>
            {
                entity.HasKey(e => e.ServiceTypeId)
                    .HasName("pk_service_type");

                entity.ToTable("ro_service_type");

                entity.HasComment("Таблица типов услуг.");

                entity.HasIndex(e => e.ServiceModeId, "service_type_service_mode_id_idx");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Идентификатор типа услуги");

                entity.Property(e => e.ServiceModeId)
                    .HasColumnName("service_mode_id")
                    .HasComment("Режим");

                entity.Property(e => e.ServiceTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("service_type_name")
                    .HasComment("Наименование типа услуги");

                entity.HasOne(d => d.ServiceMode)
                    .WithMany(p => p.RoServiceTypes)
                    .HasForeignKey(d => d.ServiceModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_agent");
            });

            modelBuilder.Entity<RoSetting>(entity =>
            {
                entity.HasKey(e => e.SettingId)
                    .HasName("pk_setting");

                entity.ToTable("ro_setting");

                entity.HasComment("Таблица настроек");

                entity.HasIndex(e => e.ValueTypeId, "setting_value_type_id_idx");

                entity.Property(e => e.SettingId)
                    .ValueGeneratedNever()
                    .HasColumnName("setting_id")
                    .HasComment("Код");

                entity.Property(e => e.SettingName)
                    .HasMaxLength(100)
                    .HasColumnName("setting_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ValueTypeId)
                    .HasColumnName("value_type_id")
                    .HasComment("Тип значения");

                entity.HasOne(d => d.ValueType)
                    .WithMany(p => p.RoSettings)
                    .HasForeignKey(d => d.ValueTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_value_type");
            });

            modelBuilder.Entity<RoSignQualification>(entity =>
            {
                entity.HasKey(e => e.SignQualificationId)
                    .HasName("pk_sign_qualification");

                entity.ToTable("ro_sign_qualification");

                entity.HasComment("Таблица квалификаций подписи");

                entity.HasIndex(e => e.SignQualificationName, "sk_sign_qualification_name")
                    .IsUnique();

                entity.Property(e => e.SignQualificationId)
                    .ValueGeneratedNever()
                    .HasColumnName("sign_qualification_id")
                    .HasComment("Код");

                entity.Property(e => e.SignQualificationName)
                    .HasMaxLength(100)
                    .HasColumnName("sign_qualification_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoSkziLicense>(entity =>
            {
                entity.HasKey(e => e.LicenseId)
                    .HasName("pk_skzi_license");

                entity.ToTable("ro_skzi_license");

                entity.HasIndex(e => e.LicenseNumber, "ro_skzi_license_license_number");

                entity.HasIndex(e => e.AgentId, "skzi_license_agent_id_idx");

                entity.HasIndex(e => e.BillId, "skzi_license_bill_id_idx");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.LicenseBlankId).HasColumnName("license_blank_id");

                entity.Property(e => e.LicenseNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("license_number");

                entity.Property(e => e.MerchandiseBillId).HasColumnName("merchandise_bill_id");

                entity.Property(e => e.MerchandiseId).HasColumnName("merchandise_id");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoSkziLicenses)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.RoSkziLicenses)
                    .HasForeignKey(d => d.BillId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_bill");

                entity.HasOne(d => d.LicenseBlank)
                    .WithMany(p => p.RoSkziLicenses)
                    .HasForeignKey(d => d.LicenseBlankId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_skzi_license_license_blank_id_fkey");

                entity.HasOne(d => d.MerchandiseBill)
                    .WithMany(p => p.RoSkziLicenses)
                    .HasForeignKey(d => d.MerchandiseBillId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_skzi_license_fk_merchandise_bill");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.RoSkziLicenses)
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_skzi_license_fk");
            });

            modelBuilder.Entity<RoSmevRequestStage>(entity =>
            {
                entity.HasKey(e => e.RequestStageId)
                    .HasName("pk_smev_request");

                entity.ToTable("ro_smev_request_stage");

                entity.HasComment("Таблица стадий запроса к СМЭВ");

                entity.HasIndex(e => e.StageTime, "ro_smev_request_stage_file_id");

                entity.HasIndex(e => e.OriginalRequestId, "ro_smev_request_stage_original_request_id");

                entity.HasIndex(e => e.StageTypeId, "ro_smev_request_stage_stage_type_id");

                entity.Property(e => e.RequestStageId)
                    .HasColumnName("request_stage_id")
                    .HasComment("Идентификатор стадии");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("XML запроса/ответ в СМЭВ");

                entity.Property(e => e.OriginalRequestId)
                    .HasColumnName("original_request_id")
                    .HasComment("Идентификатор первоначального запроса в СМЭВ");

                entity.Property(e => e.StageTime)
                    .HasPrecision(3)
                    .HasColumnName("stage_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время запроса/ответ в СМЭВ");

                entity.Property(e => e.StageTypeId).HasColumnName("stage_type_id");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.RoSmevRequestStages)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_stage_file");

                entity.HasOne(d => d.StageType)
                    .WithMany(p => p.RoSmevRequestStages)
                    .HasForeignKey(d => d.StageTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_stage_type");
            });

            modelBuilder.Entity<RoSmevStageType>(entity =>
            {
                entity.HasKey(e => e.StageTypeId)
                    .HasName("pk_smev_stage_type");

                entity.ToTable("ro_smev_stage_type");

                entity.HasComment("Таблица типов стадий взаимодействия со СМЭВ");

                entity.Property(e => e.StageTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("stage_type_id")
                    .HasComment("Идентификатор типа");

                entity.Property(e => e.StageName)
                    .HasMaxLength(50)
                    .HasColumnName("stage_name")
                    .HasComment("Название стадии");
            });

            modelBuilder.Entity<RoSo>(entity =>
            {
                entity.HasKey(e => e.SosId)
                    .HasName("pk_sos");

                entity.ToTable("ro_sos");

                entity.HasComment("Таблица спецоператоров");

                entity.HasIndex(e => e.PrefixSos, "prefix_sos");

                entity.HasIndex(e => e.AgentId, "sos_agent_id_idx");

                entity.HasIndex(e => e.CertificateId, "sos_certificate_id_idx");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.LoginSos)
                    .HasMaxLength(50)
                    .HasColumnName("login_sos")
                    .HasComment("Логин");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OperatorName)
                    .HasColumnType("character varying")
                    .HasColumnName("operator_name")
                    .HasComment("Наименование оператора ЭДО");

                entity.Property(e => e.PrefixSos)
                    .HasMaxLength(3)
                    .HasColumnName("prefix_sos")
                    .HasComment("Префикс");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Учетная запись");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(4)
                    .HasColumnName("recipient_code")
                    .HasComment("Код получателя ФНС");

                entity.Property(e => e.SystemName)
                    .HasMaxLength(20)
                    .HasColumnName("system_name")
                    .HasComment("Системное имя");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoSos)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoSos)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoSos)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<RoSocrbase>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_socrbase");

                entity.HasComment("Таблица сокращений типов объектов адреса");

                entity.Property(e => e.KodTSt)
                    .HasColumnName("kod_t_st")
                    .HasComment("Код");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasComment("Уровень");

                entity.Property(e => e.Scname)
                    .HasMaxLength(10)
                    .HasColumnName("scname")
                    .HasComment("Сокращение");

                entity.Property(e => e.Socrname)
                    .HasMaxLength(29)
                    .HasColumnName("socrname")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoSosCertificate>(entity =>
            {
                entity.HasKey(e => new { e.SosId, e.CertificateId })
                    .HasName("pk_sos_certificate");

                entity.ToTable("ro_sos_certificate");

                entity.HasComment("Таблица сертификатов СОС");

                entity.HasIndex(e => e.CertificateId, "sos_certificate_certificate_id_idx");

                entity.HasIndex(e => e.SosId, "sos_certificate_sos_id_idx");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("СОС");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RoSosCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.RoSosCertificates)
                    .HasForeignKey(d => d.SosId)
                    .HasConstraintName("fk_sos");
            });

            modelBuilder.Entity<RoSoun>(entity =>
            {
                entity.HasKey(e => e.TaxCode)
                    .HasName("pk_tax_code");

                entity.ToTable("ro_soun");

                entity.HasComment("Таблица СОУН");

                entity.HasIndex(e => e.ParentTax, "soun_parent_tax_idx");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(4)
                    .HasColumnName("tax_code")
                    .IsFixedLength()
                    .HasComment("Код инспекции");

                entity.Property(e => e.ParentTax)
                    .HasMaxLength(4)
                    .HasColumnName("parent_tax")
                    .HasDefaultValueSql("NULL::bpchar")
                    .IsFixedLength()
                    .HasComment("Код предыдущей инспекции");

                entity.Property(e => e.TaxName)
                    .HasMaxLength(150)
                    .HasColumnName("tax_name")
                    .HasComment("Наименование инспекции");

                entity.HasOne(d => d.ParentTaxNavigation)
                    .WithMany(p => p.InverseParentTaxNavigation)
                    .HasForeignKey(d => d.ParentTax)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_parent_tax");
            });

            modelBuilder.Entity<RoStatisticProvider>(entity =>
            {
                entity.HasKey(e => e.StatisticProviderId)
                    .HasName("pk_statistic_provider");

                entity.ToTable("ro_statistic_provider");

                entity.HasComment("Таблица статистики поставщиков");

                entity.HasIndex(e => e.AbonentId, "sk_abonent_id")
                    .IsUnique();

                entity.HasIndex(e => new { e.Inn, e.Kpp }, "sk_statistic_provider_inn_kpp")
                    .IsUnique();

                entity.HasIndex(e => e.AbonentId, "statistic_provider_abonent_id_idx");

                entity.HasIndex(e => e.Inn, "statistic_provider_inn");

                entity.Property(e => e.StatisticProviderId)
                    .HasColumnName("statistic_provider_id")
                    .HasComment("Идентификатор поставщика");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(100)
                    .HasColumnName("contact_person")
                    .HasComment("Контактное лицо");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл. почта");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.MaxSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("max_sum")
                    .HasComment("Максимальная сумма");

                entity.Property(e => e.Name)
                    .HasMaxLength(400)
                    .HasColumnName("name")
                    .HasComment("Наименование победителя");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.SumCountAuctions)
                    .HasColumnName("sum_count_auctions")
                    .HasComment("Сумма по столбцу Количество аукционов");

                entity.Property(e => e.SumCountContract)
                    .HasColumnName("sum_count_contract")
                    .HasComment("Сумма по столбцу Количество контрактов");

                entity.Property(e => e.SumCountWin)
                    .HasColumnName("sum_count_win")
                    .HasComment("Сумма по столбцу Количество побед");

                entity.HasOne(d => d.Abonent)
                    .WithOne(p => p.RoStatisticProvider)
                    .HasForeignKey<RoStatisticProvider>(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_abonent");
            });

            modelBuilder.Entity<RoStep>(entity =>
            {
                entity.HasKey(e => e.StepId)
                    .HasName("pk_step");

                entity.ToTable("ro_step");

                entity.HasComment("Таблица состояний");

                entity.HasIndex(e => e.StepGuid, "sk_step_guid")
                    .IsUnique();

                entity.HasIndex(e => e.StepName, "sk_step_name")
                    .IsUnique();

                entity.HasIndex(e => e.NextStepId, "step_next_step_idx");

                entity.Property(e => e.StepId)
                    .ValueGeneratedNever()
                    .HasColumnName("step_id")
                    .HasComment("Код");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");

                entity.Property(e => e.NextStepId)
                    .HasColumnName("next_step_id")
                    .HasComment("Следущее состояние");

                entity.Property(e => e.StepGuid)
                    .HasColumnName("step_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.StepName)
                    .HasMaxLength(40)
                    .HasColumnName("step_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.NextStep)
                    .WithMany(p => p.InverseNextStep)
                    .HasForeignKey(d => d.NextStepId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_next_step");
            });

            modelBuilder.Entity<RoStepReason>(entity =>
            {
                entity.HasKey(e => e.StepReasonId)
                    .HasName("pk_step_reason");

                entity.ToTable("ro_step_reason");

                entity.HasComment("Причины статусов");

                entity.HasIndex(e => e.StepReasonName, "sk_step_reason")
                    .IsUnique();

                entity.Property(e => e.StepReasonId)
                    .HasColumnName("step_reason_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.StepReasonName)
                    .HasColumnType("character varying")
                    .HasColumnName("step_reason_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoStorageType>(entity =>
            {
                entity.HasKey(e => e.StorageTypeId)
                    .HasName("pk_storage_type");

                entity.ToTable("ro_storage_type");

                entity.HasComment("Таблица типов хранилищ");

                entity.HasIndex(e => e.StorageTypeName, "sk_storage_type_name")
                    .IsUnique();

                entity.Property(e => e.StorageTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("storage_type_id")
                    .HasComment("Код");

                entity.Property(e => e.StorageTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("storage_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoStreet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_street");

                entity.HasComment("Таблица улиц (5 уровень)");

                entity.HasIndex(e => e.Code, "ro_street_code");

                entity.Property(e => e.Code)
                    .HasMaxLength(17)
                    .HasColumnName("code")
                    .IsFixedLength();

                entity.Property(e => e.Gninmb)
                    .HasMaxLength(4)
                    .HasColumnName("gninmb")
                    .IsFixedLength()
                    .HasComment("Код ИФНС");

                entity.Property(e => e.Index)
                    .HasMaxLength(6)
                    .HasColumnName("index")
                    .IsFixedLength()
                    .HasComment("Индекс");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .HasColumnName("name")
                    .HasComment("Наименование");

                entity.Property(e => e.Ocatd)
                    .HasMaxLength(11)
                    .HasColumnName("ocatd")
                    .IsFixedLength()
                    .HasComment("ОКАТО");

                entity.Property(e => e.Socr)
                    .HasMaxLength(10)
                    .HasColumnName("socr")
                    .HasComment("Сокращение");

                entity.Property(e => e.Uno)
                    .HasMaxLength(4)
                    .HasColumnName("uno")
                    .IsFixedLength()
                    .HasComment("Код тер. уч. ИФНС");
            });

            modelBuilder.Entity<RoSubjectType>(entity =>
            {
                entity.HasKey(e => e.SubjectTypeId)
                    .HasName("pk_subject_type");

                entity.ToTable("ro_subject_type");

                entity.HasComment("Таблица типов субъектов документооборота");

                entity.HasIndex(e => new { e.SubjectTypeName, e.WorkflowTypeId }, "sk_subject_type_name")
                    .IsUnique();

                entity.HasIndex(e => e.WorkflowTypeId, "subject_type_workflow_type_id_idx");

                entity.Property(e => e.SubjectTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("subject_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.SubjectTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("subject_type_name")
                    .HasComment("Наименование");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип документооборота");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.RoSubjectTypes)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<RoSubscriptionRegionCount1cFull>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_subscription_region_count_1c_full");

                entity.Property(e => e.Count1c).HasColumnName("count_1c");

                entity.Property(e => e.RegionCode)
                    .HasColumnType("character varying")
                    .HasColumnName("region_code");
            });

            modelBuilder.Entity<RoSubscriptionRegionCount1cWeek>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_subscription_region_count_1c_week");

                entity.Property(e => e.Count1c).HasColumnName("count_1c");

                entity.Property(e => e.RegionCode)
                    .HasColumnType("character varying")
                    .HasColumnName("region_code");
            });

            modelBuilder.Entity<RoSubscriptionRegionCountIt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_subscription_region_count_its");

                entity.Property(e => e.ItsCount).HasColumnName("its_count");

                entity.Property(e => e.RegionCode).HasColumnName("region_code");
            });

            modelBuilder.Entity<RoTag>(entity =>
            {
                entity.HasKey(e => e.TagId)
                    .HasName("pk_tag");

                entity.ToTable("ro_tag");

                entity.HasComment("Таблица тегов");

                entity.HasIndex(e => e.TagName, "sk_tag_name")
                    .IsUnique();

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.TagGroupId)
                    .HasColumnName("tag_group_id")
                    .HasComment("Группа");

                entity.Property(e => e.TagName)
                    .HasMaxLength(50)
                    .HasColumnName("tag_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.TagGroup)
                    .WithMany(p => p.RoTags)
                    .HasForeignKey(d => d.TagGroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_tag_tag_group_id");
            });

            modelBuilder.Entity<RoTagGroup>(entity =>
            {
                entity.HasKey(e => e.TagGroupId)
                    .HasName("ro_tag_group_pkey");

                entity.ToTable("ro_tag_group");

                entity.Property(e => e.TagGroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("tag_group_id")
                    .HasComment("Ид. группа");

                entity.Property(e => e.TagGroupName)
                    .HasMaxLength(50)
                    .HasColumnName("tag_group_name")
                    .HasComment("Наименование группы");
            });

            modelBuilder.Entity<RoTariff>(entity =>
            {
                entity.HasKey(e => e.TariffId)
                    .HasName("pk_tariff");

                entity.ToTable("ro_tariff");

                entity.HasComment("Таблица тарифов");

                entity.HasIndex(e => new { e.TariffName, e.TariffTypeId, e.TariffGroupId }, "sk_tariff")
                    .IsUnique();

                entity.HasIndex(e => e.TariffGuid, "sk_tariff_guid")
                    .IsUnique();

                entity.HasIndex(e => e.TariffGroupId, "tariff_tariff_group_id_idx");

                entity.HasIndex(e => e.TariffTypeId, "tariff_tariff_type_id_idx");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Article)
                    .HasMaxLength(40)
                    .HasColumnName("article")
                    .HasComment("Артикул");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.StartDate).HasColumnName("start_date");

                entity.Property(e => e.TariffGroupId)
                    .HasColumnName("tariff_group_id")
                    .HasComment("Группа");

                entity.Property(e => e.TariffGuid)
                    .HasColumnName("tariff_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.TariffName)
                    .HasMaxLength(200)
                    .HasColumnName("tariff_name")
                    .HasComment("Наименование");

                entity.Property(e => e.TariffTypeId)
                    .HasColumnName("tariff_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.TariffGroup)
                    .WithMany(p => p.RoTariffs)
                    .HasForeignKey(d => d.TariffGroupId)
                    .HasConstraintName("fk_tariff_group");

                entity.HasOne(d => d.TariffType)
                    .WithMany(p => p.RoTariffs)
                    .HasForeignKey(d => d.TariffTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tariff_type");
            });

            modelBuilder.Entity<RoTariffAttribute>(entity =>
            {
                entity.HasKey(e => e.TariffAttributeId)
                    .HasName("pk_tariff_attribute_id");

                entity.ToTable("ro_tariff_attribute");

                entity.HasComment("Таблица атрибутов тарифов");

                entity.HasIndex(e => e.AttributeId, "tariff_attribute_attribute_id_idx");

                entity.HasIndex(e => e.TariffId, "tariff_attribute_tariff_id_idx");

                entity.HasIndex(e => e.ValidityUnitId, "tariff_attribute_validity_unit_id_idx");

                entity.Property(e => e.TariffAttributeId).HasColumnName("tariff_attribute_id");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Атрибут");

                entity.Property(e => e.IndexNumber)
                    .HasColumnName("index_number")
                    .HasComment("Порядковый номер");

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("Ограничение");

                entity.Property(e => e.MaxIndex)
                    .HasColumnName("max_index")
                    .HasComment("Максимальный порядковый номер");

                entity.Property(e => e.MaxNumber)
                    .HasColumnName("max_number")
                    .HasComment("Максимальное количество");

                entity.Property(e => e.MinIndex)
                    .HasColumnName("min_index")
                    .HasComment("Минимальный порядковый номер");

                entity.Property(e => e.MinNumber)
                    .HasColumnName("min_number")
                    .HasComment("Минимальное количество");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasComment("Количество");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.Property(e => e.Validity)
                    .HasColumnName("validity")
                    .HasComment("Срок действия");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Ед. времени срока");

                entity.Property(e => e.WaitingDays)
                    .HasColumnName("waiting_days")
                    .HasComment("Дни ожидания");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.RoTariffAttributes)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("fk_attribute");

                entity.HasOne(d => d.Limit)
                    .WithMany(p => p.RoTariffAttributes)
                    .HasForeignKey(d => d.LimitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_limit");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoTariffAttributes)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.RoTariffAttributes)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_validity_unit");
            });

            modelBuilder.Entity<RoTariffAttributeCa>(entity =>
            {
                entity.HasKey(e => e.TariffAttributeCaId)
                    .HasName("pk_tariff_attribute_ca_template");

                entity.ToTable("ro_tariff_attribute_ca");

                entity.HasComment("Таблица УЦ атрибутов шаблонов тарифа");

                entity.HasIndex(e => new { e.TariffAttributeId, e.CaId, e.CaTemplateId }, "tariff_attribute_ca_ca_template_idx")
                    .IsUnique();

                entity.HasIndex(e => e.CaTemplateId, "tariff_attribute_ca_template_idx");

                entity.Property(e => e.TariffAttributeCaId)
                    .HasColumnName("tariff_attribute_ca_id")
                    .HasDefaultValueSql("nextval('ro_tariff_attribute_ca_id_seq'::regclass)")
                    .HasComment("ИД УЦ атрибута шаблона тарифа");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("ИД УЦ");

                entity.Property(e => e.CaTemplateId)
                    .HasColumnName("ca_template_id")
                    .HasComment("ИД шаблона для УЦ");

                entity.Property(e => e.IsDefault)
                    .HasColumnName("is_default")
                    .HasComment("УЦ используется по умолчанию");

                entity.Property(e => e.TariffAttributeId)
                    .HasColumnName("tariff_attribute_id")
                    .HasComment("ИД атрибута тарифа");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RoTariffAttributeCas)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca_id");

                entity.HasOne(d => d.CaTemplate)
                    .WithMany(p => p.RoTariffAttributeCas)
                    .HasForeignKey(d => d.CaTemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ca_template");

                entity.HasOne(d => d.TariffAttribute)
                    .WithMany(p => p.RoTariffAttributeCas)
                    .HasForeignKey(d => d.TariffAttributeId)
                    .HasConstraintName("fk_tariff_attribute_id");
            });

            modelBuilder.Entity<RoTariffAttributeLimit>(entity =>
            {
                entity.HasKey(e => new { e.TariffAttributeId, e.LimitId })
                    .HasName("pk_tariff_attribute_limit");

                entity.ToTable("ro_tariff_attribute_limit");

                entity.HasComment("Таблица ограничений для атрибутов тарифов");

                entity.Property(e => e.TariffAttributeId)
                    .HasColumnName("tariff_attribute_id")
                    .HasComment("ИД атрибута тарифа");

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("ИД ограничения");

                entity.Property(e => e.LimitValue)
                    .HasMaxLength(255)
                    .HasColumnName("limit_value")
                    .HasComment("Значение ограничения");

                entity.HasOne(d => d.Limit)
                    .WithMany(p => p.RoTariffAttributeLimits)
                    .HasForeignKey(d => d.LimitId)
                    .HasConstraintName("fk_limit_id");

                entity.HasOne(d => d.TariffAttribute)
                    .WithMany(p => p.RoTariffAttributeLimits)
                    .HasForeignKey(d => d.TariffAttributeId)
                    .HasConstraintName("fk_tariff_attribute_id");
            });

            modelBuilder.Entity<RoTariffCalcCompany>(entity =>
            {
                entity.HasKey(e => e.CompanyId)
                    .HasName("ro_tariff_calc_companies_pkey");

                entity.ToTable("ro_tariff_calc_companies");

                entity.HasComment("Таблица список компаний для тарифного калькулятора.");

                entity.HasIndex(e => e.Name, "ro_tariff_calc_companies_name_key")
                    .IsUnique();

                entity.Property(e => e.CompanyId)
                    .ValueGeneratedNever()
                    .HasColumnName("company_id")
                    .HasComment("Id компании.");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Имя компании.");
            });

            modelBuilder.Entity<RoTariffCalcComplexPrice>(entity =>
            {
                entity.HasKey(e => new { e.PriceId, e.Desk, e.Price })
                    .HasName("ro_tariff_calc_complex_prices_pkey");

                entity.ToTable("ro_tariff_calc_complex_prices");

                entity.HasComment("Цены тарифов и доп. возможностей в сложном формате.");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Id цены которой принаджлежат условия");

                entity.Property(e => e.Desk)
                    .HasMaxLength(100)
                    .HasColumnName("desk")
                    .HasComment("Описание части сложной цены");

                entity.Property(e => e.Price)
                    .HasPrecision(18)
                    .HasColumnName("price")
                    .HasComment("Цена части сложной цены");

                entity.HasOne(d => d.PriceNavigation)
                    .WithMany(p => p.RoTariffCalcComplexPrices)
                    .HasForeignKey(d => d.PriceId)
                    .HasConstraintName("ro_tariff_calc_complex_prices_price_id_fkey");
            });

            modelBuilder.Entity<RoTariffCalcFeaturesList>(entity =>
            {
                entity.HasKey(e => e.FeatureId)
                    .HasName("ro_tariff_calc_features_list_pkey");

                entity.ToTable("ro_tariff_calc_features_list");

                entity.HasComment("Список возможностей");

                entity.HasIndex(e => e.Name, "ro_tariff_calc_features_list_name_key")
                    .IsUnique();

                entity.Property(e => e.FeatureId)
                    .HasColumnName("feature_id")
                    .HasComment("Id возможности");

                entity.Property(e => e.IsMain)
                    .HasColumnName("is_main")
                    .HasComment("Флаг основная возможность");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasColumnName("name")
                    .HasComment("Описание возможности");

                entity.HasMany(d => d.Tariffs)
                    .WithMany(p => p.Features)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoTariffCalcFeature",
                        l => l.HasOne<RoTariffCalcTariff>().WithMany().HasForeignKey("TariffId").HasConstraintName("ro_tariff_calc_features_tariff_id_fkey"),
                        r => r.HasOne<RoTariffCalcFeaturesList>().WithMany().HasForeignKey("FeatureId").HasConstraintName("ro_tariff_calc_features_feature_id_fkey"),
                        j =>
                        {
                            j.HasKey("FeatureId", "TariffId").HasName("ro_tariff_calc_features_pkey");

                            j.ToTable("ro_tariff_calc_features").HasComment("Возможности тарифов");

                            j.IndexerProperty<int>("FeatureId").HasColumnName("feature_id").HasComment("Id возможности");

                            j.IndexerProperty<int>("TariffId").HasColumnName("tariff_id").HasComment("Id тарифа");
                        });
            });

            modelBuilder.Entity<RoTariffCalcOrgNalType>(entity =>
            {
                entity.HasKey(e => e.OrgnalId)
                    .HasName("ro_tariff_calc_org_nal_type_pkey");

                entity.ToTable("ro_tariff_calc_org_nal_type");

                entity.HasComment("Таблица список типов налогоорганизаций для тарифного калькулятора");

                entity.Property(e => e.OrgnalId)
                    .ValueGeneratedNever()
                    .HasColumnName("orgnal_id")
                    .HasComment("Id типов налогоорганизаций.");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Описание типов налогоорганизаций");
            });

            modelBuilder.Entity<RoTariffCalcPrice>(entity =>
            {
                entity.HasKey(e => e.PriceId)
                    .HasName("ro_tariff_calc_prices_pkey");

                entity.ToTable("ro_tariff_calc_prices");

                entity.HasComment("Цены тарифов");

                entity.HasIndex(e => new { e.PriceTypeId, e.TariffId, e.FeatureId, e.RegionId, e.OrgNalId, e.Price }, "ro_tariff_calc_prices_price_type_id_tariff_id_feature_id_re_key")
                    .IsUnique();

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Id цены");

                entity.Property(e => e.FeatureId)
                    .HasColumnName("feature_id")
                    .HasComment("Id возможности если цена для возможности ");

                entity.Property(e => e.OrgNalId)
                    .HasColumnName("org_nal_id")
                    .HasComment("Доступ или тип налогоорганизации для которой доступен тариф");

                entity.Property(e => e.Price)
                    .HasPrecision(18)
                    .HasColumnName("price")
                    .HasComment("Цена в нормальном формате");

                entity.Property(e => e.PriceTypeId)
                    .HasColumnName("price_type_id")
                    .HasComment("Тип цены например для тарифа или для расширения");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("id региона");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Id тарифа если цена для тарифа");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.RoTariffCalcPrices)
                    .HasForeignKey(d => d.FeatureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_tariff_calc_prices_feature_id_fkey");

                entity.HasOne(d => d.OrgNal)
                    .WithMany(p => p.RoTariffCalcPrices)
                    .HasForeignKey(d => d.OrgNalId)
                    .HasConstraintName("ro_tariff_calc_prices_org_nal_id_fkey");

                entity.HasOne(d => d.PriceType)
                    .WithMany(p => p.RoTariffCalcPrices)
                    .HasForeignKey(d => d.PriceTypeId)
                    .HasConstraintName("ro_tariff_calc_prices_price_type_id_fkey");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RoTariffCalcPrices)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("ro_tariff_calc_prices_region_id_fkey");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoTariffCalcPrices)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_tariff_calc_prices_tariff_id_fkey");
            });

            modelBuilder.Entity<RoTariffCalcPriceType>(entity =>
            {
                entity.HasKey(e => e.PriceTypeId)
                    .HasName("ro_tariff_calc_price_types_pkey");

                entity.ToTable("ro_tariff_calc_price_types");

                entity.HasComment("Типы цен");

                entity.Property(e => e.PriceTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("price_type_id")
                    .HasComment("Id типа цены");

                entity.Property(e => e.PriceDesk)
                    .HasMaxLength(50)
                    .HasColumnName("price_desk")
                    .HasComment("Описание типа цены");
            });

            modelBuilder.Entity<RoTariffCalcTariff>(entity =>
            {
                entity.HasKey(e => e.TariffId)
                    .HasName("ro_tariff_calc_tariffs_pkey");

                entity.ToTable("ro_tariff_calc_tariffs");

                entity.HasComment("Таблица список тарифов для тарифного калькулятора.");

                entity.HasIndex(e => new { e.Name, e.Company }, "ro_tariff_calc_tariffs_name_company_key")
                    .IsUnique();

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Id тарифа");

                entity.Property(e => e.Company)
                    .HasColumnName("company")
                    .HasComment("Id компании");

                entity.Property(e => e.Directions)
                    .HasMaxLength(100)
                    .HasColumnName("directions")
                    .HasComment("Доступные для тарифа направления.");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name")
                    .HasComment("Имя тарифа");

                entity.HasOne(d => d.CompanyNavigation)
                    .WithMany(p => p.RoTariffCalcTariffs)
                    .HasForeignKey(d => d.Company)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_tariff_calc_tariffs_company_fkey");

                entity.HasMany(d => d.OrgNals)
                    .WithMany(p => p.Tariffs)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoTariffCalcTariffOrgNal",
                        l => l.HasOne<RoTariffCalcOrgNalType>().WithMany().HasForeignKey("OrgNalId").HasConstraintName("ro_tariff_calc_tariff_org_nal_org_nal_id_fkey"),
                        r => r.HasOne<RoTariffCalcTariff>().WithMany().HasForeignKey("TariffId").HasConstraintName("ro_tariff_calc_tariff_org_nal_tariff_id_fkey"),
                        j =>
                        {
                            j.HasKey("TariffId", "OrgNalId").HasName("ro_tariff_calc_tariff_org_nal_pkey");

                            j.ToTable("ro_tariff_calc_tariff_org_nal").HasComment("Доступы тарифа по типам организации и налогооблажения.");

                            j.IndexerProperty<int>("TariffId").HasColumnName("tariff_id").HasComment("ID тарифа из ro_tariff_calc_tariffs");

                            j.IndexerProperty<int>("OrgNalId").HasColumnName("org_nal_id").HasComment("Id типа налогорганизаций из ro_tariff_calc_org_nal_type");
                        });

                entity.HasMany(d => d.Regions)
                    .WithMany(p => p.Tariffs)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoTariffCalcTariffRegion",
                        l => l.HasOne<RoRegion>().WithMany().HasForeignKey("RegionId").HasConstraintName("ro_tariff_calc_tariff_region_region_id_fkey"),
                        r => r.HasOne<RoTariffCalcTariff>().WithMany().HasForeignKey("TariffId").HasConstraintName("ro_tariff_calc_tariff_region_tariff_id_fkey"),
                        j =>
                        {
                            j.HasKey("TariffId", "RegionId").HasName("ro_tariff_calc_tariff_region_pkey");

                            j.ToTable("ro_tariff_calc_tariff_region").HasComment("Тарифы по регионам.");

                            j.IndexerProperty<int>("TariffId").HasColumnName("tariff_id").HasComment("ID тарифа из ro_tariff_calc_tariffs");

                            j.IndexerProperty<int>("RegionId").HasColumnName("region_id").HasComment("Id региона из public.ro_region");
                        });
            });

            modelBuilder.Entity<RoTariffDiscount>(entity =>
            {
                entity.HasKey(e => e.TariffDiscountId)
                    .HasName("pk_tariff_discount");

                entity.ToTable("ro_tariff_discount");

                entity.HasComment("Таблица скидок для тарифа в прайсе");

                entity.HasIndex(e => new { e.SectionId, e.TariffId, e.DiscountId }, "sk_tariff_discount")
                    .IsUnique();

                entity.HasIndex(e => e.DiscountId, "tariff_discount_discount_id_idx");

                entity.HasIndex(e => e.SectionId, "tariff_discount_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "tariff_discount_section_id_tariff_id_idx");

                entity.HasIndex(e => e.TariffId, "tariff_discount_tariff_id_idx");

                entity.Property(e => e.TariffDiscountId)
                    .HasColumnName("tariff_discount_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.Property(e => e.UseLimit)
                    .HasColumnName("use_limit")
                    .HasComment("Максимальное количество использований");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.RoTariffDiscounts)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.RoTariffDiscounts)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoTariffDiscounts)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.RoPriceTariff)
                    .WithMany(p => p.RoTariffDiscounts)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<RoTariffDiscountRule>(entity =>
            {
                entity.HasKey(e => e.RuleId)
                    .HasName("pk_tariff_discount_rule");

                entity.ToTable("ro_tariff_discount_rule");

                entity.HasComment("Таблица зависимости скидки от наличия определенного тарифа");

                entity.HasIndex(e => e.SectionId, "tariff_discount_rule_section_id_idx");

                entity.HasIndex(e => e.TariffDiscountId, "tariff_discount_rule_tariff_discount_id_idx");

                entity.HasIndex(e => e.TariffId, "tariff_discount_rule_tariff_id_idx");

                entity.Property(e => e.RuleId)
                    .HasColumnName("rule_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция");

                entity.Property(e => e.TariffDiscountId)
                    .HasColumnName("tariff_discount_id")
                    .HasComment("Cкидка для тарифа в прайсе");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.RoTariffDiscountRules)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.TariffDiscount)
                    .WithMany(p => p.RoTariffDiscountRules)
                    .HasForeignKey(d => d.TariffDiscountId)
                    .HasConstraintName("fk_tariff_discount");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoTariffDiscountRules)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");
            });

            modelBuilder.Entity<RoTariffGroup>(entity =>
            {
                entity.HasKey(e => e.TariffGroupId)
                    .HasName("pk_tariff_group");

                entity.ToTable("ro_tariff_group");

                entity.HasComment("Таблица групп тарифов");

                entity.HasIndex(e => e.TariffGroupName, "sk_tariff_group_name")
                    .IsUnique();

                entity.Property(e => e.TariffGroupId)
                    .HasColumnName("tariff_group_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.TariffGroupName)
                    .HasMaxLength(100)
                    .HasColumnName("tariff_group_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoTariffLimit>(entity =>
            {
                entity.HasKey(e => new { e.TariffId, e.LimitId })
                    .HasName("pk_tariff_limit");

                entity.ToTable("ro_tariff_limit");

                entity.HasComment("Таблица ограничений для тарифов");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("ИД тарифа");

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("ИД ограничения");

                entity.Property(e => e.LimitValue)
                    .HasMaxLength(255)
                    .HasColumnName("limit_value")
                    .HasComment("Значение ограничения");

                entity.HasOne(d => d.Limit)
                    .WithMany(p => p.RoTariffLimits)
                    .HasForeignKey(d => d.LimitId)
                    .HasConstraintName("fk_limit_id");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RoTariffLimits)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff_id");
            });

            modelBuilder.Entity<RoTariffType>(entity =>
            {
                entity.HasKey(e => e.TariffTypeId)
                    .HasName("pk_tariff_type");

                entity.ToTable("ro_tariff_type");

                entity.HasComment("Таблица типов тарифов");

                entity.HasIndex(e => e.TariffTypeName, "sk_tariff_type_name")
                    .IsUnique();

                entity.Property(e => e.TariffTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("tariff_type_id")
                    .HasComment("Код");

                entity.Property(e => e.TariffTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("tariff_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoTariffZone>(entity =>
            {
                entity.HasKey(e => e.TariffZoneId)
                    .HasName("pk_tariff_zone");

                entity.ToTable("ro_tariff_zone");

                entity.HasComment("Таблица тарифных зон");

                entity.HasIndex(e => e.TariffZoneName, "sk_tariff_zone_name")
                    .IsUnique();

                entity.Property(e => e.TariffZoneId)
                    .ValueGeneratedNever()
                    .HasColumnName("tariff_zone_id")
                    .HasComment("Код");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Стоимость");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.TariffZoneName)
                    .HasMaxLength(100)
                    .HasColumnName("tariff_zone_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.PriceNavigation)
                    .WithMany(p => p.RoTariffZones)
                    .HasForeignKey(d => d.PriceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_price");
            });

            modelBuilder.Entity<RoTaxSystem>(entity =>
            {
                entity.HasKey(e => e.TaxSystemId)
                    .HasName("ro_tax_system_pkey");

                entity.ToTable("ro_tax_system");

                entity.HasComment("Таблица систем налогообложения");

                entity.HasIndex(e => e.Alias, "ro_tax_system_alias_key")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "ro_tax_system_name_key")
                    .IsUnique();

                entity.Property(e => e.TaxSystemId)
                    .ValueGeneratedNever()
                    .HasColumnName("tax_system_id")
                    .HasComment("Идентификатор системы налогообложения");

                entity.Property(e => e.Alias)
                    .HasMaxLength(50)
                    .HasColumnName("alias")
                    .HasComment("Обозначение системы налогообложения");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .HasColumnName("name")
                    .HasComment("Название системы налогообложения");
            });

            modelBuilder.Entity<RoToken>(entity =>
            {
                entity.HasKey(e => e.TokenId)
                    .HasName("pk_token");

                entity.ToTable("ro_token");

                entity.HasComment("Таблица токенов");

                entity.HasIndex(e => e.ApplicationId, "token_application_idx");

                entity.HasIndex(e => e.ProductId, "token_product_id_idx");

                entity.HasIndex(e => e.TokenTypeId, "token_token_type_idx");

                entity.HasIndex(e => e.UserId, "token_user_id_idx");

                entity.Property(e => e.TokenId)
                    .HasColumnName("token_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время начала");

                entity.Property(e => e.LifeTime)
                    .HasColumnName("life_time")
                    .HasComment("Время жизни в секундах");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.TokenTypeId)
                    .HasColumnName("token_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.Value)
                    .HasColumnType("character varying")
                    .HasColumnName("value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.RoTokens)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoTokens)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.TokenType)
                    .WithMany(p => p.RoTokens)
                    .HasForeignKey(d => d.TokenTypeId)
                    .HasConstraintName("fk_token_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoTokens)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Gates)
                    .WithMany(p => p.Tokens)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoTokenGate",
                        l => l.HasOne<RoGate>().WithMany().HasForeignKey("GateId").HasConstraintName("fk_gate_id"),
                        r => r.HasOne<RoToken>().WithMany().HasForeignKey("TokenId").HasConstraintName("fk_token_id"),
                        j =>
                        {
                            j.HasKey("TokenId", "GateId").HasName("pk_token_gate_id");

                            j.ToTable("ro_token_gate").HasComment("Таблица для опредления гейта токена");

                            j.IndexerProperty<Guid>("TokenId").HasColumnName("token_id").HasComment("Токен");

                            j.IndexerProperty<Guid>("GateId").HasColumnName("gate_id").HasComment("Гейт");
                        });
            });

            modelBuilder.Entity<RoTokenType>(entity =>
            {
                entity.HasKey(e => e.TokenTypeId)
                    .HasName("pk_token_type");

                entity.ToTable("ro_token_type");

                entity.HasComment("Таблица типов токенов");

                entity.HasIndex(e => e.TokenTypeName, "sk_token_type_name")
                    .IsUnique();

                entity.Property(e => e.TokenTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("token_type_id")
                    .HasComment("Код");

                entity.Property(e => e.LifeTime)
                    .HasColumnName("life_time")
                    .HasComment("Время жизни в секундах");

                entity.Property(e => e.TokenTypeName)
                    .HasMaxLength(200)
                    .HasColumnName("token_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoTradingPlatformRegistrationRequest>(entity =>
            {
                entity.HasKey(e => e.RequestId)
                    .HasName("pk_request_id");

                entity.ToTable("ro_trading_platform_registration_request");

                entity.HasComment("Таблица запросов на регистрацию сертификата в торговой площадке");

                entity.HasIndex(e => e.KeyId, "ro_trading_platform_registration_request_key_id");

                entity.HasIndex(e => e.ProductId, "ro_trading_platform_registration_request_product_id");

                entity.HasIndex(e => e.TradingPlatformTariffAttributeId, "ro_trading_platform_registration_request_tariff_attribute_id");

                entity.HasIndex(e => e.StepId, "ro_trading_platform_registration_request_tariff_step_id");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.Error)
                    .HasMaxLength(300)
                    .HasColumnName("error")
                    .HasComment("Ошибка регистрации сертификата");

                entity.Property(e => e.ExternalRequestId)
                    .HasMaxLength(40)
                    .HasColumnName("external_request_id")
                    .HasComment("Идентификатор запроса в торговой площадке");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Идентификатор регистрируемого ключа");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор регистрируемого продукта");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус регистрации");

                entity.Property(e => e.TradingPlatformTariffAttributeId)
                    .HasColumnName("trading_platform_tariff_attribute_id")
                    .HasComment("Идентификатор связи атрибута тарифа и торговой площадки");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.RoTradingPlatformRegistrationRequests)
                    .HasForeignKey(d => d.KeyId)
                    .HasConstraintName("fk_key");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RoTradingPlatformRegistrationRequests)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoTradingPlatformRegistrationRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.TradingPlatformTariffAttribute)
                    .WithMany(p => p.RoTradingPlatformRegistrationRequests)
                    .HasForeignKey(d => d.TradingPlatformTariffAttributeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_trading_platform_tariff_attribute");
            });

            modelBuilder.Entity<RoTradingPlatformTariffAttribute>(entity =>
            {
                entity.HasKey(e => e.TariffAttributeId)
                    .HasName("pk_trading_platform_tariff_attribute_id");

                entity.ToTable("ro_trading_platform_tariff_attribute");

                entity.HasComment("Таблица связей идентификаторов тарифов торговых площадок с внутренними тарифами");

                entity.HasIndex(e => e.TariffAttributeId, "ro_trading_platform_tariff_attribute_tariff_attribute_idx");

                entity.Property(e => e.TariffAttributeId)
                    .ValueGeneratedNever()
                    .HasColumnName("tariff_attribute_id")
                    .HasComment("Идентификатор внутреннего атрибута тарифа");

                entity.Property(e => e.TradingPlatformExternalTariffId)
                    .HasMaxLength(50)
                    .HasColumnName("trading_platform_external_tariff_id")
                    .HasComment("Идентификатор тарифа в торговой площадке");

                entity.HasOne(d => d.TariffAttribute)
                    .WithOne(p => p.RoTradingPlatformTariffAttribute)
                    .HasForeignKey<RoTradingPlatformTariffAttribute>(d => d.TariffAttributeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tariff_attribute");
            });

            modelBuilder.Entity<RoTransaction>(entity =>
            {
                entity.HasKey(e => e.TransactionId)
                    .HasName("pk_transaction");

                entity.ToTable("ro_transaction");

                entity.HasComment("Таблица транзакций документооборотов");

                entity.HasIndex(e => new { e.WorkflowId, e.TransactionTypeId }, "sk_transaction")
                    .IsUnique();

                entity.HasIndex(e => e.PacketId, "transaction_packet_id_idx");

                entity.HasIndex(e => e.RecipientTypeId, "transaction_recipient_type_id_idx");

                entity.HasIndex(e => e.SenderTypeId, "transaction_sender_type_id_idx");

                entity.HasIndex(e => e.TransactionTypeId, "transaction_transaction_type_id_idx");

                entity.HasIndex(e => e.WorkflowId, "transaction_workflow_id_idx");

                entity.Property(e => e.TransactionId)
                    .HasColumnName("transaction_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.FormatVersion)
                    .HasMaxLength(10)
                    .HasColumnName("format_version")
                    .HasComment("Версия формата");

                entity.Property(e => e.FormationTime)
                    .HasPrecision(0)
                    .HasColumnName("formation_time")
                    .HasComment("Дата формирования");

                entity.Property(e => e.PacketId)
                    .HasColumnName("packet_id")
                    .HasComment("Пакет");

                entity.Property(e => e.ReceiveTime)
                    .HasPrecision(0)
                    .HasColumnName("receive_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата получения");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(40)
                    .HasColumnName("recipient_name")
                    .HasComment("Получатель");

                entity.Property(e => e.RecipientTypeId)
                    .HasColumnName("recipient_type_id")
                    .HasComment("Тип получателя");

                entity.Property(e => e.SenderName)
                    .HasMaxLength(40)
                    .HasColumnName("sender_name")
                    .HasComment("Отправитель");

                entity.Property(e => e.SenderTypeId)
                    .HasColumnName("sender_type_id")
                    .HasComment("Тип отправителя");

                entity.Property(e => e.TransactionTypeId)
                    .HasColumnName("transaction_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.RecipientType)
                    .WithMany(p => p.RoTransactionRecipientTypes)
                    .HasForeignKey(d => d.RecipientTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_recipient_type");

                entity.HasOne(d => d.SenderType)
                    .WithMany(p => p.RoTransactionSenderTypes)
                    .HasForeignKey(d => d.SenderTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_sender_type");

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.RoTransactions)
                    .HasForeignKey(d => d.TransactionTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_transaction_type");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.RoTransactions)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RoTransactionType>(entity =>
            {
                entity.HasKey(e => e.TransactionTypeId)
                    .HasName("pk_transaction_type");

                entity.ToTable("ro_transaction_type");

                entity.HasComment("Таблица типов транзакций документооборота");

                entity.HasIndex(e => new { e.TransactionTypeName, e.WorkflowTypeId }, "sk_transaction_type_name")
                    .IsUnique();

                entity.HasIndex(e => e.WorkflowTypeId, "transaction_type_workflow_type_id_idx");

                entity.Property(e => e.TransactionTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("transaction_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.TransactionTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("transaction_type_name")
                    .HasComment("Наименование");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип документооборота");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.RoTransactionTypes)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<RoTransferTariffLog>(entity =>
            {
                entity.HasKey(e => e.TransferTariffId)
                    .HasName("pk_transfer_tariff_log");

                entity.ToTable("ro_transfer_tariff_log");

                entity.HasComment("Таблица логирования переноса лицензий");

                entity.HasIndex(e => e.ContractTariffId, "transfer_tariff_log_contract_tariff_id_idx");

                entity.HasIndex(e => e.PreviousContractTariffId, "transfer_tariff_log_previous_contract_tariff_id_idx");

                entity.HasIndex(e => e.ProductTransferId, "transfer_tariff_log_product_transfer_id_idx");

                entity.Property(e => e.TransferTariffId)
                    .HasColumnName("transfer_tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Лицензия");

                entity.Property(e => e.PreviousContractTariffId)
                    .HasColumnName("previous_contract_tariff_id")
                    .HasComment("Предыдущая лицензия");

                entity.Property(e => e.ProductTransferId)
                    .HasColumnName("product_transfer_id")
                    .HasComment("Лог переноса продукта");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.RoTransferTariffLogContractTariffs)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.PreviousContractTariff)
                    .WithMany(p => p.RoTransferTariffLogPreviousContractTariffs)
                    .HasForeignKey(d => d.PreviousContractTariffId)
                    .HasConstraintName("fk_previous_contract_tariff");

                entity.HasOne(d => d.ProductTransfer)
                    .WithMany(p => p.RoTransferTariffLogs)
                    .HasForeignKey(d => d.ProductTransferId)
                    .HasConstraintName("fk_product_transfer");
            });

            modelBuilder.Entity<RoTransition>(entity =>
            {
                entity.HasKey(e => e.TransitionId)
                    .HasName("pk_transition");

                entity.ToTable("ro_transition");

                entity.HasComment("Таблица переходов");

                entity.HasIndex(e => e.ApplicationId, "transition_application_id_idx");

                entity.HasIndex(e => e.ConditionId, "transition_condition_id_idx");

                entity.HasIndex(e => e.NextStepId, "transition_next_step_id_idx");

                entity.HasIndex(e => e.ObjectId, "transition_object_id_idx");

                entity.HasIndex(e => e.ObjectTypeId, "transition_object_type_id_idx");

                entity.HasIndex(e => e.StepId, "transition_step_id_idx");

                entity.Property(e => e.TransitionId)
                    .HasColumnName("transition_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.ConditionId)
                    .HasColumnName("condition_id")
                    .HasComment("Условие");

                entity.Property(e => e.NextStepId)
                    .HasColumnName("next_step_id")
                    .HasComment("Следующее состояние");

                entity.Property(e => e.ObjectId)
                    .HasColumnName("object_id")
                    .HasComment("Объект");

                entity.Property(e => e.ObjectTypeId)
                    .HasColumnName("object_type_id")
                    .HasComment("Тип объекта");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasComment("Приоритет");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.RoTransitions)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Condition)
                    .WithMany(p => p.RoTransitions)
                    .HasForeignKey(d => d.ConditionId)
                    .HasConstraintName("fk_condition");

                entity.HasOne(d => d.NextStep)
                    .WithMany(p => p.RoTransitionNextSteps)
                    .HasForeignKey(d => d.NextStepId)
                    .HasConstraintName("fk_next_step");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.RoTransitions)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_object");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.RoTransitions)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .HasConstraintName("fk_object_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoTransitionSteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RoUnit>(entity =>
            {
                entity.HasKey(e => e.UnitId)
                    .HasName("pk_unit");

                entity.ToTable("ro_unit");

                entity.HasComment("Таблица ед. измерения");

                entity.HasIndex(e => new { e.UnitTypeId, e.UnitName }, "sk_unit")
                    .IsUnique();

                entity.HasIndex(e => e.UnitTypeId, "unit_unit_type_id_idx");

                entity.Property(e => e.UnitId)
                    .HasColumnName("unit_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.UnitName)
                    .HasMaxLength(50)
                    .HasColumnName("unit_name")
                    .HasComment("Наименование");

                entity.Property(e => e.UnitTypeId)
                    .HasColumnName("unit_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.UnitType)
                    .WithMany(p => p.RoUnits)
                    .HasForeignKey(d => d.UnitTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_unit_type");
            });

            modelBuilder.Entity<RoUnitType>(entity =>
            {
                entity.HasKey(e => e.UnitTypeId)
                    .HasName("pk_unit_type");

                entity.ToTable("ro_unit_type");

                entity.HasComment("Таблица типов ед. измерений");

                entity.HasIndex(e => e.UnitTypeName, "sk_unit_type_name")
                    .IsUnique();

                entity.Property(e => e.UnitTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("unit_type_id")
                    .HasComment("Код");

                entity.Property(e => e.UnitTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("unit_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoUpdateSystem>(entity =>
            {
                entity.HasKey(e => e.SystemId)
                    .HasName("pk_update_system");

                entity.ToTable("ro_update_system");

                entity.HasComment("Таблица систем обновлений");

                entity.Property(e => e.SystemId)
                    .HasColumnName("system_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.SystemDescription)
                    .HasMaxLength(256)
                    .HasColumnName("system_description")
                    .HasComment("Название системы");

                entity.Property(e => e.SystemName)
                    .HasMaxLength(64)
                    .HasColumnName("system_name")
                    .HasComment("Название системы");
            });

            modelBuilder.Entity<RoUseType>(entity =>
            {
                entity.HasKey(e => e.UseTypeId)
                    .HasName("pk_use_type");

                entity.ToTable("ro_use_type");

                entity.HasComment("Тип применения");

                entity.Property(e => e.UseTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("use_type_id")
                    .HasComment("Код");

                entity.Property(e => e.UseTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("use_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoUser>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("pk_user");

                entity.ToTable("ro_user");

                entity.HasComment("Таблица пользователей");

                entity.HasIndex(e => e.CertificateId, "idx_user_certificate_id")
                    .IsUnique();

                entity.HasIndex(e => e.UserGuid, "ro_user_user_guid_key")
                    .IsUnique();

                entity.HasIndex(e => e.UserName, "sk_user_name")
                    .IsUnique();

                entity.HasIndex(e => e.AgentId, "user_agent_id_idx");

                entity.HasIndex(e => e.OfficeWorkId, "user_office_work_id_idx");

                entity.HasIndex(e => e.PostId, "user_post_id_idx");

                entity.HasIndex(e => e.RoleId, "user_role_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.AuthorizationName)
                    .HasMaxLength(100)
                    .HasColumnName("authorization_name")
                    .HasComment("ФИО по доверенности");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат пользователя");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");

                entity.Property(e => e.Document)
                    .HasMaxLength(100)
                    .HasColumnName("document")
                    .HasComment("Документ");

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasComment("Дата документа");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(11)
                    .HasColumnName("document_number")
                    .HasComment("Номер документа");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл почта");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name")
                    .HasComment("ФИО");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OfficeWorkId)
                    .HasColumnName("office_work_id")
                    .HasComment("Офис");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.PasswordPhrase)
                    .HasMaxLength(100)
                    .HasColumnName("password_phrase")
                    .HasComment("Парольная фраза");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PostId)
                    .HasColumnName("post_id")
                    .HasComment("Должность");

                entity.Property(e => e.RoleId)
                    .HasColumnName("role_id")
                    .HasComment("Группа");

                entity.Property(e => e.UserGuid)
                    .HasColumnName("user_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .HasColumnName("user_name")
                    .HasComment("Имя");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoUsers)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Certificate)
                    .WithOne(p => p.RoUser)
                    .HasForeignKey<RoUser>(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.OfficeWork)
                    .WithMany(p => p.RoUsers)
                    .HasForeignKey(d => d.OfficeWorkId)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.RoUsers)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_post");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoUsers)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_role");
            });

            modelBuilder.Entity<RoUserAgentTrusted>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("ro_user_agent_trusted_pk");

                entity.ToTable("ro_user_agent_trusted");

                entity.HasComment("Таблица признака доверенного пользователя партнера");

                entity.HasIndex(e => e.UserId, "ro_user_agent_trusted_user_id_uindex")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Идентификатор партнера");

                entity.Property(e => e.IsTrusted)
                    .HasColumnName("is_trusted")
                    .HasComment("Является ли пользователь партнера доверенным");

                entity.Property(e => e.ProductGuid)
                    .HasColumnName("product_guid")
                    .HasComment("Идентификатор продукта");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.RoUserAgentTrusteds)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("ro_user_agent_trusted_ro_agent_agent_id_fk");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.RoUserAgentTrusted)
                    .HasForeignKey<RoUserAgentTrusted>(d => d.UserId)
                    .HasConstraintName("ro_user_agent_trusted_ro_user_user_id_fk");
            });

            modelBuilder.Entity<RoUserEmailRegistered>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_user_email_registered");

                entity.HasComment("Временная таблица для подтверждения наличия e-mail у пользователя");

                entity.HasIndex(e => e.UserId, "ro_user_email_registered_user_id_key")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("идентификатор пользователя с подтверждённым e-mail");
            });

            modelBuilder.Entity<RoUserFintender>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("pk_user_fintender");

                entity.ToTable("ro_user_fintender");

                entity.HasComment("Таблица пользователей финтендера");

                entity.HasIndex(e => e.Login, "sk_user_fintender")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IsAdmin)
                    .HasColumnName("is_admin")
                    .HasComment("Администратор");

                entity.Property(e => e.Login)
                    .HasMaxLength(50)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.RoUserFintender)
                    .HasForeignKey<RoUserFintender>(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoUserPassword>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_user_password");

                entity.HasIndex(e => e.UserId, "idx_ro_user_password_user_id");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.User)
                    .WithMany()
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<RoUserPromotionConfirmed>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.PromotionTypeId })
                    .HasName("pk_user_promotion_confirmed");

                entity.ToTable("ro_user_promotion_confirmed");

                entity.HasComment("Таблица со списком потдтверждённых пользователями акций");

                entity.HasIndex(e => e.PromotionTypeId, "user_promotion_confirmed_promotion_type_id_idx");

                entity.HasIndex(e => e.UserId, "user_promotion_confirmed_user_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.Property(e => e.PromotionTypeId)
                    .HasColumnName("promotion_type_id")
                    .HasComment("Идентификатор рекламной акции");

                entity.Property(e => e.ConfirmDate)
                    .HasPrecision(0)
                    .HasColumnName("confirm_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата подтверждения");

                entity.HasOne(d => d.PromotionType)
                    .WithMany(p => p.RoUserPromotionConfirmeds)
                    .HasForeignKey(d => d.PromotionTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_promotion_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoUserPromotionConfirmeds)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId })
                    .HasName("pk_user_role");

                entity.ToTable("ro_user_role");

                entity.HasComment("Таблица ролей пользователей");

                entity.HasIndex(e => e.RoleId, "user_role_role_id_idx");

                entity.HasIndex(e => e.UserId, "user_role_user_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.RoleId)
                    .HasColumnName("role_id")
                    .HasComment("Роль");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("fk_role");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoUserRoleAccessInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_user_role_access_information");

                entity.Property(e => e.AccessLevelId).HasColumnName("access_level_id");

                entity.Property(e => e.AccessLevelName)
                    .HasMaxLength(100)
                    .HasColumnName("access_level_name");

                entity.Property(e => e.LevelPriority).HasColumnName("level_priority");

                entity.Property(e => e.ModuleId).HasColumnName("module_id");

                entity.Property(e => e.ModuleName)
                    .HasMaxLength(150)
                    .HasColumnName("module_name");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<RoUserSetting>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.SettingId })
                    .HasName("pk_user_setting");

                entity.ToTable("ro_user_setting");

                entity.HasComment("Таблица настроек пользователей");

                entity.HasIndex(e => e.SettingId, "user_setting_setting_id_idx");

                entity.HasIndex(e => e.UserId, "user_setting_user_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.SettingValue)
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.RoUserSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoUserSettings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<RoUserTrust>(entity =>
            {
                entity.HasKey(e => e.UserTrustId)
                    .HasName("pk_user_trust");

                entity.ToTable("ro_user_trust");

                entity.HasComment("Таблица доверенностей пользователей");

                entity.HasIndex(e => e.FileId, "user_trust_file_idx");

                entity.HasIndex(e => e.OffTime, "user_trust_off_time_idx");

                entity.HasIndex(e => e.UserId, "user_trust_user_idx");

                entity.Property(e => e.UserTrustId)
                    .HasColumnName("user_trust_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasDefaultValueSql("(('now'::text)::date + '1 year'::interval)")
                    .HasComment("Дата окончания доверенности");

                entity.Property(e => e.FileId).HasColumnName("file_id");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("first_name")
                    .HasComment("Имя");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasDefaultValueSql("('now'::text)::date")
                    .HasComment("Дата начала доверенности");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("last_name")
                    .HasComment("Фамилия");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения доверенности");

                entity.Property(e => e.PassportAddon)
                    .HasMaxLength(200)
                    .HasColumnName("passport_addon")
                    .HasComment("Кем выдан паспорт");

                entity.Property(e => e.PassportDate)
                    .HasColumnName("passport_date")
                    .HasComment("Когда выдан паспорт");

                entity.Property(e => e.PassportNumber)
                    .HasMaxLength(25)
                    .HasColumnName("passport_number")
                    .HasComment("Номер паспорта");

                entity.Property(e => e.PassportSeries)
                    .HasMaxLength(25)
                    .HasColumnName("passport_series")
                    .HasComment("Серия паспорта");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(64)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.RoUserTrusts)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_file");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoUserTrusts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RoValueType>(entity =>
            {
                entity.HasKey(e => e.ValueTypeId)
                    .HasName("pk_value_type");

                entity.ToTable("ro_value_type");

                entity.HasComment("Таблица типов значений");

                entity.HasIndex(e => e.CodeName, "sk_value_type_code_name")
                    .IsUnique();

                entity.HasIndex(e => e.ValueTypeName, "sk_value_type_name")
                    .IsUnique();

                entity.Property(e => e.ValueTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("value_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CodeName)
                    .HasMaxLength(10)
                    .HasColumnName("code_name")
                    .HasComment("Кодовое имя");

                entity.Property(e => e.ValueTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("value_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoVersion>(entity =>
            {
                entity.HasKey(e => e.VersionNumber)
                    .HasName("pk_version");

                entity.ToTable("ro_version");

                entity.HasComment("Таблица версий БД");

                entity.Property(e => e.VersionNumber)
                    .HasMaxLength(10)
                    .HasColumnName("version_number")
                    .HasComment("Номер");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");
            });

            modelBuilder.Entity<RoVipnetNode>(entity =>
            {
                entity.HasKey(e => e.VipnetNodeId)
                    .HasName("pk_vipnet_node");

                entity.ToTable("ro_vipnet_node");

                entity.HasComment("Таблица сетевых узлов ViPNet");

                entity.Property(e => e.VipnetNodeId)
                    .HasMaxLength(9)
                    .HasColumnName("vipnet_node_id")
                    .IsFixedLength()
                    .HasComment("Идентификатор");

                entity.Property(e => e.VipnetNodeName)
                    .HasMaxLength(150)
                    .HasColumnName("vipnet_node_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoVipnetUser>(entity =>
            {
                entity.HasKey(e => e.VipnetUserId)
                    .HasName("pk_vipnet_user");

                entity.ToTable("ro_vipnet_user");

                entity.HasComment("Таблица пользователей ViPNet");

                entity.HasIndex(e => e.VipnetNodeId, "vipnet_user_vipnet_node_id_idx");

                entity.Property(e => e.VipnetUserId)
                    .HasMaxLength(8)
                    .HasColumnName("vipnet_user_id")
                    .IsFixedLength()
                    .HasComment("Идентификатор");

                entity.Property(e => e.VipnetNodeId)
                    .HasMaxLength(9)
                    .HasColumnName("vipnet_node_id")
                    .IsFixedLength()
                    .HasComment("Сетевой узел");

                entity.Property(e => e.VipnetUserName)
                    .HasMaxLength(56)
                    .HasColumnName("vipnet_user_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.VipnetNode)
                    .WithMany(p => p.RoVipnetUsers)
                    .HasForeignKey(d => d.VipnetNodeId)
                    .HasConstraintName("fk_vipnet_node");
            });

            modelBuilder.Entity<RoVisibilityType>(entity =>
            {
                entity.HasKey(e => e.VisibilityTypeId)
                    .HasName("pk_visibility_type");

                entity.ToTable("ro_visibility_type");

                entity.HasComment("Таблица типов видимости");

                entity.HasIndex(e => e.VisibilityTypeName, "sk_visibility_type_name")
                    .IsUnique();

                entity.Property(e => e.VisibilityTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("visibility_type_id")
                    .HasComment("Код");

                entity.Property(e => e.VisibilityTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("visibility_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoWorkCalendar>(entity =>
            {
                entity.HasKey(e => e.WorkDay)
                    .HasName("ro_work_calendar_pkey");

                entity.ToTable("ro_work_calendar");

                entity.Property(e => e.WorkDay)
                    .HasColumnName("work_day")
                    .HasComment("Рабочий день");

                entity.Property(e => e.IsHoliday)
                    .HasColumnName("is_holiday")
                    .HasComment("Признак праздничного дня");
            });

            modelBuilder.Entity<RoWorkflow>(entity =>
            {
                entity.HasKey(e => e.WorkflowId)
                    .HasName("pk_workflow");

                entity.ToTable("ro_workflow");

                entity.HasComment("Таблица документооборотов");

                entity.HasIndex(e => e.WorkflowGuid, "sk_workflow")
                    .IsUnique();

                entity.HasIndex(e => e.WorkflowTypeId, "workflow_workflow_type_id_idx");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CallbackAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("callback_address")
                    .HasComment("Адрес ответа");

                entity.Property(e => e.CompletedTime)
                    .HasPrecision(0)
                    .HasColumnName("completed_time")
                    .HasComment("Дата завершения");

                entity.Property(e => e.StartedTime)
                    .HasPrecision(0)
                    .HasColumnName("started_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата начала");

                entity.Property(e => e.WorkflowGuid)
                    .HasColumnName("workflow_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.RoWorkflows)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<RoWorkflowDocType>(entity =>
            {
                entity.HasKey(e => e.WorkflowDocTypeId)
                    .HasName("pk_workflow_doc_type");

                entity.ToTable("ro_workflow_doc_type");

                entity.HasComment("Таблица приложений документооборота");

                entity.HasIndex(e => new { e.WorkflowTypeId, e.AbonentTypeId, e.DocTypeId }, "sk_workflow_doc_type")
                    .IsUnique();

                entity.HasIndex(e => e.AbonentTypeId, "workflow_doc_type_abonent_type_id_idx");

                entity.HasIndex(e => e.DocTypeId, "workflow_doc_type_doc_type_id_idx");

                entity.HasIndex(e => e.WorkflowTypeId, "workflow_doc_type_workflow_type_id_idx");

                entity.Property(e => e.WorkflowDocTypeId)
                    .HasColumnName("workflow_doc_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Тип абонента");

                entity.Property(e => e.DocTypeId)
                    .HasColumnName("doc_type_id")
                    .HasComment("Тип документа");

                entity.Property(e => e.Required)
                    .HasColumnName("required")
                    .HasComment("Обязательный");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип документооборота");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RoWorkflowDocTypes)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.RoWorkflowDocTypes)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("fk_doc_type");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.RoWorkflowDocTypes)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<RoWorkflowFeedback>(entity =>
            {
                entity.HasKey(e => e.FeedbackId)
                    .HasName("pk_workflow_feedback");

                entity.ToTable("ro_workflow_feedback");

                entity.HasComment("Таблица обратной связи по документооборотам");

                entity.HasIndex(e => e.RatingId, "workflow_feedback_rating_id_idx");

                entity.HasIndex(e => e.WorkflowId, "workflow_feedback_workflow_id_idx");

                entity.Property(e => e.FeedbackId)
                    .HasColumnName("feedback_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.RatingId)
                    .HasColumnName("rating_id")
                    .HasComment("Оценка");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.Rating)
                    .WithMany(p => p.RoWorkflowFeedbacks)
                    .HasForeignKey(d => d.RatingId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_feedback_rating");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.RoWorkflowFeedbacks)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow_id");
            });

            modelBuilder.Entity<RoWorkflowService>(entity =>
            {
                entity.HasKey(e => e.ServiceId)
                    .HasName("pk_workflow_service");

                entity.ToTable("ro_workflow_service");

                entity.HasComment("Таблица для описания доп. услуг, связанных с документооборотом");

                entity.HasIndex(e => new { e.WorkflowId, e.ServiceTypeId, e.GateId }, "sk_workflow_service")
                    .IsUnique();

                entity.HasIndex(e => e.ServiceTypeId, "workflow_service_service_type_id_idx");

                entity.HasIndex(e => e.StepId, "workflow_service_step_id_idx");

                entity.HasIndex(e => e.WorkflowId, "workflow_service_workflow_id_idx");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("service_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CallbackAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("callback_address")
                    .HasComment("Адрес ответа");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Ссылка на тип услуги");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Ссылка на состояние");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Ссылка на документооборот");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.RoWorkflowServices)
                    .HasForeignKey(d => d.GateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_gate");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.RoWorkflowServices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("fk_service_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoWorkflowServices)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.RoWorkflowServices)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RoWorkflowServiceStep>(entity =>
            {
                entity.HasKey(e => new { e.WorkflowId, e.StepId, e.LogTime })
                    .HasName("pk_workflow_service_step");

                entity.ToTable("ro_workflow_service_step");

                entity.HasComment("Таблица состояний услуг, связанных с документооборотом");

                entity.HasIndex(e => e.StepId, "workflow_service_step_step_id_idx");

                entity.HasIndex(e => e.WorkflowId, "workflow_service_step_workflow_id_idx");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RoWorkflowServiceSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.RoWorkflowServiceSteps)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RoWorkflowType>(entity =>
            {
                entity.HasKey(e => e.WorkflowTypeId)
                    .HasName("pk_workflow_type");

                entity.ToTable("ro_workflow_type");

                entity.HasComment("Таблица типов документооборота");

                entity.HasIndex(e => e.WorkflowTypeName, "sk_workflow_type_name")
                    .IsUnique();

                entity.Property(e => e.WorkflowTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("workflow_type_id")
                    .HasComment("Код");

                entity.Property(e => e.WorkflowTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("workflow_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<ServerAbonentView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("server_abonent_view");

                entity.Property(e => e.Expiry).HasColumnName("expiry");

                entity.Property(e => e.Fss)
                    .HasMaxLength(10)
                    .HasColumnName("fss");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .HasColumnName("name");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn");

                entity.Property(e => e.Partner)
                    .HasMaxLength(200)
                    .HasColumnName("partner");

                entity.Property(e => e.Pfr)
                    .HasMaxLength(14)
                    .HasColumnName("pfr");

                entity.Property(e => e.RegGuid).HasColumnName("reg_guid");

                entity.Property(e => e.Registrator)
                    .HasMaxLength(200)
                    .HasColumnName("registrator");

                entity.Property(e => e.StorageTypeId).HasColumnName("storage_type_id");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<ServerKppView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("server_kpp_view");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .IsFixedLength();

                entity.Property(e => e.Recipient).HasColumnName("recipient");
            });

            modelBuilder.Entity<ServerMemberView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("server_member_view");

                entity.Property(e => e.Certificate).HasColumnName("certificate");

                entity.Property(e => e.Firstname)
                    .HasMaxLength(150)
                    .HasColumnName("firstname");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Lastname)
                    .HasMaxLength(150)
                    .HasColumnName("lastname");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic");

                entity.Property(e => e.Post)
                    .HasColumnType("character varying")
                    .HasColumnName("post");

                entity.Property(e => e.Skid)
                    .HasMaxLength(40)
                    .HasColumnName("skid");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .HasColumnName("snils");

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<ServerPartnerView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("server_partner_view");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");

                entity.Property(e => e.PartnerName)
                    .HasMaxLength(200)
                    .HasColumnName("partner_name");
            });

            modelBuilder.Entity<ServerRecipientView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("server_recipient_view");

                entity.Property(e => e.Guid).HasColumnName("guid");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Protocol).HasColumnName("protocol");

                entity.Property(e => e.Recipient)
                    .HasMaxLength(12)
                    .HasColumnName("recipient");

                entity.Property(e => e.Server)
                    .HasMaxLength(100)
                    .HasColumnName("server");

                entity.Property(e => e.Sos)
                    .HasMaxLength(3)
                    .HasColumnName("sos");
            });

            modelBuilder.Entity<StatProductLicenseView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("stat_product_license_view");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.ExtLicense).HasColumnName("ext_license");

                entity.Property(e => e.ExtLicenseAr).HasColumnName("ext_license_ar");

                entity.Property(e => e.LicenseTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("license_type_name");

                entity.Property(e => e.M).HasColumnName("m");

                entity.Property(e => e.NewLicense).HasColumnName("new_license");

                entity.Property(e => e.NewLicenseAr).HasColumnName("new_license_ar");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.Registrator).HasColumnName("registrator");

                entity.Property(e => e.Y).HasColumnName("y");
            });

            modelBuilder.Entity<TaxRepre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("tax_repres");

                entity.HasComment("Возвращает выборку все налоговые предст. по продуктам");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(40)
                    .HasColumnName("category_name");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");
            });

            modelBuilder.Entity<TempAbonent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("temp_abonents");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentLogin)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_login");

                entity.Property(e => e.AbonentPassword)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_password");

                entity.Property(e => e.AbonentTypeId).HasColumnName("abonent_type_id");

                entity.Property(e => e.CompanyGroupId).HasColumnName("company_group_id");

                entity.Property(e => e.ContactPeople)
                    .HasColumnType("character varying")
                    .HasColumnName("contact_people");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.Fax)
                    .HasMaxLength(24)
                    .HasColumnName("fax");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LocationAddressId).HasColumnName("location_address_id");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn");

                entity.Property(e => e.OkopfId).HasColumnName("okopf_id");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.PostalAddressId).HasColumnName("postal_address_id");

                entity.Property(e => e.RawContacts)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_contacts");

                entity.Property(e => e.RawLocationAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_location_address");

                entity.Property(e => e.RawPostalAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_postal_address");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.StRnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("st_rns_pfr");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<TestTrgm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_trgm");

                entity.Property(e => e.T).HasColumnName("t");
            });

            modelBuilder.HasSequence("ro_issuer_issuer_id_seq");

            modelBuilder.HasSequence("ro_log_type_log_type_id_seq").HasMax(2147483647);

            modelBuilder.HasSequence("ro_potential_abonent_trading_platform_id_seq");

            modelBuilder.HasSequence("ro_potential_abonent_trading_platform_type_id_seq");

            modelBuilder.HasSequence("ro_price_tax_price_id_seq");

            modelBuilder.HasSequence("ro_tariff_tariff_id_seq");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
